layouts:
  # path 只表示 router.go 的模板，具体的路径由默认路径和 router_dir 决定
  - path: router.go
    delims:
      - '{{'
      - '}}'
    body: |-
      // Code generated by hertz generator. DO NOT EDIT.
      
      package {{$.PackageName}}
      
      import (
      	"github.com/cloudwego/hertz/pkg/app/server"
      
      	{{range $k, $v := .HandlerPackages}}
          {{$k}} "{{$v}}"
        {{- end}}
      )
      
      /*
       This file will register all the routes of the services in the master idl.
       And it will update automatically when you use the "update" command for the idl.
       So don't modify the contents of the file, or your code will be deleted when it is updated.
       */
      
      {{define "g"}}
      {{- if eq .Path "/"}}r
      {{- else}}{{.GroupName}}{{end}}
      {{- end}}
      
      {{define "G"}}
      {{- if ne .Handler ""}}
      	{{- .GroupName}}.{{.HttpMethod}}("{{.Path}}", append({{.MiddleWare}}Mw(), {{.Handler}})...)
      {{- end}}
      {{- if ne (len .Children) 0}}
      {{.MiddleWare}} := {{template "g" .}}.Group("{{.Path}}", {{.MiddleWare}}Mw()...)
      {{- end}}
      {{- range $_, $router := .Children}}
      {{- if ne .Handler ""}}
      	{{template "G" $router}}
      {{- else}}
      	{	{{template "G" $router}}
      	}
      {{- end}}
      {{- end}}
      {{- end}}
      
      // Register register routes based on the IDL 'api.${HTTP Method}' annotation.
      func Register(r *server.Hertz) {
      {{template "G" .Router}}
      }
  # path 只表示 handler.go 的模板，具体的 handler 路径由默认路径和 handler_dir 决定
  - path: handler.go
    delims:
      - '{{'
      - '}}'
    body: |-
      {{$excludedNamespace := "standard"}}
      {{$OutDirs := GetUniqueHandlerOutDir .Methods}}
      package {{.PackageName}}
      import (
       "context"

       "github.com/cloudwego/hertz/pkg/app"
       "github.com/cloudwego/hertz/pkg/protocol/consts"
      {{- range $k, $v := .Imports}} 
        "{{$v.Package}}"
        {{- end}}
      {{- range $_, $OutDir := $OutDirs}}
        {{if eq $OutDir "" -}}
        {{- if ne $.PackageName $excludedNamespace }}
        "{{$.ProjPackage}}/api/{{$.PackageName}}/handler"
        {{- end}}
        {{- else -}}
        "{{$.ProjPackage}}/biz/{{$OutDir}}"
        {{- end -}}
      {{- end}}
      "{{$.ProjPackage}}/utils/responder"
      )
      {{range $_, $MethodInfo := .Methods}}
      {{$MethodInfo.Comment}}
      func {{$MethodInfo.Name}}(ctx context.Context, c *app.RequestContext) {
       var err error
       {{if ne $MethodInfo.RequestTypeName "" -}}
       var req {{$MethodInfo.RequestTypeName}}
       err = c.BindAndValidate(&req)
       if err != nil {
          responder.SendErrResponse(ctx, c, consts.StatusOK, err)
          return
       }
       {{end}}
        {{if eq $MethodInfo.OutputDir "" -}}
          resp,err := handler.New{{$MethodInfo.Name}}Service(ctx, c).Do(&req)
          if err != nil {
               responder.SendErrResponse(ctx, c, consts.StatusOK, err)
               return
          }
        {{else}}
          resp,err := {{$MethodInfo.OutputDir}}.New{{$MethodInfo.Name}}Service(ctx, c).Do(&req)
          if err != nil {
                  responder.SendErrResponse(ctx, c, consts.StatusOK, err)
                  return
          }
        {{end}}
       responder.SendSuccessResponse(ctx, c, consts.StatusOK, resp)
      }
      {{end}}
    update_behavior:
      import_tpl:
        - |-
          {{$OutDirs := GetUniqueHandlerOutDir .Methods}}
          {{- range $_, $OutDir := $OutDirs}}
            {{if eq $OutDir "" -}}
              "{{$.ProjPackage}}/biz"
            {{- else -}}
              "{{$.ProjPackage}}/biz/{{$OutDir}}"
            {{end}}
          {{- end}}

  - path: handler_single.go
    body: |+
      {{.Comment}}
      func {{.Name}}(ctx context.Context, c *app.RequestContext) {
       var err error
       {{if ne .RequestTypeName "" -}}
       var req {{.RequestTypeName}}
       err = c.BindAndValidate(&req)
       if err != nil {
          responder.SendErrResponse(ctx, c, consts.StatusOK, err)
          return
       }
       {{end}}
       {{if eq .OutputDir "" -}}
          resp,err := handler.New{{.Name}}Service(ctx, c).Do(&req)
        {{else}}
          resp,err := {{.OutputDir}}.New{{.Name}}Service(ctx, c).Do(&req)
        {{end}}
        if err != nil {
              responder.SendErrResponse(ctx, c, consts.StatusOK, err)
              return
        }
       responder.SendSuccessResponse(ctx, c, consts.StatusOK, resp)
      }

  - path: "api/{{ToSnakeCase .ServiceName}}/handler/{{ToSnakeCase .MethodName}}.go"
    delims:
      - '{{'
      - '}}'
    loop_method: true
    update_behavior:
      type: "skip"
    body: |-
      package {{ToSnakeCase .FilePackage}}
      import (
       "context"

       "github.com/cloudwego/hertz/pkg/app"
      {{- range $k, $v := .Models}}
       {{$k}} "{{$v.Package}}"
      {{- end}}
      )
      type {{.Name}}Service struct {
          RequestContext  *app.RequestContext
          Context         context.Context
      }

      func New{{.Name}}Service(Context context.Context, RequestContext *app.RequestContext) *{{.Name}}Service {
       return &{{.Name}}Service{RequestContext: RequestContext, Context: Context}
      }

      func (h *{{.Name}}Service) Do(req *{{.RequestTypeName}}) ( resp *{{.ReturnTypeName}}, err error) {
        //defer func() {
        // hlog.CtxInfof(h.Context, "req = %+v", req)
        // hlog.CtxInfof(h.Context, "resp = %+v", resp)
        //}()
        // todo edit your code
      
       return
      }

  - path: "api/{{ToSnakeCase .ServiceName}}/handler/{{ToSnakeCase .MethodName}}_test.go"
    delims:
      - '{{'
      - '}}'
    loop_method: true
    update_behavior:
      type: "skip"
    body: |-
      package {{ToSnakeCase .FilePackage}}
      import (
        "context"
        "testing"

        "github.com/cloudwego/hertz/pkg/app"
        "github.com/cloudwego/hertz/pkg/common/test/assert"
      {{- range $k, $v := .Models}}
       {{$k}} "{{$v.Package}}"
      {{- end}}
      )
      func Test{{.Name}}Service_Run(t *testing.T) {
        ctx := context.Background()
        c := app.NewContext(1)
        s := New{{.Name}}Service(ctx, c)
        // init req and assert value
        req := &{{.RequestTypeName}}{}
        resp, err := s.Do(req)
        assert.DeepEqual(t, nil, resp)
        assert.DeepEqual(t, nil, err)
        // todo edit your unit test.
      }

  - path: "{{.HandlerDir}}/{{.GenPackage}}/{{ToSnakeCase .ServiceName}}_test.go"
    loop_service: true
    update_behavior:
      type: "append"
      append_key: "method"
      insert_key: "Test{{$.Name}}"
      append_tpl: |-
        func Test{{.Name}}(t *testing.T) {
          h := server.Default()
          h.GET("{{.Path}}", {{.Name}})
          w := ut.PerformRequest(h.Engine, "{{.HTTPMethod}}", "{{.Path}}", &ut.Body{Body: bytes.NewBufferString(""), Len: 1},
          ut.Header{})
          resp := w.Result()
          assert.DeepEqual(t, 201, resp.StatusCode())
          assert.DeepEqual(t, "", string(resp.Body()))
          // todo edit your unit test.
        }
    body: |-
      package {{.FilePackage}}
      import (
        "bytes"
        "testing"

        "github.com/cloudwego/hertz/pkg/app/server"
        "github.com/cloudwego/hertz/pkg/common/test/assert"
        "github.com/cloudwego/hertz/pkg/common/ut"
      )
      {{range $_, $MethodInfo := $.Methods}}
        func Test{{$MethodInfo.Name}}(t *testing.T) {
        h := server.Default()
        h.GET("{{$MethodInfo.Path}}", {{$MethodInfo.Name}})
        w := ut.PerformRequest(h.Engine, "{{$MethodInfo.HTTPMethod}}", "{{$MethodInfo.Path}}", &ut.Body{Body: bytes.NewBufferString(""), Len: 1},
        ut.Header{})
        resp := w.Result()
        assert.DeepEqual(t, 201, resp.StatusCode())
        assert.DeepEqual(t, "", string(resp.Body()))
        // todo edit your unit test.
        }
      {{end}}