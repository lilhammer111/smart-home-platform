layouts:
  - path: main.go
    delims:
      - ""
      - ""
    body: |-
      // Code generated by hertz generator.

      package main

      import (
        "github.com/cloudwego/hertz/pkg/app"
      	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
      	"github.com/cloudwego/hertz/pkg/app/server"
      	"github.com/cloudwego/hertz/pkg/common/hlog"
        "github.com/hertz-contrib/cors"
      	"github.com/hertz-contrib/gzip"
        "github.com/hertz-contrib/logger/accesslog"
      	hertzlogrus "github.com/hertz-contrib/logger/logrus"
      	"github.com/hertz-contrib/pprof"
      	"{{.GoModule}}/router"
      	"{{.GoModule}}/conf"
      	"gopkg.in/natefinch/lumberjack.v2"
      )

      func main() {
        // init dal
        // dal.Init()
      	address := conf.GetConf().Hertz.Address
      	h := server.New(server.WithHostPorts(address))

        registerMiddleware(h)

      	router.GeneratedRegister(h)

      	h.Spin()
      }

      func registerMiddleware(h *server.Hertz) {
      	// log
      	logger := hertzlogrus.NewLogger()
      	hlog.SetLogger(logger)
      	hlog.SetLevel(conf.LogLevel())
      	hlog.SetOutput(&lumberjack.Logger{
      		Filename:   conf.GetConf().Hertz.LogFileName,
      		MaxSize:    conf.GetConf().Hertz.LogMaxSize,
      		MaxBackups: conf.GetConf().Hertz.LogMaxBackups,
      		MaxAge:     conf.GetConf().Hertz.LogMaxAge,
      	})

      	// pprof
      	if conf.GetConf().Hertz.EnablePprof {
      		pprof.Register(h)
      	}
      
      	// gzip
      	if conf.GetConf().Hertz.EnableGzip {
      		h.Use(gzip.Gzip(gzip.DefaultCompression))
      	}

        // access log
        if conf.GetConf().Hertz.EnableAccessLog {
          h.Use(accesslog.New())
        }

        // recovery
        h.Use(recovery.Recovery())

         // cores
        h.Use(cors.Default())
      }

  - path: go.mod
    delims:
      - '{{'
      - '}}'
    body: |-
      module {{.GoModule}}
      {{- if .UseApacheThrift}}
      replace github.com/apache/thrift => github.com/apache/thrift v0.13.0
      {{- end}}

  - path: router/register.go
    delims:
      - ""
      - ""
    body: |-
      // Code generated by hertz generator. DO NOT EDIT.

      package router

      import (
      	"github.com/cloudwego/hertz/pkg/app/server"
      )

      // GeneratedRegister registers routers generated by IDL.
      func GeneratedRegister(r *server.Hertz){
      	//INSERT_POINT: DO NOT DELETE THIS LINE!
      }

  - path: conf/conf.go
    delims:
      - ""
      - ""
    body: |-
      package conf

      import (
      	"io/ioutil"
      	"os"
      	"path/filepath"
      	"sync"

      	"github.com/cloudwego/hertz/pkg/common/hlog"
      	"github.com/kr/pretty"
      	"gopkg.in/validator.v2"
      	"gopkg.in/yaml.v2"
      )

      var (
      	conf *Config
      	once sync.Once
      )

      type Config struct {
      	Env string

      	Hertz Hertz `yaml:"hertz"`
        MySQL MySQL `yaml:"mysql"`
        Redis Redis `yaml:"redis"`
      }

      type MySQL struct {
      	DSN string `yaml:"dsn"`
      }


      type Redis struct {
      	Address  string `yaml:"address"`
      	Password string `yaml:"password"`
        Username string `yaml:"username"`
        DB       int    `yaml:"db"`
      }

      type Hertz struct {
      	Address       string `yaml:"address"`
      	EnablePprof   bool   `yaml:"enable_pprof"`
      	EnableGzip    bool   `yaml:"enable_gzip"`
        EnableAccessLog bool   `yaml:"enable_access_log"`
      	LogLevel      string `yaml:"log_level"`
      	LogFileName   string `yaml:"log_file_name"`
      	LogMaxSize    int    `yaml:"log_max_size"`
      	LogMaxBackups int    `yaml:"log_max_backups"`
      	LogMaxAge     int    `yaml:"log_max_age"`
      }

      // GetConf gets configuration instance
      func GetConf() *Config {
      	once.Do(initConf)
      	return conf
      }

      func initConf() {
      	prefix := "conf"
      	confFileRelPath := filepath.Join(prefix, filepath.Join(GetEnv(), "conf.yaml"))
      	content, err := ioutil.ReadFile(confFileRelPath)
      	if err != nil {
      		panic(err)
      	}

      	conf = new(Config)
      	err = yaml.Unmarshal(content, conf)
      	if err != nil {
      		hlog.Error("parse yaml error - %v", err)
      		panic(err)
      	}
      	if err := validator.Validate(conf); err != nil {
      		hlog.Error("validate config error - %v", err)
      		panic(err)
      	}

      	conf.Env = GetEnv()

      	pretty.Printf("%+v\n", conf)
      }

      func GetEnv() string {
      	e := os.Getenv("GO_ENV")
      	if len(e) == 0 {
      		return "test"
      	}
      	return e
      }

      func LogLevel() hlog.Level {
      	level := GetConf().Hertz.LogLevel
      	switch level {
      	case "trace":
      		return hlog.LevelTrace
      	case "debug":
      		return hlog.LevelDebug
      	case "info":
      		return hlog.LevelInfo
      	case "notice":
      		return hlog.LevelNotice
      	case "warn":
      		return hlog.LevelWarn
      	case "error":
      		return hlog.LevelError
      	case "fatal":
      		return hlog.LevelFatal
      	default:
      		return hlog.LevelInfo
      	}
      }


  - path: conf/dev/conf.yaml
    delims:
      - ""
      - ""
    body: |-
      hertz:
        address: ":8080"
        enable_pprof: true
        enable_gzip: true
        enable_access_log: true
        log_level: info
        log_file_name: "log/hertz.log"
        log_max_size: 10
        log_max_age: 3
        log_max_backups: 50

      mysql:
        dsn: "gorm:gorm@tcp(127.0.0.1:3306)/gorm?charset=utf8mb4&parseTime=True&loc=Local"

      redis:
        address: "127.0.0.1:6379"
        username: ""
        password: ""
        db: 0

  - path: conf/online/conf.yaml
    delims:
      - ""
      - ""
    body: |-
      hertz:
        address: ":8080"
        enable_pprof: false
        enable_gzip: true
        enable_access_log: true
        log_level: info
        log_file_name: "log/hertz.log"
        log_max_size: 10
        log_max_age: 3
        log_max_backups: 50

      mysql:
        dsn: "gorm:gorm@tcp(127.0.0.1:3306)/gorm?charset=utf8mb4&parseTime=True&loc=Local"

      redis:
        address: "127.0.0.1:6379"
        username: ""
        password: ""
        db: 0

  - path: conf/test/conf.yaml
    delims:
      - ""
      - ""
    body: |-
      hertz:
        address: ":8080"
        enable_pprof: true
        enable_gzip: true
        enable_access_log: true
        log_level: info
        log_file_name: "log/hertz.log"
        log_max_size: 10
        log_max_age: 3
        log_max_backups: 50

      mysql:
        dsn: "gorm:gorm@tcp(127.0.0.1:3306)/gorm?charset=utf8mb4&parseTime=True&loc=Local"

      redis:
        address: "127.0.0.1:6379"
        username: ""
        password: ""
        db: 0

  - path: deploy/docker-compose.yaml
    delims:
      - ""
      - ""
    body: |-
      version: '3'
      services:
        mysql:
          image: 'mysql:latest'
          ports:
            - 3306:3306
          environment:
            - MYSQL_DATABASE=gorm
            - MYSQL_USER=gorm
            - MYSQL_PASSWORD=gorm
            - MYSQL_RANDOM_ROOT_PASSWORD="yes"
        redis:
          image: 'redis:latest'
          ports:
            - 6379:6379

  - path: readme.md
    delims:
      - ""
      - ""
    body: |-
      # *** Project

      ## introduce

      - Use the [Hertz](https://github.com/cloudwego/hertz/) framework
      - Integration of pprof, cors, recovery, access_log, gzip and other extensions of Hertz.
      - Generating the base code for unit tests.
      - Provides basic profile functions.
      - Provides the most basic MVC code hierarchy.

      ## Directory structure

      |  catalog   | introduce  |
      |  ----  | ----  |
      | conf  | Configuration files |
      | main.go  | Startup file |
      | hertz_gen  | Hertz generated model |
      | api  | Used for request processing, validation and return of response. |
      | biz  | The actual business logic. |
      | router  | Routing and middleware registration |
      | utils  | Wrapped some common methods |

      ## How to run

      ```shell
      sh build.sh
      sh output/bootstrap.sh
      ```

  - path: .gitignore
    delims:
      - ""
      - ""
    body: |-
      *.o
      *.a
      *.so
      _obj
      _test
      *.[568vq]
      [568vq].out
      *.cgo1.go
      *.cgo2.c
      _cgo_defun.c
      _cgo_gotypes.go
      _cgo_export.*
      _testmain.go
      *.exe
      *.exe~
      *.test
      *.prof
      *.rar
      *.zip
      *.gz
      *.psd
      *.bmd
      *.cfg
      *.pptx
      *.log
      *nohup.out
      *settings.pyc
      *.sublime-project
      *.sublime-workspace
      !.gitkeep
      .DS_Store
      /.idea
      /.vscode
      /output
      *.local.yml


  - path: utils/resp.go
    delims:
      - "{{"
      - "}}"
    body: |-
      package utils

      import (
      	"context"

      	"github.com/cloudwego/hertz/pkg/app"
      )

      // SendErrResponse  pack error response
      func SendErrResponse(ctx context.Context, c *app.RequestContext, code int, err error) {
      	// todo edit custom code
      	c.String(code, err.Error())
      }

      // SendSuccessResponse  pack success response
      func SendSuccessResponse(ctx context.Context, c *app.RequestContext, code int, data interface{}) {
      	// todo edit custom code
      	c.JSON(code, data)
      }

  - path: deploy/build.sh
    delims:
      - "{{"
      - "}}"
    body: |-
      #!/bin/bash
      RUN_NAME=http-services
      mkdir -p output/bin output/conf
      cp script/bootstrap.sh output 2>/dev/null
      chmod +x output/bootstrap.sh
      cp -r ../conf/* output/conf
      go build -o output/bin/${RUN_NAME}

  - path: deploy/script/bootstrap.sh
    delims:
      - "{{"
      - "}}"
    body: |-
      #!/bin/bash
      CURDIR=$(cd $(dirname $0); pwd)
      BinaryName={{.ServiceName}}
      echo "$CURDIR/bin/${BinaryName}"
      exec $CURDIR/bin/${BinaryName}