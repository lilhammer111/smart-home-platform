// Code generated by Kitex v0.6.1. DO NOT EDIT.

package users

import (
	"context"
	users "git.zqbjj.top/pet/services/pet-feeder/cmd/rpc/users_srv/dto/kitex_gen/users"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	FindUser(ctx context.Context, req int32, callOptions ...callopt.Option) (r *users.UserData, err error)
	VerifyCredentials(ctx context.Context, req *users.CredentialsReq, callOptions ...callopt.Option) (r bool, err error)
	CreateOrUpdateUser(ctx context.Context, req *users.UserData, callOptions ...callopt.Option) (r *users.UserData, err error)
	DeleteUser(ctx context.Context, req int32, callOptions ...callopt.Option) (r *users.UserData, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUsersClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUsersClient struct {
	*kClient
}

func (p *kUsersClient) FindUser(ctx context.Context, req int32, callOptions ...callopt.Option) (r *users.UserData, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FindUser(ctx, req)
}

func (p *kUsersClient) VerifyCredentials(ctx context.Context, req *users.CredentialsReq, callOptions ...callopt.Option) (r bool, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VerifyCredentials(ctx, req)
}

func (p *kUsersClient) CreateOrUpdateUser(ctx context.Context, req *users.UserData, callOptions ...callopt.Option) (r *users.UserData, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateOrUpdateUser(ctx, req)
}

func (p *kUsersClient) DeleteUser(ctx context.Context, req int32, callOptions ...callopt.Option) (r *users.UserData, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteUser(ctx, req)
}
