// Code generated by Kitex v0.6.1. DO NOT EDIT.

package users

import (
	"context"
	users "git.zqbjj.top/pet/services/pet-feeder/cmd/rpc/users_srv/dto/kitex_gen/users"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return usersServiceInfo
}

var usersServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Users"
	handlerType := (*users.Users)(nil)
	methods := map[string]kitex.MethodInfo{
		"FindUser":           kitex.NewMethodInfo(findUserHandler, newUsersFindUserArgs, newUsersFindUserResult, false),
		"VerifyCredentials":  kitex.NewMethodInfo(verifyCredentialsHandler, newUsersVerifyCredentialsArgs, newUsersVerifyCredentialsResult, false),
		"CreateOrUpdateUser": kitex.NewMethodInfo(createOrUpdateUserHandler, newUsersCreateOrUpdateUserArgs, newUsersCreateOrUpdateUserResult, false),
		"DeleteUser":         kitex.NewMethodInfo(deleteUserHandler, newUsersDeleteUserArgs, newUsersDeleteUserResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "users",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func findUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*users.UsersFindUserArgs)
	realResult := result.(*users.UsersFindUserResult)
	success, err := handler.(users.Users).FindUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUsersFindUserArgs() interface{} {
	return users.NewUsersFindUserArgs()
}

func newUsersFindUserResult() interface{} {
	return users.NewUsersFindUserResult()
}

func verifyCredentialsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*users.UsersVerifyCredentialsArgs)
	realResult := result.(*users.UsersVerifyCredentialsResult)
	success, err := handler.(users.Users).VerifyCredentials(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newUsersVerifyCredentialsArgs() interface{} {
	return users.NewUsersVerifyCredentialsArgs()
}

func newUsersVerifyCredentialsResult() interface{} {
	return users.NewUsersVerifyCredentialsResult()
}

func createOrUpdateUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*users.UsersCreateOrUpdateUserArgs)
	realResult := result.(*users.UsersCreateOrUpdateUserResult)
	success, err := handler.(users.Users).CreateOrUpdateUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUsersCreateOrUpdateUserArgs() interface{} {
	return users.NewUsersCreateOrUpdateUserArgs()
}

func newUsersCreateOrUpdateUserResult() interface{} {
	return users.NewUsersCreateOrUpdateUserResult()
}

func deleteUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*users.UsersDeleteUserArgs)
	realResult := result.(*users.UsersDeleteUserResult)
	success, err := handler.(users.Users).DeleteUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUsersDeleteUserArgs() interface{} {
	return users.NewUsersDeleteUserArgs()
}

func newUsersDeleteUserResult() interface{} {
	return users.NewUsersDeleteUserResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FindUser(ctx context.Context, req int32) (r *users.UserData, err error) {
	var _args users.UsersFindUserArgs
	_args.Req = req
	var _result users.UsersFindUserResult
	if err = p.c.Call(ctx, "FindUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VerifyCredentials(ctx context.Context, req *users.CredentialsReq) (r bool, err error) {
	var _args users.UsersVerifyCredentialsArgs
	_args.Req = req
	var _result users.UsersVerifyCredentialsResult
	if err = p.c.Call(ctx, "VerifyCredentials", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateOrUpdateUser(ctx context.Context, req *users.UserData) (r *users.UserData, err error) {
	var _args users.UsersCreateOrUpdateUserArgs
	_args.Req = req
	var _result users.UsersCreateOrUpdateUserResult
	if err = p.c.Call(ctx, "CreateOrUpdateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteUser(ctx context.Context, req int32) (r *users.UserData, err error) {
	var _args users.UsersDeleteUserArgs
	_args.Req = req
	var _result users.UsersDeleteUserResult
	if err = p.c.Call(ctx, "DeleteUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
