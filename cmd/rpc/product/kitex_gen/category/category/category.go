// Code generated by Kitex v0.8.0. DO NOT EDIT.

package category

import (
	"context"
	category "git.zqbjj.top/pet/services/cmd/rpc/product/kitex_gen/category"
	common "git.zqbjj.top/pet/services/cmd/rpc/product/kitex_gen/common"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return categoryServiceInfo
}

var categoryServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Category"
	handlerType := (*category.Category)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetCategoryList":   kitex.NewMethodInfo(getCategoryListHandler, newCategoryGetCategoryListArgs, newCategoryGetCategoryListResult, false),
		"GetCategoryDetail": kitex.NewMethodInfo(getCategoryDetailHandler, newCategoryGetCategoryDetailArgs, newCategoryGetCategoryDetailResult, false),
		"AddNewCategory":    kitex.NewMethodInfo(addNewCategoryHandler, newCategoryAddNewCategoryArgs, newCategoryAddNewCategoryResult, false),
		"UpdateCategory":    kitex.NewMethodInfo(updateCategoryHandler, newCategoryUpdateCategoryArgs, newCategoryUpdateCategoryResult, false),
		"DeleteCategory":    kitex.NewMethodInfo(deleteCategoryHandler, newCategoryDeleteCategoryArgs, newCategoryDeleteCategoryResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "category",
		"ServiceFilePath": `../../../static/idl/http/category.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func getCategoryListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*category.CategoryGetCategoryListArgs)
	realResult := result.(*category.CategoryGetCategoryListResult)
	success, err := handler.(category.Category).GetCategoryList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryGetCategoryListArgs() interface{} {
	return category.NewCategoryGetCategoryListArgs()
}

func newCategoryGetCategoryListResult() interface{} {
	return category.NewCategoryGetCategoryListResult()
}

func getCategoryDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*category.CategoryGetCategoryDetailArgs)
	realResult := result.(*category.CategoryGetCategoryDetailResult)
	success, err := handler.(category.Category).GetCategoryDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryGetCategoryDetailArgs() interface{} {
	return category.NewCategoryGetCategoryDetailArgs()
}

func newCategoryGetCategoryDetailResult() interface{} {
	return category.NewCategoryGetCategoryDetailResult()
}

func addNewCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*category.CategoryAddNewCategoryArgs)
	realResult := result.(*category.CategoryAddNewCategoryResult)
	success, err := handler.(category.Category).AddNewCategory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryAddNewCategoryArgs() interface{} {
	return category.NewCategoryAddNewCategoryArgs()
}

func newCategoryAddNewCategoryResult() interface{} {
	return category.NewCategoryAddNewCategoryResult()
}

func updateCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*category.CategoryUpdateCategoryArgs)
	realResult := result.(*category.CategoryUpdateCategoryResult)
	success, err := handler.(category.Category).UpdateCategory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryUpdateCategoryArgs() interface{} {
	return category.NewCategoryUpdateCategoryArgs()
}

func newCategoryUpdateCategoryResult() interface{} {
	return category.NewCategoryUpdateCategoryResult()
}

func deleteCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*category.CategoryDeleteCategoryArgs)
	realResult := result.(*category.CategoryDeleteCategoryResult)
	success, err := handler.(category.Category).DeleteCategory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryDeleteCategoryArgs() interface{} {
	return category.NewCategoryDeleteCategoryArgs()
}

func newCategoryDeleteCategoryResult() interface{} {
	return category.NewCategoryDeleteCategoryResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetCategoryList(ctx context.Context, req *common.PageFilter) (r []*category.CategoryInfo, err error) {
	var _args category.CategoryGetCategoryListArgs
	_args.Req = req
	var _result category.CategoryGetCategoryListResult
	if err = p.c.Call(ctx, "GetCategoryList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCategoryDetail(ctx context.Context, req *common.Req) (r *category.CategoryInfo, err error) {
	var _args category.CategoryGetCategoryDetailArgs
	_args.Req = req
	var _result category.CategoryGetCategoryDetailResult
	if err = p.c.Call(ctx, "GetCategoryDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddNewCategory(ctx context.Context, req *category.NewCategory_) (r *category.CategoryInfo, err error) {
	var _args category.CategoryAddNewCategoryArgs
	_args.Req = req
	var _result category.CategoryAddNewCategoryResult
	if err = p.c.Call(ctx, "AddNewCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCategory(ctx context.Context, req *category.CategoryInfo) (r *category.CategoryInfo, err error) {
	var _args category.CategoryUpdateCategoryArgs
	_args.Req = req
	var _result category.CategoryUpdateCategoryResult
	if err = p.c.Call(ctx, "UpdateCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCategory(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args category.CategoryDeleteCategoryArgs
	_args.Req = req
	var _result category.CategoryDeleteCategoryResult
	if err = p.c.Call(ctx, "DeleteCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
