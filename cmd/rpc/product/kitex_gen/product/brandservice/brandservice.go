// Code generated by Kitex v0.6.1. DO NOT EDIT.

package brandservice

import (
	"context"
	common "git.zqbjj.top/pet/services/cmd/rpc/product/kitex_gen/common"
	product "git.zqbjj.top/pet/services/cmd/rpc/product/kitex_gen/product"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return brandServiceServiceInfo
}

var brandServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "BrandService"
	handlerType := (*product.BrandService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetBrandList":       kitex.NewMethodInfo(getBrandListHandler, newBrandServiceGetBrandListArgs, newBrandServiceGetBrandListResult, false),
		"GetBrandByCategory": kitex.NewMethodInfo(getBrandByCategoryHandler, newBrandServiceGetBrandByCategoryArgs, newBrandServiceGetBrandByCategoryResult, false),
		"AddNewBrand":        kitex.NewMethodInfo(addNewBrandHandler, newBrandServiceAddNewBrandArgs, newBrandServiceAddNewBrandResult, false),
		"UpdateBrand":        kitex.NewMethodInfo(updateBrandHandler, newBrandServiceUpdateBrandArgs, newBrandServiceUpdateBrandResult, false),
		"DelteBrand":         kitex.NewMethodInfo(delteBrandHandler, newBrandServiceDelteBrandArgs, newBrandServiceDelteBrandResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "product",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func getBrandListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.BrandServiceGetBrandListArgs)
	realResult := result.(*product.BrandServiceGetBrandListResult)
	success, err := handler.(product.BrandService).GetBrandList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBrandServiceGetBrandListArgs() interface{} {
	return product.NewBrandServiceGetBrandListArgs()
}

func newBrandServiceGetBrandListResult() interface{} {
	return product.NewBrandServiceGetBrandListResult()
}

func getBrandByCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.BrandServiceGetBrandByCategoryArgs)
	realResult := result.(*product.BrandServiceGetBrandByCategoryResult)
	success, err := handler.(product.BrandService).GetBrandByCategory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBrandServiceGetBrandByCategoryArgs() interface{} {
	return product.NewBrandServiceGetBrandByCategoryArgs()
}

func newBrandServiceGetBrandByCategoryResult() interface{} {
	return product.NewBrandServiceGetBrandByCategoryResult()
}

func addNewBrandHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.BrandServiceAddNewBrandArgs)
	realResult := result.(*product.BrandServiceAddNewBrandResult)
	success, err := handler.(product.BrandService).AddNewBrand(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBrandServiceAddNewBrandArgs() interface{} {
	return product.NewBrandServiceAddNewBrandArgs()
}

func newBrandServiceAddNewBrandResult() interface{} {
	return product.NewBrandServiceAddNewBrandResult()
}

func updateBrandHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.BrandServiceUpdateBrandArgs)
	realResult := result.(*product.BrandServiceUpdateBrandResult)
	success, err := handler.(product.BrandService).UpdateBrand(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBrandServiceUpdateBrandArgs() interface{} {
	return product.NewBrandServiceUpdateBrandArgs()
}

func newBrandServiceUpdateBrandResult() interface{} {
	return product.NewBrandServiceUpdateBrandResult()
}

func delteBrandHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.BrandServiceDelteBrandArgs)
	realResult := result.(*product.BrandServiceDelteBrandResult)
	success, err := handler.(product.BrandService).DelteBrand(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBrandServiceDelteBrandArgs() interface{} {
	return product.NewBrandServiceDelteBrandArgs()
}

func newBrandServiceDelteBrandResult() interface{} {
	return product.NewBrandServiceDelteBrandResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetBrandList(ctx context.Context, req *product.PageFilter) (r []*product.BrandInfo, err error) {
	var _args product.BrandServiceGetBrandListArgs
	_args.Req = req
	var _result product.BrandServiceGetBrandListResult
	if err = p.c.Call(ctx, "GetBrandList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBrandByCategory(ctx context.Context, req *product.GetBrandByCatReq) (r []*product.BrandInfo, err error) {
	var _args product.BrandServiceGetBrandByCategoryArgs
	_args.Req = req
	var _result product.BrandServiceGetBrandByCategoryResult
	if err = p.c.Call(ctx, "GetBrandByCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddNewBrand(ctx context.Context, req *product.NewBrand_) (r *product.BrandInfo, err error) {
	var _args product.BrandServiceAddNewBrandArgs
	_args.Req = req
	var _result product.BrandServiceAddNewBrandResult
	if err = p.c.Call(ctx, "AddNewBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateBrand(ctx context.Context, req *product.BrandInfo) (r *product.BrandInfo, err error) {
	var _args product.BrandServiceUpdateBrandArgs
	_args.Req = req
	var _result product.BrandServiceUpdateBrandResult
	if err = p.c.Call(ctx, "UpdateBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DelteBrand(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args product.BrandServiceDelteBrandArgs
	_args.Req = req
	var _result product.BrandServiceDelteBrandResult
	if err = p.c.Call(ctx, "DelteBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
