// Code generated by Kitex v0.8.0. DO NOT EDIT.

package combineservice

import (
	"context"
	common "git.zqbjj.top/pet/services/cmd/rpc/product/kitex_gen/common"
	product "git.zqbjj.top/pet/services/cmd/rpc/product/kitex_gen/product"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetProductList(ctx context.Context, req *product.ProductFilter, callOptions ...callopt.Option) (r []*product.ProductBasicInfo, err error)
	GetProductDetail(ctx context.Context, req *common.Req, callOptions ...callopt.Option) (r *product.ProductDetailResp, err error)
	AddNewProduct(ctx context.Context, req *product.AddProductReq, callOptions ...callopt.Option) (r *product.ProductInfo, err error)
	UpdateProduct(ctx context.Context, req *product.ProductInfo, callOptions ...callopt.Option) (r *product.ProductInfo, err error)
	RateProduct(ctx context.Context, req *product.RatingReq, callOptions ...callopt.Option) (r *product.RatingResp, err error)
	DeleteProduct(ctx context.Context, req *common.Req, callOptions ...callopt.Option) (r *common.Empty, err error)
	GetCategoryList(ctx context.Context, req *common.PageFilter, callOptions ...callopt.Option) (r []*product.CategoryInfo, err error)
	GetCategoryDetail(ctx context.Context, req *common.Req, callOptions ...callopt.Option) (r *product.CategoryInfo, err error)
	AddNewCategory(ctx context.Context, req *product.NewCategory_, callOptions ...callopt.Option) (r *product.CategoryInfo, err error)
	UpdateCategory(ctx context.Context, req *product.CategoryInfo, callOptions ...callopt.Option) (r *product.CategoryInfo, err error)
	DeleteCategory(ctx context.Context, req *common.Req, callOptions ...callopt.Option) (r *common.Empty, err error)
	GetBrandList(ctx context.Context, req *common.PageFilter, callOptions ...callopt.Option) (r []*product.BrandListResp, err error)
	GetRelatedBrandsByCategoryId(ctx context.Context, req *product.BrandByCatReq, callOptions ...callopt.Option) (r []*product.BrandInfo, err error)
	GetBrandDetail(ctx context.Context, req *common.Req, callOptions ...callopt.Option) (r *product.BrandInfo, err error)
	AddNewBrand(ctx context.Context, req *product.NewBrand_, callOptions ...callopt.Option) (r *product.BrandInfo, err error)
	UpdateBrand(ctx context.Context, req *product.BrandInfo, callOptions ...callopt.Option) (r *product.BrandInfo, err error)
	DeleteBrand(ctx context.Context, req *common.Req, callOptions ...callopt.Option) (r *common.Empty, err error)
	GetAllBanners(ctx context.Context, callOptions ...callopt.Option) (r []*product.BannerInfo, err error)
	AddNewBanner(ctx context.Context, req *product.NewBanner_, callOptions ...callopt.Option) (r *product.BannerInfo, err error)
	UpdateBanner(ctx context.Context, req *product.BannerInfo, callOptions ...callopt.Option) (r *product.BannerInfo, err error)
	DeleteBanner(ctx context.Context, req *common.Req, callOptions ...callopt.Option) (r *common.Empty, err error)
	BatchAddCategoryBrand(ctx context.Context, req *product.NewCategoryBrand_, callOptions ...callopt.Option) (r []*product.CategoryBrandInfo, err error)
	BatchReduceCategoryBrand(ctx context.Context, req *product.NewCategoryBrand_, callOptions ...callopt.Option) (r *common.Empty, err error)
	DeleteBrandByCategory(ctx context.Context, req *common.Req, callOptions ...callopt.Option) (r *common.Empty, err error)
	DeleteCategoryByBrand(ctx context.Context, req *common.Req, callOptions ...callopt.Option) (r *common.Empty, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kCombineServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kCombineServiceClient struct {
	*kClient
}

func (p *kCombineServiceClient) GetProductList(ctx context.Context, req *product.ProductFilter, callOptions ...callopt.Option) (r []*product.ProductBasicInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetProductList(ctx, req)
}

func (p *kCombineServiceClient) GetProductDetail(ctx context.Context, req *common.Req, callOptions ...callopt.Option) (r *product.ProductDetailResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetProductDetail(ctx, req)
}

func (p *kCombineServiceClient) AddNewProduct(ctx context.Context, req *product.AddProductReq, callOptions ...callopt.Option) (r *product.ProductInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddNewProduct(ctx, req)
}

func (p *kCombineServiceClient) UpdateProduct(ctx context.Context, req *product.ProductInfo, callOptions ...callopt.Option) (r *product.ProductInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateProduct(ctx, req)
}

func (p *kCombineServiceClient) RateProduct(ctx context.Context, req *product.RatingReq, callOptions ...callopt.Option) (r *product.RatingResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RateProduct(ctx, req)
}

func (p *kCombineServiceClient) DeleteProduct(ctx context.Context, req *common.Req, callOptions ...callopt.Option) (r *common.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteProduct(ctx, req)
}

func (p *kCombineServiceClient) GetCategoryList(ctx context.Context, req *common.PageFilter, callOptions ...callopt.Option) (r []*product.CategoryInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCategoryList(ctx, req)
}

func (p *kCombineServiceClient) GetCategoryDetail(ctx context.Context, req *common.Req, callOptions ...callopt.Option) (r *product.CategoryInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCategoryDetail(ctx, req)
}

func (p *kCombineServiceClient) AddNewCategory(ctx context.Context, req *product.NewCategory_, callOptions ...callopt.Option) (r *product.CategoryInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddNewCategory(ctx, req)
}

func (p *kCombineServiceClient) UpdateCategory(ctx context.Context, req *product.CategoryInfo, callOptions ...callopt.Option) (r *product.CategoryInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateCategory(ctx, req)
}

func (p *kCombineServiceClient) DeleteCategory(ctx context.Context, req *common.Req, callOptions ...callopt.Option) (r *common.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteCategory(ctx, req)
}

func (p *kCombineServiceClient) GetBrandList(ctx context.Context, req *common.PageFilter, callOptions ...callopt.Option) (r []*product.BrandListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetBrandList(ctx, req)
}

func (p *kCombineServiceClient) GetRelatedBrandsByCategoryId(ctx context.Context, req *product.BrandByCatReq, callOptions ...callopt.Option) (r []*product.BrandInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetRelatedBrandsByCategoryId(ctx, req)
}

func (p *kCombineServiceClient) GetBrandDetail(ctx context.Context, req *common.Req, callOptions ...callopt.Option) (r *product.BrandInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetBrandDetail(ctx, req)
}

func (p *kCombineServiceClient) AddNewBrand(ctx context.Context, req *product.NewBrand_, callOptions ...callopt.Option) (r *product.BrandInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddNewBrand(ctx, req)
}

func (p *kCombineServiceClient) UpdateBrand(ctx context.Context, req *product.BrandInfo, callOptions ...callopt.Option) (r *product.BrandInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateBrand(ctx, req)
}

func (p *kCombineServiceClient) DeleteBrand(ctx context.Context, req *common.Req, callOptions ...callopt.Option) (r *common.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteBrand(ctx, req)
}

func (p *kCombineServiceClient) GetAllBanners(ctx context.Context, callOptions ...callopt.Option) (r []*product.BannerInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetAllBanners(ctx)
}

func (p *kCombineServiceClient) AddNewBanner(ctx context.Context, req *product.NewBanner_, callOptions ...callopt.Option) (r *product.BannerInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddNewBanner(ctx, req)
}

func (p *kCombineServiceClient) UpdateBanner(ctx context.Context, req *product.BannerInfo, callOptions ...callopt.Option) (r *product.BannerInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateBanner(ctx, req)
}

func (p *kCombineServiceClient) DeleteBanner(ctx context.Context, req *common.Req, callOptions ...callopt.Option) (r *common.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteBanner(ctx, req)
}

func (p *kCombineServiceClient) BatchAddCategoryBrand(ctx context.Context, req *product.NewCategoryBrand_, callOptions ...callopt.Option) (r []*product.CategoryBrandInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BatchAddCategoryBrand(ctx, req)
}

func (p *kCombineServiceClient) BatchReduceCategoryBrand(ctx context.Context, req *product.NewCategoryBrand_, callOptions ...callopt.Option) (r *common.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BatchReduceCategoryBrand(ctx, req)
}

func (p *kCombineServiceClient) DeleteBrandByCategory(ctx context.Context, req *common.Req, callOptions ...callopt.Option) (r *common.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteBrandByCategory(ctx, req)
}

func (p *kCombineServiceClient) DeleteCategoryByBrand(ctx context.Context, req *common.Req, callOptions ...callopt.Option) (r *common.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteCategoryByBrand(ctx, req)
}
