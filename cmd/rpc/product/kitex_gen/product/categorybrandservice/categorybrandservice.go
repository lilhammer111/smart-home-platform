// Code generated by Kitex v0.8.0. DO NOT EDIT.

package categorybrandservice

import (
	"context"
	common "git.zqbjj.top/pet/services/cmd/rpc/product/kitex_gen/common"
	product "git.zqbjj.top/pet/services/cmd/rpc/product/kitex_gen/product"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return categoryBrandServiceServiceInfo
}

var categoryBrandServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CategoryBrandService"
	handlerType := (*product.CategoryBrandService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetCategoryBrandList":  kitex.NewMethodInfo(getCategoryBrandListHandler, newCategoryBrandServiceGetCategoryBrandListArgs, newCategoryBrandServiceGetCategoryBrandListResult, false),
		"BatchAddCategoryBrand": kitex.NewMethodInfo(batchAddCategoryBrandHandler, newCategoryBrandServiceBatchAddCategoryBrandArgs, newCategoryBrandServiceBatchAddCategoryBrandResult, false),
		"UpdateCategoryBrand":   kitex.NewMethodInfo(updateCategoryBrandHandler, newCategoryBrandServiceUpdateCategoryBrandArgs, newCategoryBrandServiceUpdateCategoryBrandResult, false),
		"DeleteCategoryByBrand": kitex.NewMethodInfo(deleteCategoryByBrandHandler, newCategoryBrandServiceDeleteCategoryByBrandArgs, newCategoryBrandServiceDeleteCategoryByBrandResult, false),
		"DeleteBrandByCategory": kitex.NewMethodInfo(deleteBrandByCategoryHandler, newCategoryBrandServiceDeleteBrandByCategoryArgs, newCategoryBrandServiceDeleteBrandByCategoryResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "product",
		"ServiceFilePath": `../../../static/idl/rpc/product.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func getCategoryBrandListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.CategoryBrandServiceGetCategoryBrandListArgs)
	realResult := result.(*product.CategoryBrandServiceGetCategoryBrandListResult)
	success, err := handler.(product.CategoryBrandService).GetCategoryBrandList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryBrandServiceGetCategoryBrandListArgs() interface{} {
	return product.NewCategoryBrandServiceGetCategoryBrandListArgs()
}

func newCategoryBrandServiceGetCategoryBrandListResult() interface{} {
	return product.NewCategoryBrandServiceGetCategoryBrandListResult()
}

func batchAddCategoryBrandHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.CategoryBrandServiceBatchAddCategoryBrandArgs)
	realResult := result.(*product.CategoryBrandServiceBatchAddCategoryBrandResult)
	success, err := handler.(product.CategoryBrandService).BatchAddCategoryBrand(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryBrandServiceBatchAddCategoryBrandArgs() interface{} {
	return product.NewCategoryBrandServiceBatchAddCategoryBrandArgs()
}

func newCategoryBrandServiceBatchAddCategoryBrandResult() interface{} {
	return product.NewCategoryBrandServiceBatchAddCategoryBrandResult()
}

func updateCategoryBrandHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.CategoryBrandServiceUpdateCategoryBrandArgs)
	realResult := result.(*product.CategoryBrandServiceUpdateCategoryBrandResult)
	success, err := handler.(product.CategoryBrandService).UpdateCategoryBrand(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryBrandServiceUpdateCategoryBrandArgs() interface{} {
	return product.NewCategoryBrandServiceUpdateCategoryBrandArgs()
}

func newCategoryBrandServiceUpdateCategoryBrandResult() interface{} {
	return product.NewCategoryBrandServiceUpdateCategoryBrandResult()
}

func deleteCategoryByBrandHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.CategoryBrandServiceDeleteCategoryByBrandArgs)
	realResult := result.(*product.CategoryBrandServiceDeleteCategoryByBrandResult)
	success, err := handler.(product.CategoryBrandService).DeleteCategoryByBrand(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryBrandServiceDeleteCategoryByBrandArgs() interface{} {
	return product.NewCategoryBrandServiceDeleteCategoryByBrandArgs()
}

func newCategoryBrandServiceDeleteCategoryByBrandResult() interface{} {
	return product.NewCategoryBrandServiceDeleteCategoryByBrandResult()
}

func deleteBrandByCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.CategoryBrandServiceDeleteBrandByCategoryArgs)
	realResult := result.(*product.CategoryBrandServiceDeleteBrandByCategoryResult)
	success, err := handler.(product.CategoryBrandService).DeleteBrandByCategory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryBrandServiceDeleteBrandByCategoryArgs() interface{} {
	return product.NewCategoryBrandServiceDeleteBrandByCategoryArgs()
}

func newCategoryBrandServiceDeleteBrandByCategoryResult() interface{} {
	return product.NewCategoryBrandServiceDeleteBrandByCategoryResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetCategoryBrandList(ctx context.Context, req *common.Req) (r []*product.CategoryBrandInfo, err error) {
	var _args product.CategoryBrandServiceGetCategoryBrandListArgs
	_args.Req = req
	var _result product.CategoryBrandServiceGetCategoryBrandListResult
	if err = p.c.Call(ctx, "GetCategoryBrandList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchAddCategoryBrand(ctx context.Context, req *product.NewCategoryBrand_) (r []*product.CategoryBrandInfo, err error) {
	var _args product.CategoryBrandServiceBatchAddCategoryBrandArgs
	_args.Req = req
	var _result product.CategoryBrandServiceBatchAddCategoryBrandResult
	if err = p.c.Call(ctx, "BatchAddCategoryBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCategoryBrand(ctx context.Context, req *product.CategoryBrandInfo) (r *product.CategoryBrandInfo, err error) {
	var _args product.CategoryBrandServiceUpdateCategoryBrandArgs
	_args.Req = req
	var _result product.CategoryBrandServiceUpdateCategoryBrandResult
	if err = p.c.Call(ctx, "UpdateCategoryBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCategoryByBrand(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args product.CategoryBrandServiceDeleteCategoryByBrandArgs
	_args.Req = req
	var _result product.CategoryBrandServiceDeleteCategoryByBrandResult
	if err = p.c.Call(ctx, "DeleteCategoryByBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteBrandByCategory(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args product.CategoryBrandServiceDeleteBrandByCategoryArgs
	_args.Req = req
	var _result product.CategoryBrandServiceDeleteBrandByCategoryResult
	if err = p.c.Call(ctx, "DeleteBrandByCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
