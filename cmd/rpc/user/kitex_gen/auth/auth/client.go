// Code generated by Kitex v0.6.1. DO NOT EDIT.

package auth

import (
	"context"
	auth "git.zqbjj.top/pet/services/cmd/rpc/user/kitex_gen/auth"
	common "git.zqbjj.top/pet/services/cmd/rpc/user/kitex_gen/common"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	SendSms(ctx context.Context, req *auth.SendSmsReq, callOptions ...callopt.Option) (r *common.Empty, err error)
	MobileRegister(ctx context.Context, req *auth.MobileRegisterReq, callOptions ...callopt.Option) (r *auth.AuthInfo, err error)
	UsernameRegister(ctx context.Context, req *auth.UsernameRegisterReq, callOptions ...callopt.Option) (r *auth.AuthInfo, err error)
	MobileLogin(ctx context.Context, req *auth.MobileLoginReq, callOptions ...callopt.Option) (r *auth.AuthInfo, err error)
	MiniProgLogin(ctx context.Context, req *auth.MiniProgLoginReq, callOptions ...callopt.Option) (r *auth.AuthInfo, err error)
	PwdLogin(ctx context.Context, req *auth.PwdLoginReq, callOptions ...callopt.Option) (r *auth.AuthInfo, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kAuthClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kAuthClient struct {
	*kClient
}

func (p *kAuthClient) SendSms(ctx context.Context, req *auth.SendSmsReq, callOptions ...callopt.Option) (r *common.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SendSms(ctx, req)
}

func (p *kAuthClient) MobileRegister(ctx context.Context, req *auth.MobileRegisterReq, callOptions ...callopt.Option) (r *auth.AuthInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MobileRegister(ctx, req)
}

func (p *kAuthClient) UsernameRegister(ctx context.Context, req *auth.UsernameRegisterReq, callOptions ...callopt.Option) (r *auth.AuthInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UsernameRegister(ctx, req)
}

func (p *kAuthClient) MobileLogin(ctx context.Context, req *auth.MobileLoginReq, callOptions ...callopt.Option) (r *auth.AuthInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MobileLogin(ctx, req)
}

func (p *kAuthClient) MiniProgLogin(ctx context.Context, req *auth.MiniProgLoginReq, callOptions ...callopt.Option) (r *auth.AuthInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MiniProgLogin(ctx, req)
}

func (p *kAuthClient) PwdLogin(ctx context.Context, req *auth.PwdLoginReq, callOptions ...callopt.Option) (r *auth.AuthInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PwdLogin(ctx, req)
}
