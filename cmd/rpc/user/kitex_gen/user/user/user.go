// Code generated by Kitex v0.6.1. DO NOT EDIT.

package user

import (
	"context"
	user "git.zqbjj.top/pet/services/cmd/rpc/user_srv/kitex_gen/user"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceInfo
}

var userServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "user"
	handlerType := (*user.User)(nil)
	methods := map[string]kitex.MethodInfo{
		"FindUserByID":       kitex.NewMethodInfo(findUserByIDHandler, newUserFindUserByIDArgs, newUserFindUserByIDResult, false),
		"GetUsersByFilter":   kitex.NewMethodInfo(getUsersByFilterHandler, newUserGetUsersByFilterArgs, newUserGetUsersByFilterResult, false),
		"VerifyCredentials":  kitex.NewMethodInfo(verifyCredentialsHandler, newUserVerifyCredentialsArgs, newUserVerifyCredentialsResult, false),
		"CreateOrUpdateUser": kitex.NewMethodInfo(createOrUpdateUserHandler, newUserCreateOrUpdateUserArgs, newUserCreateOrUpdateUserResult, false),
		"DeleteUser":         kitex.NewMethodInfo(deleteUserHandler, newUserDeleteUserArgs, newUserDeleteUserResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func findUserByIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserFindUserByIDArgs)
	realResult := result.(*user.UserFindUserByIDResult)
	success, err := handler.(user.User).FindUserByID(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserFindUserByIDArgs() interface{} {
	return user.NewUserFindUserByIDArgs()
}

func newUserFindUserByIDResult() interface{} {
	return user.NewUserFindUserByIDResult()
}

func getUsersByFilterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserGetUsersByFilterArgs)
	realResult := result.(*user.UserGetUsersByFilterResult)
	success, err := handler.(user.User).GetUsersByFilter(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserGetUsersByFilterArgs() interface{} {
	return user.NewUserGetUsersByFilterArgs()
}

func newUserGetUsersByFilterResult() interface{} {
	return user.NewUserGetUsersByFilterResult()
}

func verifyCredentialsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserVerifyCredentialsArgs)
	realResult := result.(*user.UserVerifyCredentialsResult)
	success, err := handler.(user.User).VerifyCredentials(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newUserVerifyCredentialsArgs() interface{} {
	return user.NewUserVerifyCredentialsArgs()
}

func newUserVerifyCredentialsResult() interface{} {
	return user.NewUserVerifyCredentialsResult()
}

func createOrUpdateUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserCreateOrUpdateUserArgs)
	realResult := result.(*user.UserCreateOrUpdateUserResult)
	success, err := handler.(user.User).CreateOrUpdateUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserCreateOrUpdateUserArgs() interface{} {
	return user.NewUserCreateOrUpdateUserArgs()
}

func newUserCreateOrUpdateUserResult() interface{} {
	return user.NewUserCreateOrUpdateUserResult()
}

func deleteUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserDeleteUserArgs)
	realResult := result.(*user.UserDeleteUserResult)
	success, err := handler.(user.User).DeleteUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserDeleteUserArgs() interface{} {
	return user.NewUserDeleteUserArgs()
}

func newUserDeleteUserResult() interface{} {
	return user.NewUserDeleteUserResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FindUserByID(ctx context.Context, req int32) (r *user.UserData, err error) {
	var _args user.UserFindUserByIDArgs
	_args.Req = req
	var _result user.UserFindUserByIDResult
	if err = p.c.Call(ctx, "FindUserByID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUsersByFilter(ctx context.Context, req *user.UsersFilterReq) (r []*user.UserData, err error) {
	var _args user.UserGetUsersByFilterArgs
	_args.Req = req
	var _result user.UserGetUsersByFilterResult
	if err = p.c.Call(ctx, "GetUsersByFilter", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VerifyCredentials(ctx context.Context, req *user.CredentialsReq) (r bool, err error) {
	var _args user.UserVerifyCredentialsArgs
	_args.Req = req
	var _result user.UserVerifyCredentialsResult
	if err = p.c.Call(ctx, "VerifyCredentials", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateOrUpdateUser(ctx context.Context, req *user.UserData) (r *user.UserData, err error) {
	var _args user.UserCreateOrUpdateUserArgs
	_args.Req = req
	var _result user.UserCreateOrUpdateUserResult
	if err = p.c.Call(ctx, "CreateOrUpdateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteUser(ctx context.Context, req int32) (r *user.UserData, err error) {
	var _args user.UserDeleteUserArgs
	_args.Req = req
	var _result user.UserDeleteUserResult
	if err = p.c.Call(ctx, "DeleteUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
