// Code generated by thriftgo (0.3.3). DO NOT EDIT.

package micro_user

import (
	"context"
	"fmt"
	"git.zqbjj.top/pet/services/cmd/rpc/user/kitex_gen/common_rpc"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type RpcCredentialReq struct {
	SmsCode  string  `thrift:"SmsCode,1,required" frugal:"1,required,string" json:"SmsCode"`
	Mobile   string  `thrift:"Mobile,2,required" frugal:"2,required,string" json:"Mobile"`
	Password *string `thrift:"Password,3,optional" frugal:"3,optional,string" json:"Password,omitempty"`
	Username *string `thrift:"Username,4,optional" frugal:"4,optional,string" json:"Username,omitempty"`
}

func NewRpcCredentialReq() *RpcCredentialReq {
	return &RpcCredentialReq{}
}

func (p *RpcCredentialReq) InitDefault() {
	*p = RpcCredentialReq{}
}

func (p *RpcCredentialReq) GetSmsCode() (v string) {
	return p.SmsCode
}

func (p *RpcCredentialReq) GetMobile() (v string) {
	return p.Mobile
}

var RpcCredentialReq_Password_DEFAULT string

func (p *RpcCredentialReq) GetPassword() (v string) {
	if !p.IsSetPassword() {
		return RpcCredentialReq_Password_DEFAULT
	}
	return *p.Password
}

var RpcCredentialReq_Username_DEFAULT string

func (p *RpcCredentialReq) GetUsername() (v string) {
	if !p.IsSetUsername() {
		return RpcCredentialReq_Username_DEFAULT
	}
	return *p.Username
}
func (p *RpcCredentialReq) SetSmsCode(val string) {
	p.SmsCode = val
}
func (p *RpcCredentialReq) SetMobile(val string) {
	p.Mobile = val
}
func (p *RpcCredentialReq) SetPassword(val *string) {
	p.Password = val
}
func (p *RpcCredentialReq) SetUsername(val *string) {
	p.Username = val
}

var fieldIDToName_RpcCredentialReq = map[int16]string{
	1: "SmsCode",
	2: "Mobile",
	3: "Password",
	4: "Username",
}

func (p *RpcCredentialReq) IsSetPassword() bool {
	return p.Password != nil
}

func (p *RpcCredentialReq) IsSetUsername() bool {
	return p.Username != nil
}

func (p *RpcCredentialReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetSmsCode bool = false
	var issetMobile bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetSmsCode = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetMobile = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetSmsCode {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetMobile {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RpcCredentialReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_RpcCredentialReq[fieldId]))
}

func (p *RpcCredentialReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SmsCode = v
	}
	return nil
}
func (p *RpcCredentialReq) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Mobile = v
	}
	return nil
}
func (p *RpcCredentialReq) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Password = &v
	}
	return nil
}
func (p *RpcCredentialReq) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Username = &v
	}
	return nil
}

func (p *RpcCredentialReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RpcCredentialReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RpcCredentialReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SmsCode", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SmsCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *RpcCredentialReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Mobile", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Mobile); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *RpcCredentialReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPassword() {
		if err = oprot.WriteFieldBegin("Password", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Password); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *RpcCredentialReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err = oprot.WriteFieldBegin("Username", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Username); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *RpcCredentialReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RpcCredentialReq(%+v)", *p)
}

func (p *RpcCredentialReq) DeepEqual(ano *RpcCredentialReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SmsCode) {
		return false
	}
	if !p.Field2DeepEqual(ano.Mobile) {
		return false
	}
	if !p.Field3DeepEqual(ano.Password) {
		return false
	}
	if !p.Field4DeepEqual(ano.Username) {
		return false
	}
	return true
}

func (p *RpcCredentialReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.SmsCode, src) != 0 {
		return false
	}
	return true
}
func (p *RpcCredentialReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Mobile, src) != 0 {
		return false
	}
	return true
}
func (p *RpcCredentialReq) Field3DeepEqual(src *string) bool {

	if p.Password == src {
		return true
	} else if p.Password == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Password, *src) != 0 {
		return false
	}
	return true
}
func (p *RpcCredentialReq) Field4DeepEqual(src *string) bool {

	if p.Username == src {
		return true
	} else if p.Username == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Username, *src) != 0 {
		return false
	}
	return true
}

type RpcFreezeReq struct {
	Username *string `thrift:"Username,1,optional" frugal:"1,optional,string" json:"Username,omitempty"`
	Mobile   *string `thrift:"Mobile,2,optional" frugal:"2,optional,string" json:"Mobile,omitempty"`
	Email    *string `thrift:"Email,3,optional" frugal:"3,optional,string" json:"Email,omitempty"`
}

func NewRpcFreezeReq() *RpcFreezeReq {
	return &RpcFreezeReq{}
}

func (p *RpcFreezeReq) InitDefault() {
	*p = RpcFreezeReq{}
}

var RpcFreezeReq_Username_DEFAULT string

func (p *RpcFreezeReq) GetUsername() (v string) {
	if !p.IsSetUsername() {
		return RpcFreezeReq_Username_DEFAULT
	}
	return *p.Username
}

var RpcFreezeReq_Mobile_DEFAULT string

func (p *RpcFreezeReq) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return RpcFreezeReq_Mobile_DEFAULT
	}
	return *p.Mobile
}

var RpcFreezeReq_Email_DEFAULT string

func (p *RpcFreezeReq) GetEmail() (v string) {
	if !p.IsSetEmail() {
		return RpcFreezeReq_Email_DEFAULT
	}
	return *p.Email
}
func (p *RpcFreezeReq) SetUsername(val *string) {
	p.Username = val
}
func (p *RpcFreezeReq) SetMobile(val *string) {
	p.Mobile = val
}
func (p *RpcFreezeReq) SetEmail(val *string) {
	p.Email = val
}

var fieldIDToName_RpcFreezeReq = map[int16]string{
	1: "Username",
	2: "Mobile",
	3: "Email",
}

func (p *RpcFreezeReq) IsSetUsername() bool {
	return p.Username != nil
}

func (p *RpcFreezeReq) IsSetMobile() bool {
	return p.Mobile != nil
}

func (p *RpcFreezeReq) IsSetEmail() bool {
	return p.Email != nil
}

func (p *RpcFreezeReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RpcFreezeReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RpcFreezeReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Username = &v
	}
	return nil
}
func (p *RpcFreezeReq) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Mobile = &v
	}
	return nil
}
func (p *RpcFreezeReq) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Email = &v
	}
	return nil
}

func (p *RpcFreezeReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RpcFreezeReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RpcFreezeReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err = oprot.WriteFieldBegin("Username", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Username); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *RpcFreezeReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMobile() {
		if err = oprot.WriteFieldBegin("Mobile", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Mobile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *RpcFreezeReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmail() {
		if err = oprot.WriteFieldBegin("Email", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Email); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *RpcFreezeReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RpcFreezeReq(%+v)", *p)
}

func (p *RpcFreezeReq) DeepEqual(ano *RpcFreezeReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Username) {
		return false
	}
	if !p.Field2DeepEqual(ano.Mobile) {
		return false
	}
	if !p.Field3DeepEqual(ano.Email) {
		return false
	}
	return true
}

func (p *RpcFreezeReq) Field1DeepEqual(src *string) bool {

	if p.Username == src {
		return true
	} else if p.Username == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Username, *src) != 0 {
		return false
	}
	return true
}
func (p *RpcFreezeReq) Field2DeepEqual(src *string) bool {

	if p.Mobile == src {
		return true
	} else if p.Mobile == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Mobile, *src) != 0 {
		return false
	}
	return true
}
func (p *RpcFreezeReq) Field3DeepEqual(src *string) bool {

	if p.Email == src {
		return true
	} else if p.Email == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Email, *src) != 0 {
		return false
	}
	return true
}

type RpcFreezeResp struct {
	IsFrozen bool    `thrift:"IsFrozen,9,required" frugal:"9,required,bool" json:"IsFrozen"`
	ThawedAt *string `thrift:"ThawedAt,10,optional" frugal:"10,optional,string" json:"ThawedAt,omitempty"`
}

func NewRpcFreezeResp() *RpcFreezeResp {
	return &RpcFreezeResp{}
}

func (p *RpcFreezeResp) InitDefault() {
	*p = RpcFreezeResp{}
}

func (p *RpcFreezeResp) GetIsFrozen() (v bool) {
	return p.IsFrozen
}

var RpcFreezeResp_ThawedAt_DEFAULT string

func (p *RpcFreezeResp) GetThawedAt() (v string) {
	if !p.IsSetThawedAt() {
		return RpcFreezeResp_ThawedAt_DEFAULT
	}
	return *p.ThawedAt
}
func (p *RpcFreezeResp) SetIsFrozen(val bool) {
	p.IsFrozen = val
}
func (p *RpcFreezeResp) SetThawedAt(val *string) {
	p.ThawedAt = val
}

var fieldIDToName_RpcFreezeResp = map[int16]string{
	9:  "IsFrozen",
	10: "ThawedAt",
}

func (p *RpcFreezeResp) IsSetThawedAt() bool {
	return p.ThawedAt != nil
}

func (p *RpcFreezeResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetIsFrozen bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 9:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsFrozen = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetIsFrozen {
		fieldId = 9
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RpcFreezeResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_RpcFreezeResp[fieldId]))
}

func (p *RpcFreezeResp) ReadField9(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsFrozen = v
	}
	return nil
}
func (p *RpcFreezeResp) ReadField10(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ThawedAt = &v
	}
	return nil
}

func (p *RpcFreezeResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RpcFreezeResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RpcFreezeResp) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IsFrozen", thrift.BOOL, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsFrozen); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}
func (p *RpcFreezeResp) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetThawedAt() {
		if err = oprot.WriteFieldBegin("ThawedAt", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ThawedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *RpcFreezeResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RpcFreezeResp(%+v)", *p)
}

func (p *RpcFreezeResp) DeepEqual(ano *RpcFreezeResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field9DeepEqual(ano.IsFrozen) {
		return false
	}
	if !p.Field10DeepEqual(ano.ThawedAt) {
		return false
	}
	return true
}

func (p *RpcFreezeResp) Field9DeepEqual(src bool) bool {

	if p.IsFrozen != src {
		return false
	}
	return true
}
func (p *RpcFreezeResp) Field10DeepEqual(src *string) bool {

	if p.ThawedAt == src {
		return true
	} else if p.ThawedAt == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ThawedAt, *src) != 0 {
		return false
	}
	return true
}

type RpcUsersFilterReq struct {
	Gender    *int8   `thrift:"Gender,1,optional" frugal:"1,optional,i8" json:"Gender,omitempty"`
	Page      *int16  `thrift:"Page,2,optional" frugal:"2,optional,i16" json:"Page,omitempty"`
	Limit     *int16  `thrift:"Limit,3,optional" frugal:"3,optional,i16" json:"Limit,omitempty"`
	Sort      *string `thrift:"Sort,4,optional" frugal:"4,optional,string" json:"Sort,omitempty"`
	Search    *string `thrift:"Search,5,optional" frugal:"5,optional,string" json:"Search,omitempty"`
	StartDate *string `thrift:"StartDate,6,optional" frugal:"6,optional,string" json:"StartDate,omitempty"`
	EndDate   *string `thrift:"EndDate,7,optional" frugal:"7,optional,string" json:"EndDate,omitempty"`
}

func NewRpcUsersFilterReq() *RpcUsersFilterReq {
	return &RpcUsersFilterReq{}
}

func (p *RpcUsersFilterReq) InitDefault() {
	*p = RpcUsersFilterReq{}
}

var RpcUsersFilterReq_Gender_DEFAULT int8

func (p *RpcUsersFilterReq) GetGender() (v int8) {
	if !p.IsSetGender() {
		return RpcUsersFilterReq_Gender_DEFAULT
	}
	return *p.Gender
}

var RpcUsersFilterReq_Page_DEFAULT int16

func (p *RpcUsersFilterReq) GetPage() (v int16) {
	if !p.IsSetPage() {
		return RpcUsersFilterReq_Page_DEFAULT
	}
	return *p.Page
}

var RpcUsersFilterReq_Limit_DEFAULT int16

func (p *RpcUsersFilterReq) GetLimit() (v int16) {
	if !p.IsSetLimit() {
		return RpcUsersFilterReq_Limit_DEFAULT
	}
	return *p.Limit
}

var RpcUsersFilterReq_Sort_DEFAULT string

func (p *RpcUsersFilterReq) GetSort() (v string) {
	if !p.IsSetSort() {
		return RpcUsersFilterReq_Sort_DEFAULT
	}
	return *p.Sort
}

var RpcUsersFilterReq_Search_DEFAULT string

func (p *RpcUsersFilterReq) GetSearch() (v string) {
	if !p.IsSetSearch() {
		return RpcUsersFilterReq_Search_DEFAULT
	}
	return *p.Search
}

var RpcUsersFilterReq_StartDate_DEFAULT string

func (p *RpcUsersFilterReq) GetStartDate() (v string) {
	if !p.IsSetStartDate() {
		return RpcUsersFilterReq_StartDate_DEFAULT
	}
	return *p.StartDate
}

var RpcUsersFilterReq_EndDate_DEFAULT string

func (p *RpcUsersFilterReq) GetEndDate() (v string) {
	if !p.IsSetEndDate() {
		return RpcUsersFilterReq_EndDate_DEFAULT
	}
	return *p.EndDate
}
func (p *RpcUsersFilterReq) SetGender(val *int8) {
	p.Gender = val
}
func (p *RpcUsersFilterReq) SetPage(val *int16) {
	p.Page = val
}
func (p *RpcUsersFilterReq) SetLimit(val *int16) {
	p.Limit = val
}
func (p *RpcUsersFilterReq) SetSort(val *string) {
	p.Sort = val
}
func (p *RpcUsersFilterReq) SetSearch(val *string) {
	p.Search = val
}
func (p *RpcUsersFilterReq) SetStartDate(val *string) {
	p.StartDate = val
}
func (p *RpcUsersFilterReq) SetEndDate(val *string) {
	p.EndDate = val
}

var fieldIDToName_RpcUsersFilterReq = map[int16]string{
	1: "Gender",
	2: "Page",
	3: "Limit",
	4: "Sort",
	5: "Search",
	6: "StartDate",
	7: "EndDate",
}

func (p *RpcUsersFilterReq) IsSetGender() bool {
	return p.Gender != nil
}

func (p *RpcUsersFilterReq) IsSetPage() bool {
	return p.Page != nil
}

func (p *RpcUsersFilterReq) IsSetLimit() bool {
	return p.Limit != nil
}

func (p *RpcUsersFilterReq) IsSetSort() bool {
	return p.Sort != nil
}

func (p *RpcUsersFilterReq) IsSetSearch() bool {
	return p.Search != nil
}

func (p *RpcUsersFilterReq) IsSetStartDate() bool {
	return p.StartDate != nil
}

func (p *RpcUsersFilterReq) IsSetEndDate() bool {
	return p.EndDate != nil
}

func (p *RpcUsersFilterReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RpcUsersFilterReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RpcUsersFilterReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Gender = &v
	}
	return nil
}
func (p *RpcUsersFilterReq) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		p.Page = &v
	}
	return nil
}
func (p *RpcUsersFilterReq) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		p.Limit = &v
	}
	return nil
}
func (p *RpcUsersFilterReq) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Sort = &v
	}
	return nil
}
func (p *RpcUsersFilterReq) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Search = &v
	}
	return nil
}
func (p *RpcUsersFilterReq) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StartDate = &v
	}
	return nil
}
func (p *RpcUsersFilterReq) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.EndDate = &v
	}
	return nil
}

func (p *RpcUsersFilterReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RpcUsersFilterReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RpcUsersFilterReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGender() {
		if err = oprot.WriteFieldBegin("Gender", thrift.BYTE, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteByte(*p.Gender); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *RpcUsersFilterReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("Page", thrift.I16, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *RpcUsersFilterReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err = oprot.WriteFieldBegin("Limit", thrift.I16, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.Limit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *RpcUsersFilterReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSort() {
		if err = oprot.WriteFieldBegin("Sort", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Sort); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *RpcUsersFilterReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSearch() {
		if err = oprot.WriteFieldBegin("Search", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Search); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *RpcUsersFilterReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartDate() {
		if err = oprot.WriteFieldBegin("StartDate", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StartDate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *RpcUsersFilterReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndDate() {
		if err = oprot.WriteFieldBegin("EndDate", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EndDate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *RpcUsersFilterReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RpcUsersFilterReq(%+v)", *p)
}

func (p *RpcUsersFilterReq) DeepEqual(ano *RpcUsersFilterReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Gender) {
		return false
	}
	if !p.Field2DeepEqual(ano.Page) {
		return false
	}
	if !p.Field3DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field4DeepEqual(ano.Sort) {
		return false
	}
	if !p.Field5DeepEqual(ano.Search) {
		return false
	}
	if !p.Field6DeepEqual(ano.StartDate) {
		return false
	}
	if !p.Field7DeepEqual(ano.EndDate) {
		return false
	}
	return true
}

func (p *RpcUsersFilterReq) Field1DeepEqual(src *int8) bool {

	if p.Gender == src {
		return true
	} else if p.Gender == nil || src == nil {
		return false
	}
	if *p.Gender != *src {
		return false
	}
	return true
}
func (p *RpcUsersFilterReq) Field2DeepEqual(src *int16) bool {

	if p.Page == src {
		return true
	} else if p.Page == nil || src == nil {
		return false
	}
	if *p.Page != *src {
		return false
	}
	return true
}
func (p *RpcUsersFilterReq) Field3DeepEqual(src *int16) bool {

	if p.Limit == src {
		return true
	} else if p.Limit == nil || src == nil {
		return false
	}
	if *p.Limit != *src {
		return false
	}
	return true
}
func (p *RpcUsersFilterReq) Field4DeepEqual(src *string) bool {

	if p.Sort == src {
		return true
	} else if p.Sort == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Sort, *src) != 0 {
		return false
	}
	return true
}
func (p *RpcUsersFilterReq) Field5DeepEqual(src *string) bool {

	if p.Search == src {
		return true
	} else if p.Search == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Search, *src) != 0 {
		return false
	}
	return true
}
func (p *RpcUsersFilterReq) Field6DeepEqual(src *string) bool {

	if p.StartDate == src {
		return true
	} else if p.StartDate == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StartDate, *src) != 0 {
		return false
	}
	return true
}
func (p *RpcUsersFilterReq) Field7DeepEqual(src *string) bool {

	if p.EndDate == src {
		return true
	} else if p.EndDate == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EndDate, *src) != 0 {
		return false
	}
	return true
}

type RpcUser struct {
	Id       int32  `thrift:"Id,1,required" frugal:"1,required,i32" json:"Id"`
	Age      int8   `thrift:"Age,2,required" frugal:"2,required,i8" json:"Age"`
	Gender   int8   `thrift:"Gender,3,required" frugal:"3,required,i8" json:"Gender"`
	Mobile   string `thrift:"Mobile,4,required" frugal:"4,required,string" json:"Mobile"`
	Profile  string `thrift:"Profile,5,required" frugal:"5,required,string" json:"Profile"`
	Username string `thrift:"Username,6,required" frugal:"6,required,string" json:"Username"`
	Email    string `thrift:"Email,7,required" frugal:"7,required,string" json:"Email"`
	Avatar   string `thrift:"Avatar,8,required" frugal:"8,required,string" json:"Avatar"`
}

func NewRpcUser() *RpcUser {
	return &RpcUser{}
}

func (p *RpcUser) InitDefault() {
	*p = RpcUser{}
}

func (p *RpcUser) GetId() (v int32) {
	return p.Id
}

func (p *RpcUser) GetAge() (v int8) {
	return p.Age
}

func (p *RpcUser) GetGender() (v int8) {
	return p.Gender
}

func (p *RpcUser) GetMobile() (v string) {
	return p.Mobile
}

func (p *RpcUser) GetProfile() (v string) {
	return p.Profile
}

func (p *RpcUser) GetUsername() (v string) {
	return p.Username
}

func (p *RpcUser) GetEmail() (v string) {
	return p.Email
}

func (p *RpcUser) GetAvatar() (v string) {
	return p.Avatar
}
func (p *RpcUser) SetId(val int32) {
	p.Id = val
}
func (p *RpcUser) SetAge(val int8) {
	p.Age = val
}
func (p *RpcUser) SetGender(val int8) {
	p.Gender = val
}
func (p *RpcUser) SetMobile(val string) {
	p.Mobile = val
}
func (p *RpcUser) SetProfile(val string) {
	p.Profile = val
}
func (p *RpcUser) SetUsername(val string) {
	p.Username = val
}
func (p *RpcUser) SetEmail(val string) {
	p.Email = val
}
func (p *RpcUser) SetAvatar(val string) {
	p.Avatar = val
}

var fieldIDToName_RpcUser = map[int16]string{
	1: "Id",
	2: "Age",
	3: "Gender",
	4: "Mobile",
	5: "Profile",
	6: "Username",
	7: "Email",
	8: "Avatar",
}

func (p *RpcUser) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetAge bool = false
	var issetGender bool = false
	var issetMobile bool = false
	var issetProfile bool = false
	var issetUsername bool = false
	var issetEmail bool = false
	var issetAvatar bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetAge = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetGender = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetMobile = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetProfile = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetUsername = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetEmail = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetAvatar = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetAge {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetGender {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetMobile {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetProfile {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetUsername {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetEmail {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetAvatar {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RpcUser[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_RpcUser[fieldId]))
}

func (p *RpcUser) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}
func (p *RpcUser) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Age = v
	}
	return nil
}
func (p *RpcUser) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Gender = v
	}
	return nil
}
func (p *RpcUser) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Mobile = v
	}
	return nil
}
func (p *RpcUser) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Profile = v
	}
	return nil
}
func (p *RpcUser) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Username = v
	}
	return nil
}
func (p *RpcUser) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Email = v
	}
	return nil
}
func (p *RpcUser) ReadField8(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Avatar = v
	}
	return nil
}

func (p *RpcUser) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RpcUser"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RpcUser) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *RpcUser) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Age", thrift.BYTE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Age); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *RpcUser) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Gender", thrift.BYTE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Gender); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *RpcUser) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Mobile", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Mobile); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *RpcUser) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Profile", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Profile); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *RpcUser) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Username", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Username); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *RpcUser) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Email", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Email); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *RpcUser) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Avatar", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Avatar); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *RpcUser) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RpcUser(%+v)", *p)
}

func (p *RpcUser) DeepEqual(ano *RpcUser) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Age) {
		return false
	}
	if !p.Field3DeepEqual(ano.Gender) {
		return false
	}
	if !p.Field4DeepEqual(ano.Mobile) {
		return false
	}
	if !p.Field5DeepEqual(ano.Profile) {
		return false
	}
	if !p.Field6DeepEqual(ano.Username) {
		return false
	}
	if !p.Field7DeepEqual(ano.Email) {
		return false
	}
	if !p.Field8DeepEqual(ano.Avatar) {
		return false
	}
	return true
}

func (p *RpcUser) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *RpcUser) Field2DeepEqual(src int8) bool {

	if p.Age != src {
		return false
	}
	return true
}
func (p *RpcUser) Field3DeepEqual(src int8) bool {

	if p.Gender != src {
		return false
	}
	return true
}
func (p *RpcUser) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Mobile, src) != 0 {
		return false
	}
	return true
}
func (p *RpcUser) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Profile, src) != 0 {
		return false
	}
	return true
}
func (p *RpcUser) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}
func (p *RpcUser) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Email, src) != 0 {
		return false
	}
	return true
}
func (p *RpcUser) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Avatar, src) != 0 {
		return false
	}
	return true
}

type RpcSmsReq struct {
	Mobile string `thrift:"Mobile,1,required" frugal:"1,required,string" json:"Mobile"`
}

func NewRpcSmsReq() *RpcSmsReq {
	return &RpcSmsReq{}
}

func (p *RpcSmsReq) InitDefault() {
	*p = RpcSmsReq{}
}

func (p *RpcSmsReq) GetMobile() (v string) {
	return p.Mobile
}
func (p *RpcSmsReq) SetMobile(val string) {
	p.Mobile = val
}

var fieldIDToName_RpcSmsReq = map[int16]string{
	1: "Mobile",
}

func (p *RpcSmsReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetMobile bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetMobile = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetMobile {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RpcSmsReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_RpcSmsReq[fieldId]))
}

func (p *RpcSmsReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Mobile = v
	}
	return nil
}

func (p *RpcSmsReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RpcSmsReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RpcSmsReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Mobile", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Mobile); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RpcSmsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RpcSmsReq(%+v)", *p)
}

func (p *RpcSmsReq) DeepEqual(ano *RpcSmsReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Mobile) {
		return false
	}
	return true
}

func (p *RpcSmsReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Mobile, src) != 0 {
		return false
	}
	return true
}

type MicroUser interface {
	SendSMSViaAliyun(ctx context.Context, req *RpcSmsReq) (r *common_rpc.RpcEmpty, err error)

	FreezePatrolBeforeAuth(ctx context.Context, req *RpcFreezeReq) (r *RpcFreezeResp, err error)

	FreezePatrolAfterAuth(ctx context.Context, req *common_rpc.RpcId) (r *RpcFreezeResp, err error)

	VerifyCredentials(ctx context.Context, req *RpcCredentialReq) (r *common_rpc.RpcEmpty, err error)

	FindUser(ctx context.Context, req *common_rpc.RpcId) (r *RpcUser, err error)

	QueryUsersWithFilter(ctx context.Context, req *RpcUsersFilterReq) (r []*RpcUser, err error)

	UpsertUser(ctx context.Context, req *RpcUser) (r *RpcUser, err error)

	DeleteUser(ctx context.Context, req *common_rpc.RpcId) (r *common_rpc.RpcEmpty, err error)
}

type MicroUserClient struct {
	c thrift.TClient
}

func NewMicroUserClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MicroUserClient {
	return &MicroUserClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewMicroUserClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MicroUserClient {
	return &MicroUserClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewMicroUserClient(c thrift.TClient) *MicroUserClient {
	return &MicroUserClient{
		c: c,
	}
}

func (p *MicroUserClient) Client_() thrift.TClient {
	return p.c
}

func (p *MicroUserClient) SendSMSViaAliyun(ctx context.Context, req *RpcSmsReq) (r *common_rpc.RpcEmpty, err error) {
	var _args MicroUserSendSMSViaAliyunArgs
	_args.Req = req
	var _result MicroUserSendSMSViaAliyunResult
	if err = p.Client_().Call(ctx, "SendSMSViaAliyun", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroUserClient) FreezePatrolBeforeAuth(ctx context.Context, req *RpcFreezeReq) (r *RpcFreezeResp, err error) {
	var _args MicroUserFreezePatrolBeforeAuthArgs
	_args.Req = req
	var _result MicroUserFreezePatrolBeforeAuthResult
	if err = p.Client_().Call(ctx, "FreezePatrolBeforeAuth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroUserClient) FreezePatrolAfterAuth(ctx context.Context, req *common_rpc.RpcId) (r *RpcFreezeResp, err error) {
	var _args MicroUserFreezePatrolAfterAuthArgs
	_args.Req = req
	var _result MicroUserFreezePatrolAfterAuthResult
	if err = p.Client_().Call(ctx, "FreezePatrolAfterAuth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroUserClient) VerifyCredentials(ctx context.Context, req *RpcCredentialReq) (r *common_rpc.RpcEmpty, err error) {
	var _args MicroUserVerifyCredentialsArgs
	_args.Req = req
	var _result MicroUserVerifyCredentialsResult
	if err = p.Client_().Call(ctx, "VerifyCredentials", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroUserClient) FindUser(ctx context.Context, req *common_rpc.RpcId) (r *RpcUser, err error) {
	var _args MicroUserFindUserArgs
	_args.Req = req
	var _result MicroUserFindUserResult
	if err = p.Client_().Call(ctx, "FindUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroUserClient) QueryUsersWithFilter(ctx context.Context, req *RpcUsersFilterReq) (r []*RpcUser, err error) {
	var _args MicroUserQueryUsersWithFilterArgs
	_args.Req = req
	var _result MicroUserQueryUsersWithFilterResult
	if err = p.Client_().Call(ctx, "QueryUsersWithFilter", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroUserClient) UpsertUser(ctx context.Context, req *RpcUser) (r *RpcUser, err error) {
	var _args MicroUserUpsertUserArgs
	_args.Req = req
	var _result MicroUserUpsertUserResult
	if err = p.Client_().Call(ctx, "UpsertUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroUserClient) DeleteUser(ctx context.Context, req *common_rpc.RpcId) (r *common_rpc.RpcEmpty, err error) {
	var _args MicroUserDeleteUserArgs
	_args.Req = req
	var _result MicroUserDeleteUserResult
	if err = p.Client_().Call(ctx, "DeleteUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type MicroUserProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MicroUser
}

func (p *MicroUserProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MicroUserProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MicroUserProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMicroUserProcessor(handler MicroUser) *MicroUserProcessor {
	self := &MicroUserProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("SendSMSViaAliyun", &microUserProcessorSendSMSViaAliyun{handler: handler})
	self.AddToProcessorMap("FreezePatrolBeforeAuth", &microUserProcessorFreezePatrolBeforeAuth{handler: handler})
	self.AddToProcessorMap("FreezePatrolAfterAuth", &microUserProcessorFreezePatrolAfterAuth{handler: handler})
	self.AddToProcessorMap("VerifyCredentials", &microUserProcessorVerifyCredentials{handler: handler})
	self.AddToProcessorMap("FindUser", &microUserProcessorFindUser{handler: handler})
	self.AddToProcessorMap("QueryUsersWithFilter", &microUserProcessorQueryUsersWithFilter{handler: handler})
	self.AddToProcessorMap("UpsertUser", &microUserProcessorUpsertUser{handler: handler})
	self.AddToProcessorMap("DeleteUser", &microUserProcessorDeleteUser{handler: handler})
	return self
}
func (p *MicroUserProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type microUserProcessorSendSMSViaAliyun struct {
	handler MicroUser
}

func (p *microUserProcessorSendSMSViaAliyun) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroUserSendSMSViaAliyunArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SendSMSViaAliyun", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroUserSendSMSViaAliyunResult{}
	var retval *common_rpc.RpcEmpty
	if retval, err2 = p.handler.SendSMSViaAliyun(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendSMSViaAliyun: "+err2.Error())
		oprot.WriteMessageBegin("SendSMSViaAliyun", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SendSMSViaAliyun", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microUserProcessorFreezePatrolBeforeAuth struct {
	handler MicroUser
}

func (p *microUserProcessorFreezePatrolBeforeAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroUserFreezePatrolBeforeAuthArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("FreezePatrolBeforeAuth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroUserFreezePatrolBeforeAuthResult{}
	var retval *RpcFreezeResp
	if retval, err2 = p.handler.FreezePatrolBeforeAuth(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FreezePatrolBeforeAuth: "+err2.Error())
		oprot.WriteMessageBegin("FreezePatrolBeforeAuth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("FreezePatrolBeforeAuth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microUserProcessorFreezePatrolAfterAuth struct {
	handler MicroUser
}

func (p *microUserProcessorFreezePatrolAfterAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroUserFreezePatrolAfterAuthArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("FreezePatrolAfterAuth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroUserFreezePatrolAfterAuthResult{}
	var retval *RpcFreezeResp
	if retval, err2 = p.handler.FreezePatrolAfterAuth(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FreezePatrolAfterAuth: "+err2.Error())
		oprot.WriteMessageBegin("FreezePatrolAfterAuth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("FreezePatrolAfterAuth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microUserProcessorVerifyCredentials struct {
	handler MicroUser
}

func (p *microUserProcessorVerifyCredentials) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroUserVerifyCredentialsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("VerifyCredentials", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroUserVerifyCredentialsResult{}
	var retval *common_rpc.RpcEmpty
	if retval, err2 = p.handler.VerifyCredentials(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing VerifyCredentials: "+err2.Error())
		oprot.WriteMessageBegin("VerifyCredentials", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("VerifyCredentials", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microUserProcessorFindUser struct {
	handler MicroUser
}

func (p *microUserProcessorFindUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroUserFindUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("FindUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroUserFindUserResult{}
	var retval *RpcUser
	if retval, err2 = p.handler.FindUser(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FindUser: "+err2.Error())
		oprot.WriteMessageBegin("FindUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("FindUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microUserProcessorQueryUsersWithFilter struct {
	handler MicroUser
}

func (p *microUserProcessorQueryUsersWithFilter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroUserQueryUsersWithFilterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryUsersWithFilter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroUserQueryUsersWithFilterResult{}
	var retval []*RpcUser
	if retval, err2 = p.handler.QueryUsersWithFilter(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryUsersWithFilter: "+err2.Error())
		oprot.WriteMessageBegin("QueryUsersWithFilter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryUsersWithFilter", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microUserProcessorUpsertUser struct {
	handler MicroUser
}

func (p *microUserProcessorUpsertUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroUserUpsertUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpsertUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroUserUpsertUserResult{}
	var retval *RpcUser
	if retval, err2 = p.handler.UpsertUser(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpsertUser: "+err2.Error())
		oprot.WriteMessageBegin("UpsertUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpsertUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microUserProcessorDeleteUser struct {
	handler MicroUser
}

func (p *microUserProcessorDeleteUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroUserDeleteUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroUserDeleteUserResult{}
	var retval *common_rpc.RpcEmpty
	if retval, err2 = p.handler.DeleteUser(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteUser: "+err2.Error())
		oprot.WriteMessageBegin("DeleteUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type MicroUserSendSMSViaAliyunArgs struct {
	Req *RpcSmsReq `thrift:"req,1" frugal:"1,default,RpcSmsReq" json:"req"`
}

func NewMicroUserSendSMSViaAliyunArgs() *MicroUserSendSMSViaAliyunArgs {
	return &MicroUserSendSMSViaAliyunArgs{}
}

func (p *MicroUserSendSMSViaAliyunArgs) InitDefault() {
	*p = MicroUserSendSMSViaAliyunArgs{}
}

var MicroUserSendSMSViaAliyunArgs_Req_DEFAULT *RpcSmsReq

func (p *MicroUserSendSMSViaAliyunArgs) GetReq() (v *RpcSmsReq) {
	if !p.IsSetReq() {
		return MicroUserSendSMSViaAliyunArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroUserSendSMSViaAliyunArgs) SetReq(val *RpcSmsReq) {
	p.Req = val
}

var fieldIDToName_MicroUserSendSMSViaAliyunArgs = map[int16]string{
	1: "req",
}

func (p *MicroUserSendSMSViaAliyunArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroUserSendSMSViaAliyunArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserSendSMSViaAliyunArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserSendSMSViaAliyunArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewRpcSmsReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserSendSMSViaAliyunArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendSMSViaAliyun_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserSendSMSViaAliyunArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroUserSendSMSViaAliyunArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserSendSMSViaAliyunArgs(%+v)", *p)
}

func (p *MicroUserSendSMSViaAliyunArgs) DeepEqual(ano *MicroUserSendSMSViaAliyunArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroUserSendSMSViaAliyunArgs) Field1DeepEqual(src *RpcSmsReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserSendSMSViaAliyunResult struct {
	Success *common_rpc.RpcEmpty `thrift:"success,0,optional" frugal:"0,optional,common_rpc.RpcEmpty" json:"success,omitempty"`
}

func NewMicroUserSendSMSViaAliyunResult() *MicroUserSendSMSViaAliyunResult {
	return &MicroUserSendSMSViaAliyunResult{}
}

func (p *MicroUserSendSMSViaAliyunResult) InitDefault() {
	*p = MicroUserSendSMSViaAliyunResult{}
}

var MicroUserSendSMSViaAliyunResult_Success_DEFAULT *common_rpc.RpcEmpty

func (p *MicroUserSendSMSViaAliyunResult) GetSuccess() (v *common_rpc.RpcEmpty) {
	if !p.IsSetSuccess() {
		return MicroUserSendSMSViaAliyunResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroUserSendSMSViaAliyunResult) SetSuccess(x interface{}) {
	p.Success = x.(*common_rpc.RpcEmpty)
}

var fieldIDToName_MicroUserSendSMSViaAliyunResult = map[int16]string{
	0: "success",
}

func (p *MicroUserSendSMSViaAliyunResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroUserSendSMSViaAliyunResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserSendSMSViaAliyunResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserSendSMSViaAliyunResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common_rpc.NewRpcEmpty()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserSendSMSViaAliyunResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendSMSViaAliyun_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserSendSMSViaAliyunResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroUserSendSMSViaAliyunResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserSendSMSViaAliyunResult(%+v)", *p)
}

func (p *MicroUserSendSMSViaAliyunResult) DeepEqual(ano *MicroUserSendSMSViaAliyunResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroUserSendSMSViaAliyunResult) Field0DeepEqual(src *common_rpc.RpcEmpty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserFreezePatrolBeforeAuthArgs struct {
	Req *RpcFreezeReq `thrift:"req,1" frugal:"1,default,RpcFreezeReq" json:"req"`
}

func NewMicroUserFreezePatrolBeforeAuthArgs() *MicroUserFreezePatrolBeforeAuthArgs {
	return &MicroUserFreezePatrolBeforeAuthArgs{}
}

func (p *MicroUserFreezePatrolBeforeAuthArgs) InitDefault() {
	*p = MicroUserFreezePatrolBeforeAuthArgs{}
}

var MicroUserFreezePatrolBeforeAuthArgs_Req_DEFAULT *RpcFreezeReq

func (p *MicroUserFreezePatrolBeforeAuthArgs) GetReq() (v *RpcFreezeReq) {
	if !p.IsSetReq() {
		return MicroUserFreezePatrolBeforeAuthArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroUserFreezePatrolBeforeAuthArgs) SetReq(val *RpcFreezeReq) {
	p.Req = val
}

var fieldIDToName_MicroUserFreezePatrolBeforeAuthArgs = map[int16]string{
	1: "req",
}

func (p *MicroUserFreezePatrolBeforeAuthArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroUserFreezePatrolBeforeAuthArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserFreezePatrolBeforeAuthArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserFreezePatrolBeforeAuthArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewRpcFreezeReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserFreezePatrolBeforeAuthArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FreezePatrolBeforeAuth_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserFreezePatrolBeforeAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroUserFreezePatrolBeforeAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserFreezePatrolBeforeAuthArgs(%+v)", *p)
}

func (p *MicroUserFreezePatrolBeforeAuthArgs) DeepEqual(ano *MicroUserFreezePatrolBeforeAuthArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroUserFreezePatrolBeforeAuthArgs) Field1DeepEqual(src *RpcFreezeReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserFreezePatrolBeforeAuthResult struct {
	Success *RpcFreezeResp `thrift:"success,0,optional" frugal:"0,optional,RpcFreezeResp" json:"success,omitempty"`
}

func NewMicroUserFreezePatrolBeforeAuthResult() *MicroUserFreezePatrolBeforeAuthResult {
	return &MicroUserFreezePatrolBeforeAuthResult{}
}

func (p *MicroUserFreezePatrolBeforeAuthResult) InitDefault() {
	*p = MicroUserFreezePatrolBeforeAuthResult{}
}

var MicroUserFreezePatrolBeforeAuthResult_Success_DEFAULT *RpcFreezeResp

func (p *MicroUserFreezePatrolBeforeAuthResult) GetSuccess() (v *RpcFreezeResp) {
	if !p.IsSetSuccess() {
		return MicroUserFreezePatrolBeforeAuthResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroUserFreezePatrolBeforeAuthResult) SetSuccess(x interface{}) {
	p.Success = x.(*RpcFreezeResp)
}

var fieldIDToName_MicroUserFreezePatrolBeforeAuthResult = map[int16]string{
	0: "success",
}

func (p *MicroUserFreezePatrolBeforeAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroUserFreezePatrolBeforeAuthResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserFreezePatrolBeforeAuthResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserFreezePatrolBeforeAuthResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewRpcFreezeResp()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserFreezePatrolBeforeAuthResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FreezePatrolBeforeAuth_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserFreezePatrolBeforeAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroUserFreezePatrolBeforeAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserFreezePatrolBeforeAuthResult(%+v)", *p)
}

func (p *MicroUserFreezePatrolBeforeAuthResult) DeepEqual(ano *MicroUserFreezePatrolBeforeAuthResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroUserFreezePatrolBeforeAuthResult) Field0DeepEqual(src *RpcFreezeResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserFreezePatrolAfterAuthArgs struct {
	Req *common_rpc.RpcId `thrift:"req,1" frugal:"1,default,common_rpc.RpcId" json:"req"`
}

func NewMicroUserFreezePatrolAfterAuthArgs() *MicroUserFreezePatrolAfterAuthArgs {
	return &MicroUserFreezePatrolAfterAuthArgs{}
}

func (p *MicroUserFreezePatrolAfterAuthArgs) InitDefault() {
	*p = MicroUserFreezePatrolAfterAuthArgs{}
}

var MicroUserFreezePatrolAfterAuthArgs_Req_DEFAULT *common_rpc.RpcId

func (p *MicroUserFreezePatrolAfterAuthArgs) GetReq() (v *common_rpc.RpcId) {
	if !p.IsSetReq() {
		return MicroUserFreezePatrolAfterAuthArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroUserFreezePatrolAfterAuthArgs) SetReq(val *common_rpc.RpcId) {
	p.Req = val
}

var fieldIDToName_MicroUserFreezePatrolAfterAuthArgs = map[int16]string{
	1: "req",
}

func (p *MicroUserFreezePatrolAfterAuthArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroUserFreezePatrolAfterAuthArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserFreezePatrolAfterAuthArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserFreezePatrolAfterAuthArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common_rpc.NewRpcId()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserFreezePatrolAfterAuthArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FreezePatrolAfterAuth_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserFreezePatrolAfterAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroUserFreezePatrolAfterAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserFreezePatrolAfterAuthArgs(%+v)", *p)
}

func (p *MicroUserFreezePatrolAfterAuthArgs) DeepEqual(ano *MicroUserFreezePatrolAfterAuthArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroUserFreezePatrolAfterAuthArgs) Field1DeepEqual(src *common_rpc.RpcId) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserFreezePatrolAfterAuthResult struct {
	Success *RpcFreezeResp `thrift:"success,0,optional" frugal:"0,optional,RpcFreezeResp" json:"success,omitempty"`
}

func NewMicroUserFreezePatrolAfterAuthResult() *MicroUserFreezePatrolAfterAuthResult {
	return &MicroUserFreezePatrolAfterAuthResult{}
}

func (p *MicroUserFreezePatrolAfterAuthResult) InitDefault() {
	*p = MicroUserFreezePatrolAfterAuthResult{}
}

var MicroUserFreezePatrolAfterAuthResult_Success_DEFAULT *RpcFreezeResp

func (p *MicroUserFreezePatrolAfterAuthResult) GetSuccess() (v *RpcFreezeResp) {
	if !p.IsSetSuccess() {
		return MicroUserFreezePatrolAfterAuthResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroUserFreezePatrolAfterAuthResult) SetSuccess(x interface{}) {
	p.Success = x.(*RpcFreezeResp)
}

var fieldIDToName_MicroUserFreezePatrolAfterAuthResult = map[int16]string{
	0: "success",
}

func (p *MicroUserFreezePatrolAfterAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroUserFreezePatrolAfterAuthResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserFreezePatrolAfterAuthResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserFreezePatrolAfterAuthResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewRpcFreezeResp()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserFreezePatrolAfterAuthResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FreezePatrolAfterAuth_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserFreezePatrolAfterAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroUserFreezePatrolAfterAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserFreezePatrolAfterAuthResult(%+v)", *p)
}

func (p *MicroUserFreezePatrolAfterAuthResult) DeepEqual(ano *MicroUserFreezePatrolAfterAuthResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroUserFreezePatrolAfterAuthResult) Field0DeepEqual(src *RpcFreezeResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserVerifyCredentialsArgs struct {
	Req *RpcCredentialReq `thrift:"req,1" frugal:"1,default,RpcCredentialReq" json:"req"`
}

func NewMicroUserVerifyCredentialsArgs() *MicroUserVerifyCredentialsArgs {
	return &MicroUserVerifyCredentialsArgs{}
}

func (p *MicroUserVerifyCredentialsArgs) InitDefault() {
	*p = MicroUserVerifyCredentialsArgs{}
}

var MicroUserVerifyCredentialsArgs_Req_DEFAULT *RpcCredentialReq

func (p *MicroUserVerifyCredentialsArgs) GetReq() (v *RpcCredentialReq) {
	if !p.IsSetReq() {
		return MicroUserVerifyCredentialsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroUserVerifyCredentialsArgs) SetReq(val *RpcCredentialReq) {
	p.Req = val
}

var fieldIDToName_MicroUserVerifyCredentialsArgs = map[int16]string{
	1: "req",
}

func (p *MicroUserVerifyCredentialsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroUserVerifyCredentialsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserVerifyCredentialsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserVerifyCredentialsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewRpcCredentialReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserVerifyCredentialsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VerifyCredentials_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserVerifyCredentialsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroUserVerifyCredentialsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserVerifyCredentialsArgs(%+v)", *p)
}

func (p *MicroUserVerifyCredentialsArgs) DeepEqual(ano *MicroUserVerifyCredentialsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroUserVerifyCredentialsArgs) Field1DeepEqual(src *RpcCredentialReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserVerifyCredentialsResult struct {
	Success *common_rpc.RpcEmpty `thrift:"success,0,optional" frugal:"0,optional,common_rpc.RpcEmpty" json:"success,omitempty"`
}

func NewMicroUserVerifyCredentialsResult() *MicroUserVerifyCredentialsResult {
	return &MicroUserVerifyCredentialsResult{}
}

func (p *MicroUserVerifyCredentialsResult) InitDefault() {
	*p = MicroUserVerifyCredentialsResult{}
}

var MicroUserVerifyCredentialsResult_Success_DEFAULT *common_rpc.RpcEmpty

func (p *MicroUserVerifyCredentialsResult) GetSuccess() (v *common_rpc.RpcEmpty) {
	if !p.IsSetSuccess() {
		return MicroUserVerifyCredentialsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroUserVerifyCredentialsResult) SetSuccess(x interface{}) {
	p.Success = x.(*common_rpc.RpcEmpty)
}

var fieldIDToName_MicroUserVerifyCredentialsResult = map[int16]string{
	0: "success",
}

func (p *MicroUserVerifyCredentialsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroUserVerifyCredentialsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserVerifyCredentialsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserVerifyCredentialsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common_rpc.NewRpcEmpty()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserVerifyCredentialsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VerifyCredentials_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserVerifyCredentialsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroUserVerifyCredentialsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserVerifyCredentialsResult(%+v)", *p)
}

func (p *MicroUserVerifyCredentialsResult) DeepEqual(ano *MicroUserVerifyCredentialsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroUserVerifyCredentialsResult) Field0DeepEqual(src *common_rpc.RpcEmpty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserFindUserArgs struct {
	Req *common_rpc.RpcId `thrift:"req,1" frugal:"1,default,common_rpc.RpcId" json:"req"`
}

func NewMicroUserFindUserArgs() *MicroUserFindUserArgs {
	return &MicroUserFindUserArgs{}
}

func (p *MicroUserFindUserArgs) InitDefault() {
	*p = MicroUserFindUserArgs{}
}

var MicroUserFindUserArgs_Req_DEFAULT *common_rpc.RpcId

func (p *MicroUserFindUserArgs) GetReq() (v *common_rpc.RpcId) {
	if !p.IsSetReq() {
		return MicroUserFindUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroUserFindUserArgs) SetReq(val *common_rpc.RpcId) {
	p.Req = val
}

var fieldIDToName_MicroUserFindUserArgs = map[int16]string{
	1: "req",
}

func (p *MicroUserFindUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroUserFindUserArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserFindUserArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserFindUserArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common_rpc.NewRpcId()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserFindUserArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FindUser_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserFindUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroUserFindUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserFindUserArgs(%+v)", *p)
}

func (p *MicroUserFindUserArgs) DeepEqual(ano *MicroUserFindUserArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroUserFindUserArgs) Field1DeepEqual(src *common_rpc.RpcId) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserFindUserResult struct {
	Success *RpcUser `thrift:"success,0,optional" frugal:"0,optional,RpcUser" json:"success,omitempty"`
}

func NewMicroUserFindUserResult() *MicroUserFindUserResult {
	return &MicroUserFindUserResult{}
}

func (p *MicroUserFindUserResult) InitDefault() {
	*p = MicroUserFindUserResult{}
}

var MicroUserFindUserResult_Success_DEFAULT *RpcUser

func (p *MicroUserFindUserResult) GetSuccess() (v *RpcUser) {
	if !p.IsSetSuccess() {
		return MicroUserFindUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroUserFindUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*RpcUser)
}

var fieldIDToName_MicroUserFindUserResult = map[int16]string{
	0: "success",
}

func (p *MicroUserFindUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroUserFindUserResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserFindUserResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserFindUserResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewRpcUser()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserFindUserResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FindUser_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserFindUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroUserFindUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserFindUserResult(%+v)", *p)
}

func (p *MicroUserFindUserResult) DeepEqual(ano *MicroUserFindUserResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroUserFindUserResult) Field0DeepEqual(src *RpcUser) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserQueryUsersWithFilterArgs struct {
	Req *RpcUsersFilterReq `thrift:"req,1" frugal:"1,default,RpcUsersFilterReq" json:"req"`
}

func NewMicroUserQueryUsersWithFilterArgs() *MicroUserQueryUsersWithFilterArgs {
	return &MicroUserQueryUsersWithFilterArgs{}
}

func (p *MicroUserQueryUsersWithFilterArgs) InitDefault() {
	*p = MicroUserQueryUsersWithFilterArgs{}
}

var MicroUserQueryUsersWithFilterArgs_Req_DEFAULT *RpcUsersFilterReq

func (p *MicroUserQueryUsersWithFilterArgs) GetReq() (v *RpcUsersFilterReq) {
	if !p.IsSetReq() {
		return MicroUserQueryUsersWithFilterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroUserQueryUsersWithFilterArgs) SetReq(val *RpcUsersFilterReq) {
	p.Req = val
}

var fieldIDToName_MicroUserQueryUsersWithFilterArgs = map[int16]string{
	1: "req",
}

func (p *MicroUserQueryUsersWithFilterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroUserQueryUsersWithFilterArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserQueryUsersWithFilterArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserQueryUsersWithFilterArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewRpcUsersFilterReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserQueryUsersWithFilterArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryUsersWithFilter_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserQueryUsersWithFilterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroUserQueryUsersWithFilterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserQueryUsersWithFilterArgs(%+v)", *p)
}

func (p *MicroUserQueryUsersWithFilterArgs) DeepEqual(ano *MicroUserQueryUsersWithFilterArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroUserQueryUsersWithFilterArgs) Field1DeepEqual(src *RpcUsersFilterReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserQueryUsersWithFilterResult struct {
	Success []*RpcUser `thrift:"success,0,optional" frugal:"0,optional,list<RpcUser>" json:"success,omitempty"`
}

func NewMicroUserQueryUsersWithFilterResult() *MicroUserQueryUsersWithFilterResult {
	return &MicroUserQueryUsersWithFilterResult{}
}

func (p *MicroUserQueryUsersWithFilterResult) InitDefault() {
	*p = MicroUserQueryUsersWithFilterResult{}
}

var MicroUserQueryUsersWithFilterResult_Success_DEFAULT []*RpcUser

func (p *MicroUserQueryUsersWithFilterResult) GetSuccess() (v []*RpcUser) {
	if !p.IsSetSuccess() {
		return MicroUserQueryUsersWithFilterResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroUserQueryUsersWithFilterResult) SetSuccess(x interface{}) {
	p.Success = x.([]*RpcUser)
}

var fieldIDToName_MicroUserQueryUsersWithFilterResult = map[int16]string{
	0: "success",
}

func (p *MicroUserQueryUsersWithFilterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroUserQueryUsersWithFilterResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserQueryUsersWithFilterResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserQueryUsersWithFilterResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Success = make([]*RpcUser, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewRpcUser()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Success = append(p.Success, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserQueryUsersWithFilterResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryUsersWithFilter_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserQueryUsersWithFilterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return err
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroUserQueryUsersWithFilterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserQueryUsersWithFilterResult(%+v)", *p)
}

func (p *MicroUserQueryUsersWithFilterResult) DeepEqual(ano *MicroUserQueryUsersWithFilterResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroUserQueryUsersWithFilterResult) Field0DeepEqual(src []*RpcUser) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for i, v := range p.Success {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type MicroUserUpsertUserArgs struct {
	Req *RpcUser `thrift:"req,1" frugal:"1,default,RpcUser" json:"req"`
}

func NewMicroUserUpsertUserArgs() *MicroUserUpsertUserArgs {
	return &MicroUserUpsertUserArgs{}
}

func (p *MicroUserUpsertUserArgs) InitDefault() {
	*p = MicroUserUpsertUserArgs{}
}

var MicroUserUpsertUserArgs_Req_DEFAULT *RpcUser

func (p *MicroUserUpsertUserArgs) GetReq() (v *RpcUser) {
	if !p.IsSetReq() {
		return MicroUserUpsertUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroUserUpsertUserArgs) SetReq(val *RpcUser) {
	p.Req = val
}

var fieldIDToName_MicroUserUpsertUserArgs = map[int16]string{
	1: "req",
}

func (p *MicroUserUpsertUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroUserUpsertUserArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserUpsertUserArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserUpsertUserArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewRpcUser()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserUpsertUserArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpsertUser_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserUpsertUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroUserUpsertUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserUpsertUserArgs(%+v)", *p)
}

func (p *MicroUserUpsertUserArgs) DeepEqual(ano *MicroUserUpsertUserArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroUserUpsertUserArgs) Field1DeepEqual(src *RpcUser) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserUpsertUserResult struct {
	Success *RpcUser `thrift:"success,0,optional" frugal:"0,optional,RpcUser" json:"success,omitempty"`
}

func NewMicroUserUpsertUserResult() *MicroUserUpsertUserResult {
	return &MicroUserUpsertUserResult{}
}

func (p *MicroUserUpsertUserResult) InitDefault() {
	*p = MicroUserUpsertUserResult{}
}

var MicroUserUpsertUserResult_Success_DEFAULT *RpcUser

func (p *MicroUserUpsertUserResult) GetSuccess() (v *RpcUser) {
	if !p.IsSetSuccess() {
		return MicroUserUpsertUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroUserUpsertUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*RpcUser)
}

var fieldIDToName_MicroUserUpsertUserResult = map[int16]string{
	0: "success",
}

func (p *MicroUserUpsertUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroUserUpsertUserResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserUpsertUserResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserUpsertUserResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewRpcUser()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserUpsertUserResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpsertUser_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserUpsertUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroUserUpsertUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserUpsertUserResult(%+v)", *p)
}

func (p *MicroUserUpsertUserResult) DeepEqual(ano *MicroUserUpsertUserResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroUserUpsertUserResult) Field0DeepEqual(src *RpcUser) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserDeleteUserArgs struct {
	Req *common_rpc.RpcId `thrift:"req,1" frugal:"1,default,common_rpc.RpcId" json:"req"`
}

func NewMicroUserDeleteUserArgs() *MicroUserDeleteUserArgs {
	return &MicroUserDeleteUserArgs{}
}

func (p *MicroUserDeleteUserArgs) InitDefault() {
	*p = MicroUserDeleteUserArgs{}
}

var MicroUserDeleteUserArgs_Req_DEFAULT *common_rpc.RpcId

func (p *MicroUserDeleteUserArgs) GetReq() (v *common_rpc.RpcId) {
	if !p.IsSetReq() {
		return MicroUserDeleteUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroUserDeleteUserArgs) SetReq(val *common_rpc.RpcId) {
	p.Req = val
}

var fieldIDToName_MicroUserDeleteUserArgs = map[int16]string{
	1: "req",
}

func (p *MicroUserDeleteUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroUserDeleteUserArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserDeleteUserArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserDeleteUserArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common_rpc.NewRpcId()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserDeleteUserArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteUser_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserDeleteUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroUserDeleteUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserDeleteUserArgs(%+v)", *p)
}

func (p *MicroUserDeleteUserArgs) DeepEqual(ano *MicroUserDeleteUserArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroUserDeleteUserArgs) Field1DeepEqual(src *common_rpc.RpcId) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserDeleteUserResult struct {
	Success *common_rpc.RpcEmpty `thrift:"success,0,optional" frugal:"0,optional,common_rpc.RpcEmpty" json:"success,omitempty"`
}

func NewMicroUserDeleteUserResult() *MicroUserDeleteUserResult {
	return &MicroUserDeleteUserResult{}
}

func (p *MicroUserDeleteUserResult) InitDefault() {
	*p = MicroUserDeleteUserResult{}
}

var MicroUserDeleteUserResult_Success_DEFAULT *common_rpc.RpcEmpty

func (p *MicroUserDeleteUserResult) GetSuccess() (v *common_rpc.RpcEmpty) {
	if !p.IsSetSuccess() {
		return MicroUserDeleteUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroUserDeleteUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*common_rpc.RpcEmpty)
}

var fieldIDToName_MicroUserDeleteUserResult = map[int16]string{
	0: "success",
}

func (p *MicroUserDeleteUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroUserDeleteUserResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserDeleteUserResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserDeleteUserResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common_rpc.NewRpcEmpty()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserDeleteUserResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteUser_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserDeleteUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroUserDeleteUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserDeleteUserResult(%+v)", *p)
}

func (p *MicroUserDeleteUserResult) DeepEqual(ano *MicroUserDeleteUserResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroUserDeleteUserResult) Field0DeepEqual(src *common_rpc.RpcEmpty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
