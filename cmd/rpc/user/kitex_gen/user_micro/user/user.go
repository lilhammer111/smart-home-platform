// Code generated by Kitex v0.6.1. DO NOT EDIT.

package user

import (
	"context"
	standard "git.zqbjj.top/pet/services/cmd/rpc/user/kitex_gen/standard"
	user "git.zqbjj.top/pet/services/cmd/rpc/user/kitex_gen/user"
	user_micro "git.zqbjj.top/pet/services/cmd/rpc/user/kitex_gen/user_micro"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceInfo
}

var userServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "user"
	handlerType := (*user_micro.User)(nil)
	methods := map[string]kitex.MethodInfo{
		"FreezePatrolBeforeAuth": kitex.NewMethodInfo(freezePatrolBeforeAuthHandler, newUserFreezePatrolBeforeAuthArgs, newUserFreezePatrolBeforeAuthResult, false),
		"FreezePatrolAfterAuth":  kitex.NewMethodInfo(freezePatrolAfterAuthHandler, newUserFreezePatrolAfterAuthArgs, newUserFreezePatrolAfterAuthResult, false),
		"VerifyCredentials":      kitex.NewMethodInfo(verifyCredentialsHandler, newUserVerifyCredentialsArgs, newUserVerifyCredentialsResult, false),
		"FindUser":               kitex.NewMethodInfo(findUserHandler, newUserFindUserArgs, newUserFindUserResult, false),
		"QueryUsersWithFilter":   kitex.NewMethodInfo(queryUsersWithFilterHandler, newUserQueryUsersWithFilterArgs, newUserQueryUsersWithFilterResult, false),
		"UpsertUser":             kitex.NewMethodInfo(upsertUserHandler, newUserUpsertUserArgs, newUserUpsertUserResult, false),
		"DeleteUser":             kitex.NewMethodInfo(deleteUserHandler, newUserDeleteUserArgs, newUserDeleteUserResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user_micro",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func freezePatrolBeforeAuthHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user_micro.UserFreezePatrolBeforeAuthArgs)
	realResult := result.(*user_micro.UserFreezePatrolBeforeAuthResult)
	success, err := handler.(user_micro.User).FreezePatrolBeforeAuth(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserFreezePatrolBeforeAuthArgs() interface{} {
	return user_micro.NewUserFreezePatrolBeforeAuthArgs()
}

func newUserFreezePatrolBeforeAuthResult() interface{} {
	return user_micro.NewUserFreezePatrolBeforeAuthResult()
}

func freezePatrolAfterAuthHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user_micro.UserFreezePatrolAfterAuthArgs)
	realResult := result.(*user_micro.UserFreezePatrolAfterAuthResult)
	success, err := handler.(user_micro.User).FreezePatrolAfterAuth(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserFreezePatrolAfterAuthArgs() interface{} {
	return user_micro.NewUserFreezePatrolAfterAuthArgs()
}

func newUserFreezePatrolAfterAuthResult() interface{} {
	return user_micro.NewUserFreezePatrolAfterAuthResult()
}

func verifyCredentialsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user_micro.UserVerifyCredentialsArgs)
	realResult := result.(*user_micro.UserVerifyCredentialsResult)
	success, err := handler.(user_micro.User).VerifyCredentials(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserVerifyCredentialsArgs() interface{} {
	return user_micro.NewUserVerifyCredentialsArgs()
}

func newUserVerifyCredentialsResult() interface{} {
	return user_micro.NewUserVerifyCredentialsResult()
}

func findUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user_micro.UserFindUserArgs)
	realResult := result.(*user_micro.UserFindUserResult)
	success, err := handler.(user_micro.User).FindUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserFindUserArgs() interface{} {
	return user_micro.NewUserFindUserArgs()
}

func newUserFindUserResult() interface{} {
	return user_micro.NewUserFindUserResult()
}

func queryUsersWithFilterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user_micro.UserQueryUsersWithFilterArgs)
	realResult := result.(*user_micro.UserQueryUsersWithFilterResult)
	success, err := handler.(user_micro.User).QueryUsersWithFilter(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserQueryUsersWithFilterArgs() interface{} {
	return user_micro.NewUserQueryUsersWithFilterArgs()
}

func newUserQueryUsersWithFilterResult() interface{} {
	return user_micro.NewUserQueryUsersWithFilterResult()
}

func upsertUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user_micro.UserUpsertUserArgs)
	realResult := result.(*user_micro.UserUpsertUserResult)
	success, err := handler.(user_micro.User).UpsertUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserUpsertUserArgs() interface{} {
	return user_micro.NewUserUpsertUserArgs()
}

func newUserUpsertUserResult() interface{} {
	return user_micro.NewUserUpsertUserResult()
}

func deleteUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user_micro.UserDeleteUserArgs)
	realResult := result.(*user_micro.UserDeleteUserResult)
	success, err := handler.(user_micro.User).DeleteUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserDeleteUserArgs() interface{} {
	return user_micro.NewUserDeleteUserArgs()
}

func newUserDeleteUserResult() interface{} {
	return user_micro.NewUserDeleteUserResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FreezePatrolBeforeAuth(ctx context.Context, req *user_micro.AuthQuery) (r *user_micro.FreezeResp, err error) {
	var _args user_micro.UserFreezePatrolBeforeAuthArgs
	_args.Req = req
	var _result user_micro.UserFreezePatrolBeforeAuthResult
	if err = p.c.Call(ctx, "FreezePatrolBeforeAuth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FreezePatrolAfterAuth(ctx context.Context, req *standard.Req) (r *user_micro.FreezeResp, err error) {
	var _args user_micro.UserFreezePatrolAfterAuthArgs
	_args.Req = req
	var _result user_micro.UserFreezePatrolAfterAuthResult
	if err = p.c.Call(ctx, "FreezePatrolAfterAuth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VerifyCredentials(ctx context.Context, req *user_micro.CredentialsReq) (r *user_micro.EmptyResp, err error) {
	var _args user_micro.UserVerifyCredentialsArgs
	_args.Req = req
	var _result user_micro.UserVerifyCredentialsResult
	if err = p.c.Call(ctx, "VerifyCredentials", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FindUser(ctx context.Context, req *standard.Req) (r *user.UserInfo, err error) {
	var _args user_micro.UserFindUserArgs
	_args.Req = req
	var _result user_micro.UserFindUserResult
	if err = p.c.Call(ctx, "FindUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryUsersWithFilter(ctx context.Context, req *user.UsersFilter) (r []*user.UserInfo, err error) {
	var _args user_micro.UserQueryUsersWithFilterArgs
	_args.Req = req
	var _result user_micro.UserQueryUsersWithFilterResult
	if err = p.c.Call(ctx, "QueryUsersWithFilter", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpsertUser(ctx context.Context, req *user.UserInfo) (r *user.UserInfo, err error) {
	var _args user_micro.UserUpsertUserArgs
	_args.Req = req
	var _result user_micro.UserUpsertUserResult
	if err = p.c.Call(ctx, "UpsertUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteUser(ctx context.Context, req *standard.Req) (r *user_micro.EmptyResp, err error) {
	var _args user_micro.UserDeleteUserArgs
	_args.Req = req
	var _result user_micro.UserDeleteUserResult
	if err = p.c.Call(ctx, "DeleteUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
