// Code generated by Kitex v0.6.1. DO NOT EDIT.

package microdevice

import (
	"context"
	alert "git.zqbjj.top/pet/services/cmd/rpc/device/kitex_gen/alert"
	common "git.zqbjj.top/pet/services/cmd/rpc/device/kitex_gen/common"
	device "git.zqbjj.top/pet/services/cmd/rpc/device/kitex_gen/device"
	micro_device "git.zqbjj.top/pet/services/cmd/rpc/device/kitex_gen/micro_device"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return microDeviceServiceInfo
}

var microDeviceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MicroDevice"
	handlerType := (*micro_device.MicroDevice)(nil)
	methods := map[string]kitex.MethodInfo{
		"FindDevice":             kitex.NewMethodInfo(findDeviceHandler, newMicroDeviceFindDeviceArgs, newMicroDeviceFindDeviceResult, false),
		"QueryDevicesWithFilter": kitex.NewMethodInfo(queryDevicesWithFilterHandler, newMicroDeviceQueryDevicesWithFilterArgs, newMicroDeviceQueryDevicesWithFilterResult, false),
		"CreateDevice":           kitex.NewMethodInfo(createDeviceHandler, newMicroDeviceCreateDeviceArgs, newMicroDeviceCreateDeviceResult, false),
		"UpdateDevice":           kitex.NewMethodInfo(updateDeviceHandler, newMicroDeviceUpdateDeviceArgs, newMicroDeviceUpdateDeviceResult, false),
		"DeleteDevice":           kitex.NewMethodInfo(deleteDeviceHandler, newMicroDeviceDeleteDeviceArgs, newMicroDeviceDeleteDeviceResult, false),
		"FindLocationTitle":      kitex.NewMethodInfo(findLocationTitleHandler, newMicroDeviceFindLocationTitleArgs, newMicroDeviceFindLocationTitleResult, false),
		"FindAllLocationEnum":    kitex.NewMethodInfo(findAllLocationEnumHandler, newMicroDeviceFindAllLocationEnumArgs, newMicroDeviceFindAllLocationEnumResult, false),
		"ReduceLocationEnum":     kitex.NewMethodInfo(reduceLocationEnumHandler, newMicroDeviceReduceLocationEnumArgs, newMicroDeviceReduceLocationEnumResult, false),
		"ExpandLocationEnum":     kitex.NewMethodInfo(expandLocationEnumHandler, newMicroDeviceExpandLocationEnumArgs, newMicroDeviceExpandLocationEnumResult, false),
		"FindAlert":              kitex.NewMethodInfo(findAlertHandler, newMicroDeviceFindAlertArgs, newMicroDeviceFindAlertResult, false),
		"QueryAlertsWithFilter":  kitex.NewMethodInfo(queryAlertsWithFilterHandler, newMicroDeviceQueryAlertsWithFilterArgs, newMicroDeviceQueryAlertsWithFilterResult, false),
		"CreateAlert":            kitex.NewMethodInfo(createAlertHandler, newMicroDeviceCreateAlertArgs, newMicroDeviceCreateAlertResult, false),
		"UpdateAlert":            kitex.NewMethodInfo(updateAlertHandler, newMicroDeviceUpdateAlertArgs, newMicroDeviceUpdateAlertResult, false),
		"DeleteAlert":            kitex.NewMethodInfo(deleteAlertHandler, newMicroDeviceDeleteAlertArgs, newMicroDeviceDeleteAlertResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "micro_device",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func findDeviceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*micro_device.MicroDeviceFindDeviceArgs)
	realResult := result.(*micro_device.MicroDeviceFindDeviceResult)
	success, err := handler.(micro_device.MicroDevice).FindDevice(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMicroDeviceFindDeviceArgs() interface{} {
	return micro_device.NewMicroDeviceFindDeviceArgs()
}

func newMicroDeviceFindDeviceResult() interface{} {
	return micro_device.NewMicroDeviceFindDeviceResult()
}

func queryDevicesWithFilterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*micro_device.MicroDeviceQueryDevicesWithFilterArgs)
	realResult := result.(*micro_device.MicroDeviceQueryDevicesWithFilterResult)
	success, err := handler.(micro_device.MicroDevice).QueryDevicesWithFilter(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMicroDeviceQueryDevicesWithFilterArgs() interface{} {
	return micro_device.NewMicroDeviceQueryDevicesWithFilterArgs()
}

func newMicroDeviceQueryDevicesWithFilterResult() interface{} {
	return micro_device.NewMicroDeviceQueryDevicesWithFilterResult()
}

func createDeviceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*micro_device.MicroDeviceCreateDeviceArgs)
	realResult := result.(*micro_device.MicroDeviceCreateDeviceResult)
	success, err := handler.(micro_device.MicroDevice).CreateDevice(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMicroDeviceCreateDeviceArgs() interface{} {
	return micro_device.NewMicroDeviceCreateDeviceArgs()
}

func newMicroDeviceCreateDeviceResult() interface{} {
	return micro_device.NewMicroDeviceCreateDeviceResult()
}

func updateDeviceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*micro_device.MicroDeviceUpdateDeviceArgs)
	realResult := result.(*micro_device.MicroDeviceUpdateDeviceResult)
	success, err := handler.(micro_device.MicroDevice).UpdateDevice(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMicroDeviceUpdateDeviceArgs() interface{} {
	return micro_device.NewMicroDeviceUpdateDeviceArgs()
}

func newMicroDeviceUpdateDeviceResult() interface{} {
	return micro_device.NewMicroDeviceUpdateDeviceResult()
}

func deleteDeviceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*micro_device.MicroDeviceDeleteDeviceArgs)
	realResult := result.(*micro_device.MicroDeviceDeleteDeviceResult)
	success, err := handler.(micro_device.MicroDevice).DeleteDevice(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMicroDeviceDeleteDeviceArgs() interface{} {
	return micro_device.NewMicroDeviceDeleteDeviceArgs()
}

func newMicroDeviceDeleteDeviceResult() interface{} {
	return micro_device.NewMicroDeviceDeleteDeviceResult()
}

func findLocationTitleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*micro_device.MicroDeviceFindLocationTitleArgs)
	realResult := result.(*micro_device.MicroDeviceFindLocationTitleResult)
	success, err := handler.(micro_device.MicroDevice).FindLocationTitle(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMicroDeviceFindLocationTitleArgs() interface{} {
	return micro_device.NewMicroDeviceFindLocationTitleArgs()
}

func newMicroDeviceFindLocationTitleResult() interface{} {
	return micro_device.NewMicroDeviceFindLocationTitleResult()
}

func findAllLocationEnumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*micro_device.MicroDeviceFindAllLocationEnumResult)
	success, err := handler.(micro_device.MicroDevice).FindAllLocationEnum(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMicroDeviceFindAllLocationEnumArgs() interface{} {
	return micro_device.NewMicroDeviceFindAllLocationEnumArgs()
}

func newMicroDeviceFindAllLocationEnumResult() interface{} {
	return micro_device.NewMicroDeviceFindAllLocationEnumResult()
}

func reduceLocationEnumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*micro_device.MicroDeviceReduceLocationEnumArgs)
	realResult := result.(*micro_device.MicroDeviceReduceLocationEnumResult)
	success, err := handler.(micro_device.MicroDevice).ReduceLocationEnum(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMicroDeviceReduceLocationEnumArgs() interface{} {
	return micro_device.NewMicroDeviceReduceLocationEnumArgs()
}

func newMicroDeviceReduceLocationEnumResult() interface{} {
	return micro_device.NewMicroDeviceReduceLocationEnumResult()
}

func expandLocationEnumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*micro_device.MicroDeviceExpandLocationEnumArgs)
	realResult := result.(*micro_device.MicroDeviceExpandLocationEnumResult)
	success, err := handler.(micro_device.MicroDevice).ExpandLocationEnum(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMicroDeviceExpandLocationEnumArgs() interface{} {
	return micro_device.NewMicroDeviceExpandLocationEnumArgs()
}

func newMicroDeviceExpandLocationEnumResult() interface{} {
	return micro_device.NewMicroDeviceExpandLocationEnumResult()
}

func findAlertHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*micro_device.MicroDeviceFindAlertArgs)
	realResult := result.(*micro_device.MicroDeviceFindAlertResult)
	success, err := handler.(micro_device.MicroDevice).FindAlert(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMicroDeviceFindAlertArgs() interface{} {
	return micro_device.NewMicroDeviceFindAlertArgs()
}

func newMicroDeviceFindAlertResult() interface{} {
	return micro_device.NewMicroDeviceFindAlertResult()
}

func queryAlertsWithFilterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*micro_device.MicroDeviceQueryAlertsWithFilterArgs)
	realResult := result.(*micro_device.MicroDeviceQueryAlertsWithFilterResult)
	success, err := handler.(micro_device.MicroDevice).QueryAlertsWithFilter(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMicroDeviceQueryAlertsWithFilterArgs() interface{} {
	return micro_device.NewMicroDeviceQueryAlertsWithFilterArgs()
}

func newMicroDeviceQueryAlertsWithFilterResult() interface{} {
	return micro_device.NewMicroDeviceQueryAlertsWithFilterResult()
}

func createAlertHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*micro_device.MicroDeviceCreateAlertArgs)
	realResult := result.(*micro_device.MicroDeviceCreateAlertResult)
	success, err := handler.(micro_device.MicroDevice).CreateAlert(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMicroDeviceCreateAlertArgs() interface{} {
	return micro_device.NewMicroDeviceCreateAlertArgs()
}

func newMicroDeviceCreateAlertResult() interface{} {
	return micro_device.NewMicroDeviceCreateAlertResult()
}

func updateAlertHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*micro_device.MicroDeviceUpdateAlertArgs)
	realResult := result.(*micro_device.MicroDeviceUpdateAlertResult)
	success, err := handler.(micro_device.MicroDevice).UpdateAlert(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMicroDeviceUpdateAlertArgs() interface{} {
	return micro_device.NewMicroDeviceUpdateAlertArgs()
}

func newMicroDeviceUpdateAlertResult() interface{} {
	return micro_device.NewMicroDeviceUpdateAlertResult()
}

func deleteAlertHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*micro_device.MicroDeviceDeleteAlertArgs)
	realResult := result.(*micro_device.MicroDeviceDeleteAlertResult)
	success, err := handler.(micro_device.MicroDevice).DeleteAlert(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMicroDeviceDeleteAlertArgs() interface{} {
	return micro_device.NewMicroDeviceDeleteAlertArgs()
}

func newMicroDeviceDeleteAlertResult() interface{} {
	return micro_device.NewMicroDeviceDeleteAlertResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FindDevice(ctx context.Context, req *micro_device.RpcFindDeviceReq) (r *device.DeviceInfo, err error) {
	var _args micro_device.MicroDeviceFindDeviceArgs
	_args.Req = req
	var _result micro_device.MicroDeviceFindDeviceResult
	if err = p.c.Call(ctx, "FindDevice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryDevicesWithFilter(ctx context.Context, req *device.DeviceFilter) (r []*device.DeviceInfo, err error) {
	var _args micro_device.MicroDeviceQueryDevicesWithFilterArgs
	_args.Req = req
	var _result micro_device.MicroDeviceQueryDevicesWithFilterResult
	if err = p.c.Call(ctx, "QueryDevicesWithFilter", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateDevice(ctx context.Context, req *device.DeviceInfo) (r *device.DeviceInfo, err error) {
	var _args micro_device.MicroDeviceCreateDeviceArgs
	_args.Req = req
	var _result micro_device.MicroDeviceCreateDeviceResult
	if err = p.c.Call(ctx, "CreateDevice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateDevice(ctx context.Context, req *device.DeviceInfo) (r *device.DeviceInfo, err error) {
	var _args micro_device.MicroDeviceUpdateDeviceArgs
	_args.Req = req
	var _result micro_device.MicroDeviceUpdateDeviceResult
	if err = p.c.Call(ctx, "UpdateDevice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteDevice(ctx context.Context, req *micro_device.RpcDeleteDeviceReq) (r *common.Empty, err error) {
	var _args micro_device.MicroDeviceDeleteDeviceArgs
	_args.Req = req
	var _result micro_device.MicroDeviceDeleteDeviceResult
	if err = p.c.Call(ctx, "DeleteDevice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FindLocationTitle(ctx context.Context, req *micro_device.RpcFindLocReq) (r *micro_device.LocationData, err error) {
	var _args micro_device.MicroDeviceFindLocationTitleArgs
	_args.Req = req
	var _result micro_device.MicroDeviceFindLocationTitleResult
	if err = p.c.Call(ctx, "FindLocationTitle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FindAllLocationEnum(ctx context.Context) (r []*micro_device.LocationData, err error) {
	var _args micro_device.MicroDeviceFindAllLocationEnumArgs
	var _result micro_device.MicroDeviceFindAllLocationEnumResult
	if err = p.c.Call(ctx, "FindAllLocationEnum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ReduceLocationEnum(ctx context.Context, req *micro_device.RpcReduceLocReq) (r *common.Empty, err error) {
	var _args micro_device.MicroDeviceReduceLocationEnumArgs
	_args.Req = req
	var _result micro_device.MicroDeviceReduceLocationEnumResult
	if err = p.c.Call(ctx, "ReduceLocationEnum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExpandLocationEnum(ctx context.Context, req *micro_device.RpcExpandLocReq) (r *common.Empty, err error) {
	var _args micro_device.MicroDeviceExpandLocationEnumArgs
	_args.Req = req
	var _result micro_device.MicroDeviceExpandLocationEnumResult
	if err = p.c.Call(ctx, "ExpandLocationEnum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FindAlert(ctx context.Context, req *micro_device.RpcFindAlertReq) (r *alert.AlertInfo, err error) {
	var _args micro_device.MicroDeviceFindAlertArgs
	_args.Req = req
	var _result micro_device.MicroDeviceFindAlertResult
	if err = p.c.Call(ctx, "FindAlert", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryAlertsWithFilter(ctx context.Context, req *alert.AlertFilter) (r []*alert.AlertInfo, err error) {
	var _args micro_device.MicroDeviceQueryAlertsWithFilterArgs
	_args.Req = req
	var _result micro_device.MicroDeviceQueryAlertsWithFilterResult
	if err = p.c.Call(ctx, "QueryAlertsWithFilter", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateAlert(ctx context.Context, req *alert.AlertInfo) (r *alert.AlertInfo, err error) {
	var _args micro_device.MicroDeviceCreateAlertArgs
	_args.Req = req
	var _result micro_device.MicroDeviceCreateAlertResult
	if err = p.c.Call(ctx, "CreateAlert", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateAlert(ctx context.Context, req *alert.AlertInfo) (r *alert.AlertInfo, err error) {
	var _args micro_device.MicroDeviceUpdateAlertArgs
	_args.Req = req
	var _result micro_device.MicroDeviceUpdateAlertResult
	if err = p.c.Call(ctx, "UpdateAlert", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteAlert(ctx context.Context, req *micro_device.RpcDeleteAlertReq) (r *common.Empty, err error) {
	var _args micro_device.MicroDeviceDeleteAlertArgs
	_args.Req = req
	var _result micro_device.MicroDeviceDeleteAlertResult
	if err = p.c.Call(ctx, "DeleteAlert", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
