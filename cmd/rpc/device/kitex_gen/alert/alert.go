// Code generated by thriftgo (0.3.3). DO NOT EDIT.

package alert

import (
	"context"
	"fmt"
	"git.zqbjj.top/pet/services/cmd/rpc/device/kitex_gen/common"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type AlertFilter struct {
	Page      *int16   `thrift:"Page,2,optional" frugal:"2,optional,i16" json:"Page,omitempty"`
	Limit     *int16   `thrift:"Limit,1,optional" frugal:"1,optional,i16" json:"Limit,omitempty"`
	Level     *int8    `thrift:"Level,3,optional" frugal:"3,optional,i8" json:"Level,omitempty"`
	DeviceId  *int32   `thrift:"DeviceId,4,optional" frugal:"4,optional,i32" json:"DeviceId,omitempty"`
	Sorts     []string `thrift:"Sorts,5,optional" frugal:"5,optional,list<string>" json:"Sorts,omitempty"`
	StartDate *string  `thrift:"StartDate,6,optional" frugal:"6,optional,string" json:"StartDate,omitempty"`
	EndDate   *string  `thrift:"EndDate,7,optional" frugal:"7,optional,string" json:"EndDate,omitempty"`
	IsOngoing *bool    `thrift:"IsOngoing,8,optional" frugal:"8,optional,bool" json:"IsOngoing,omitempty"`
}

func NewAlertFilter() *AlertFilter {
	return &AlertFilter{}
}

func (p *AlertFilter) InitDefault() {
	*p = AlertFilter{}
}

var AlertFilter_Page_DEFAULT int16

func (p *AlertFilter) GetPage() (v int16) {
	if !p.IsSetPage() {
		return AlertFilter_Page_DEFAULT
	}
	return *p.Page
}

var AlertFilter_Limit_DEFAULT int16

func (p *AlertFilter) GetLimit() (v int16) {
	if !p.IsSetLimit() {
		return AlertFilter_Limit_DEFAULT
	}
	return *p.Limit
}

var AlertFilter_Level_DEFAULT int8

func (p *AlertFilter) GetLevel() (v int8) {
	if !p.IsSetLevel() {
		return AlertFilter_Level_DEFAULT
	}
	return *p.Level
}

var AlertFilter_DeviceId_DEFAULT int32

func (p *AlertFilter) GetDeviceId() (v int32) {
	if !p.IsSetDeviceId() {
		return AlertFilter_DeviceId_DEFAULT
	}
	return *p.DeviceId
}

var AlertFilter_Sorts_DEFAULT []string

func (p *AlertFilter) GetSorts() (v []string) {
	if !p.IsSetSorts() {
		return AlertFilter_Sorts_DEFAULT
	}
	return p.Sorts
}

var AlertFilter_StartDate_DEFAULT string

func (p *AlertFilter) GetStartDate() (v string) {
	if !p.IsSetStartDate() {
		return AlertFilter_StartDate_DEFAULT
	}
	return *p.StartDate
}

var AlertFilter_EndDate_DEFAULT string

func (p *AlertFilter) GetEndDate() (v string) {
	if !p.IsSetEndDate() {
		return AlertFilter_EndDate_DEFAULT
	}
	return *p.EndDate
}

var AlertFilter_IsOngoing_DEFAULT bool

func (p *AlertFilter) GetIsOngoing() (v bool) {
	if !p.IsSetIsOngoing() {
		return AlertFilter_IsOngoing_DEFAULT
	}
	return *p.IsOngoing
}
func (p *AlertFilter) SetPage(val *int16) {
	p.Page = val
}
func (p *AlertFilter) SetLimit(val *int16) {
	p.Limit = val
}
func (p *AlertFilter) SetLevel(val *int8) {
	p.Level = val
}
func (p *AlertFilter) SetDeviceId(val *int32) {
	p.DeviceId = val
}
func (p *AlertFilter) SetSorts(val []string) {
	p.Sorts = val
}
func (p *AlertFilter) SetStartDate(val *string) {
	p.StartDate = val
}
func (p *AlertFilter) SetEndDate(val *string) {
	p.EndDate = val
}
func (p *AlertFilter) SetIsOngoing(val *bool) {
	p.IsOngoing = val
}

var fieldIDToName_AlertFilter = map[int16]string{
	2: "Page",
	1: "Limit",
	3: "Level",
	4: "DeviceId",
	5: "Sorts",
	6: "StartDate",
	7: "EndDate",
	8: "IsOngoing",
}

func (p *AlertFilter) IsSetPage() bool {
	return p.Page != nil
}

func (p *AlertFilter) IsSetLimit() bool {
	return p.Limit != nil
}

func (p *AlertFilter) IsSetLevel() bool {
	return p.Level != nil
}

func (p *AlertFilter) IsSetDeviceId() bool {
	return p.DeviceId != nil
}

func (p *AlertFilter) IsSetSorts() bool {
	return p.Sorts != nil
}

func (p *AlertFilter) IsSetStartDate() bool {
	return p.StartDate != nil
}

func (p *AlertFilter) IsSetEndDate() bool {
	return p.EndDate != nil
}

func (p *AlertFilter) IsSetIsOngoing() bool {
	return p.IsOngoing != nil
}

func (p *AlertFilter) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 2:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AlertFilter[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AlertFilter) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		p.Page = &v
	}
	return nil
}
func (p *AlertFilter) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		p.Limit = &v
	}
	return nil
}
func (p *AlertFilter) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Level = &v
	}
	return nil
}
func (p *AlertFilter) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.DeviceId = &v
	}
	return nil
}
func (p *AlertFilter) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Sorts = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Sorts = append(p.Sorts, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *AlertFilter) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StartDate = &v
	}
	return nil
}
func (p *AlertFilter) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.EndDate = &v
	}
	return nil
}
func (p *AlertFilter) ReadField8(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsOngoing = &v
	}
	return nil
}

func (p *AlertFilter) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AlertFilter"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AlertFilter) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("Page", thrift.I16, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *AlertFilter) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err = oprot.WriteFieldBegin("Limit", thrift.I16, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.Limit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *AlertFilter) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLevel() {
		if err = oprot.WriteFieldBegin("Level", thrift.BYTE, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteByte(*p.Level); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *AlertFilter) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeviceId() {
		if err = oprot.WriteFieldBegin("DeviceId", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.DeviceId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *AlertFilter) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSorts() {
		if err = oprot.WriteFieldBegin("Sorts", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Sorts)); err != nil {
			return err
		}
		for _, v := range p.Sorts {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *AlertFilter) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartDate() {
		if err = oprot.WriteFieldBegin("StartDate", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StartDate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *AlertFilter) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndDate() {
		if err = oprot.WriteFieldBegin("EndDate", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EndDate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *AlertFilter) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsOngoing() {
		if err = oprot.WriteFieldBegin("IsOngoing", thrift.BOOL, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsOngoing); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *AlertFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlertFilter(%+v)", *p)
}

func (p *AlertFilter) DeepEqual(ano *AlertFilter) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field2DeepEqual(ano.Page) {
		return false
	}
	if !p.Field1DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field3DeepEqual(ano.Level) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeviceId) {
		return false
	}
	if !p.Field5DeepEqual(ano.Sorts) {
		return false
	}
	if !p.Field6DeepEqual(ano.StartDate) {
		return false
	}
	if !p.Field7DeepEqual(ano.EndDate) {
		return false
	}
	if !p.Field8DeepEqual(ano.IsOngoing) {
		return false
	}
	return true
}

func (p *AlertFilter) Field2DeepEqual(src *int16) bool {

	if p.Page == src {
		return true
	} else if p.Page == nil || src == nil {
		return false
	}
	if *p.Page != *src {
		return false
	}
	return true
}
func (p *AlertFilter) Field1DeepEqual(src *int16) bool {

	if p.Limit == src {
		return true
	} else if p.Limit == nil || src == nil {
		return false
	}
	if *p.Limit != *src {
		return false
	}
	return true
}
func (p *AlertFilter) Field3DeepEqual(src *int8) bool {

	if p.Level == src {
		return true
	} else if p.Level == nil || src == nil {
		return false
	}
	if *p.Level != *src {
		return false
	}
	return true
}
func (p *AlertFilter) Field4DeepEqual(src *int32) bool {

	if p.DeviceId == src {
		return true
	} else if p.DeviceId == nil || src == nil {
		return false
	}
	if *p.DeviceId != *src {
		return false
	}
	return true
}
func (p *AlertFilter) Field5DeepEqual(src []string) bool {

	if len(p.Sorts) != len(src) {
		return false
	}
	for i, v := range p.Sorts {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *AlertFilter) Field6DeepEqual(src *string) bool {

	if p.StartDate == src {
		return true
	} else if p.StartDate == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StartDate, *src) != 0 {
		return false
	}
	return true
}
func (p *AlertFilter) Field7DeepEqual(src *string) bool {

	if p.EndDate == src {
		return true
	} else if p.EndDate == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EndDate, *src) != 0 {
		return false
	}
	return true
}
func (p *AlertFilter) Field8DeepEqual(src *bool) bool {

	if p.IsOngoing == src {
		return true
	} else if p.IsOngoing == nil || src == nil {
		return false
	}
	if *p.IsOngoing != *src {
		return false
	}
	return true
}

type AlertInfo struct {
	Id         *int32 `thrift:"Id,1,optional" frugal:"1,optional,i32" json:"Id,omitempty"`
	DeviceId   int32  `thrift:"DeviceId,4,required" frugal:"4,required,i32" json:"DeviceId"`
	Count      int8   `thrift:"Count,2,required" frugal:"2,required,i8" json:"Count"`
	Level      int8   `thrift:"Level,3,required" frugal:"3,required,i8" json:"Level"`
	Desc       string `thrift:"Desc,5,required" frugal:"5,required,string" json:"Desc"`
	FirstAlarm string `thrift:"FirstAlarm,6,required" frugal:"6,required,string" json:"FirstAlarm"`
	LastAlarm  string `thrift:"LastAlarm,7,required" frugal:"7,required,string" json:"LastAlarm"`
	IsOngoing  bool   `thrift:"IsOngoing,8,required" frugal:"8,required,bool" json:"IsOngoing"`
}

func NewAlertInfo() *AlertInfo {
	return &AlertInfo{}
}

func (p *AlertInfo) InitDefault() {
	*p = AlertInfo{}
}

var AlertInfo_Id_DEFAULT int32

func (p *AlertInfo) GetId() (v int32) {
	if !p.IsSetId() {
		return AlertInfo_Id_DEFAULT
	}
	return *p.Id
}

func (p *AlertInfo) GetDeviceId() (v int32) {
	return p.DeviceId
}

func (p *AlertInfo) GetCount() (v int8) {
	return p.Count
}

func (p *AlertInfo) GetLevel() (v int8) {
	return p.Level
}

func (p *AlertInfo) GetDesc() (v string) {
	return p.Desc
}

func (p *AlertInfo) GetFirstAlarm() (v string) {
	return p.FirstAlarm
}

func (p *AlertInfo) GetLastAlarm() (v string) {
	return p.LastAlarm
}

func (p *AlertInfo) GetIsOngoing() (v bool) {
	return p.IsOngoing
}
func (p *AlertInfo) SetId(val *int32) {
	p.Id = val
}
func (p *AlertInfo) SetDeviceId(val int32) {
	p.DeviceId = val
}
func (p *AlertInfo) SetCount(val int8) {
	p.Count = val
}
func (p *AlertInfo) SetLevel(val int8) {
	p.Level = val
}
func (p *AlertInfo) SetDesc(val string) {
	p.Desc = val
}
func (p *AlertInfo) SetFirstAlarm(val string) {
	p.FirstAlarm = val
}
func (p *AlertInfo) SetLastAlarm(val string) {
	p.LastAlarm = val
}
func (p *AlertInfo) SetIsOngoing(val bool) {
	p.IsOngoing = val
}

var fieldIDToName_AlertInfo = map[int16]string{
	1: "Id",
	4: "DeviceId",
	2: "Count",
	3: "Level",
	5: "Desc",
	6: "FirstAlarm",
	7: "LastAlarm",
	8: "IsOngoing",
}

func (p *AlertInfo) IsSetId() bool {
	return p.Id != nil
}

func (p *AlertInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDeviceId bool = false
	var issetCount bool = false
	var issetLevel bool = false
	var issetDesc bool = false
	var issetFirstAlarm bool = false
	var issetLastAlarm bool = false
	var issetIsOngoing bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetDeviceId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCount = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetLevel = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetDesc = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetFirstAlarm = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetLastAlarm = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsOngoing = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDeviceId {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetCount {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetLevel {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetDesc {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetFirstAlarm {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetLastAlarm {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetIsOngoing {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AlertInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AlertInfo[fieldId]))
}

func (p *AlertInfo) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = &v
	}
	return nil
}
func (p *AlertInfo) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.DeviceId = v
	}
	return nil
}
func (p *AlertInfo) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Count = v
	}
	return nil
}
func (p *AlertInfo) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Level = v
	}
	return nil
}
func (p *AlertInfo) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Desc = v
	}
	return nil
}
func (p *AlertInfo) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FirstAlarm = v
	}
	return nil
}
func (p *AlertInfo) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LastAlarm = v
	}
	return nil
}
func (p *AlertInfo) ReadField8(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsOngoing = v
	}
	return nil
}

func (p *AlertInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AlertInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AlertInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("Id", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *AlertInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("DeviceId", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeviceId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *AlertInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Count", thrift.BYTE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Count); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *AlertInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Level", thrift.BYTE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Level); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *AlertInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Desc", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Desc); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *AlertInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FirstAlarm", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FirstAlarm); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *AlertInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LastAlarm", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LastAlarm); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *AlertInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IsOngoing", thrift.BOOL, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsOngoing); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *AlertInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlertInfo(%+v)", *p)
}

func (p *AlertInfo) DeepEqual(ano *AlertInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeviceId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Count) {
		return false
	}
	if !p.Field3DeepEqual(ano.Level) {
		return false
	}
	if !p.Field5DeepEqual(ano.Desc) {
		return false
	}
	if !p.Field6DeepEqual(ano.FirstAlarm) {
		return false
	}
	if !p.Field7DeepEqual(ano.LastAlarm) {
		return false
	}
	if !p.Field8DeepEqual(ano.IsOngoing) {
		return false
	}
	return true
}

func (p *AlertInfo) Field1DeepEqual(src *int32) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *AlertInfo) Field4DeepEqual(src int32) bool {

	if p.DeviceId != src {
		return false
	}
	return true
}
func (p *AlertInfo) Field2DeepEqual(src int8) bool {

	if p.Count != src {
		return false
	}
	return true
}
func (p *AlertInfo) Field3DeepEqual(src int8) bool {

	if p.Level != src {
		return false
	}
	return true
}
func (p *AlertInfo) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Desc, src) != 0 {
		return false
	}
	return true
}
func (p *AlertInfo) Field6DeepEqual(src string) bool {

	if strings.Compare(p.FirstAlarm, src) != 0 {
		return false
	}
	return true
}
func (p *AlertInfo) Field7DeepEqual(src string) bool {

	if strings.Compare(p.LastAlarm, src) != 0 {
		return false
	}
	return true
}
func (p *AlertInfo) Field8DeepEqual(src bool) bool {

	if p.IsOngoing != src {
		return false
	}
	return true
}

type Alert interface {
	GetAlertList(ctx context.Context, req *AlertFilter) (r []*AlertInfo, err error)

	GetAlertDetail(ctx context.Context, req *common.Req) (r *AlertInfo, err error)

	UpdateAlertInfo(ctx context.Context, req *AlertInfo) (r *AlertInfo, err error)

	UploadAlertInfo(ctx context.Context, req *AlertInfo) (r *AlertInfo, err error)

	DeleteAlert(ctx context.Context, req *common.Req) (r *common.Empty, err error)
}

type AlertClient struct {
	c thrift.TClient
}

func NewAlertClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AlertClient {
	return &AlertClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewAlertClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AlertClient {
	return &AlertClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewAlertClient(c thrift.TClient) *AlertClient {
	return &AlertClient{
		c: c,
	}
}

func (p *AlertClient) Client_() thrift.TClient {
	return p.c
}

func (p *AlertClient) GetAlertList(ctx context.Context, req *AlertFilter) (r []*AlertInfo, err error) {
	var _args AlertGetAlertListArgs
	_args.Req = req
	var _result AlertGetAlertListResult
	if err = p.Client_().Call(ctx, "GetAlertList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AlertClient) GetAlertDetail(ctx context.Context, req *common.Req) (r *AlertInfo, err error) {
	var _args AlertGetAlertDetailArgs
	_args.Req = req
	var _result AlertGetAlertDetailResult
	if err = p.Client_().Call(ctx, "GetAlertDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AlertClient) UpdateAlertInfo(ctx context.Context, req *AlertInfo) (r *AlertInfo, err error) {
	var _args AlertUpdateAlertInfoArgs
	_args.Req = req
	var _result AlertUpdateAlertInfoResult
	if err = p.Client_().Call(ctx, "UpdateAlertInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AlertClient) UploadAlertInfo(ctx context.Context, req *AlertInfo) (r *AlertInfo, err error) {
	var _args AlertUploadAlertInfoArgs
	_args.Req = req
	var _result AlertUploadAlertInfoResult
	if err = p.Client_().Call(ctx, "UploadAlertInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AlertClient) DeleteAlert(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args AlertDeleteAlertArgs
	_args.Req = req
	var _result AlertDeleteAlertResult
	if err = p.Client_().Call(ctx, "DeleteAlert", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type AlertProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      Alert
}

func (p *AlertProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *AlertProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *AlertProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewAlertProcessor(handler Alert) *AlertProcessor {
	self := &AlertProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetAlertList", &alertProcessorGetAlertList{handler: handler})
	self.AddToProcessorMap("GetAlertDetail", &alertProcessorGetAlertDetail{handler: handler})
	self.AddToProcessorMap("UpdateAlertInfo", &alertProcessorUpdateAlertInfo{handler: handler})
	self.AddToProcessorMap("UploadAlertInfo", &alertProcessorUploadAlertInfo{handler: handler})
	self.AddToProcessorMap("DeleteAlert", &alertProcessorDeleteAlert{handler: handler})
	return self
}
func (p *AlertProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type alertProcessorGetAlertList struct {
	handler Alert
}

func (p *alertProcessorGetAlertList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AlertGetAlertListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetAlertList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AlertGetAlertListResult{}
	var retval []*AlertInfo
	if retval, err2 = p.handler.GetAlertList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAlertList: "+err2.Error())
		oprot.WriteMessageBegin("GetAlertList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetAlertList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type alertProcessorGetAlertDetail struct {
	handler Alert
}

func (p *alertProcessorGetAlertDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AlertGetAlertDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetAlertDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AlertGetAlertDetailResult{}
	var retval *AlertInfo
	if retval, err2 = p.handler.GetAlertDetail(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAlertDetail: "+err2.Error())
		oprot.WriteMessageBegin("GetAlertDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetAlertDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type alertProcessorUpdateAlertInfo struct {
	handler Alert
}

func (p *alertProcessorUpdateAlertInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AlertUpdateAlertInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateAlertInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AlertUpdateAlertInfoResult{}
	var retval *AlertInfo
	if retval, err2 = p.handler.UpdateAlertInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateAlertInfo: "+err2.Error())
		oprot.WriteMessageBegin("UpdateAlertInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateAlertInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type alertProcessorUploadAlertInfo struct {
	handler Alert
}

func (p *alertProcessorUploadAlertInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AlertUploadAlertInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UploadAlertInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AlertUploadAlertInfoResult{}
	var retval *AlertInfo
	if retval, err2 = p.handler.UploadAlertInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UploadAlertInfo: "+err2.Error())
		oprot.WriteMessageBegin("UploadAlertInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UploadAlertInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type alertProcessorDeleteAlert struct {
	handler Alert
}

func (p *alertProcessorDeleteAlert) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AlertDeleteAlertArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteAlert", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AlertDeleteAlertResult{}
	var retval *common.Empty
	if retval, err2 = p.handler.DeleteAlert(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteAlert: "+err2.Error())
		oprot.WriteMessageBegin("DeleteAlert", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteAlert", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type AlertGetAlertListArgs struct {
	Req *AlertFilter `thrift:"req,1" frugal:"1,default,AlertFilter" json:"req"`
}

func NewAlertGetAlertListArgs() *AlertGetAlertListArgs {
	return &AlertGetAlertListArgs{}
}

func (p *AlertGetAlertListArgs) InitDefault() {
	*p = AlertGetAlertListArgs{}
}

var AlertGetAlertListArgs_Req_DEFAULT *AlertFilter

func (p *AlertGetAlertListArgs) GetReq() (v *AlertFilter) {
	if !p.IsSetReq() {
		return AlertGetAlertListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AlertGetAlertListArgs) SetReq(val *AlertFilter) {
	p.Req = val
}

var fieldIDToName_AlertGetAlertListArgs = map[int16]string{
	1: "req",
}

func (p *AlertGetAlertListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AlertGetAlertListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AlertGetAlertListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AlertGetAlertListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewAlertFilter()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AlertGetAlertListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAlertList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AlertGetAlertListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AlertGetAlertListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlertGetAlertListArgs(%+v)", *p)
}

func (p *AlertGetAlertListArgs) DeepEqual(ano *AlertGetAlertListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AlertGetAlertListArgs) Field1DeepEqual(src *AlertFilter) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AlertGetAlertListResult struct {
	Success []*AlertInfo `thrift:"success,0,optional" frugal:"0,optional,list<AlertInfo>" json:"success,omitempty"`
}

func NewAlertGetAlertListResult() *AlertGetAlertListResult {
	return &AlertGetAlertListResult{}
}

func (p *AlertGetAlertListResult) InitDefault() {
	*p = AlertGetAlertListResult{}
}

var AlertGetAlertListResult_Success_DEFAULT []*AlertInfo

func (p *AlertGetAlertListResult) GetSuccess() (v []*AlertInfo) {
	if !p.IsSetSuccess() {
		return AlertGetAlertListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AlertGetAlertListResult) SetSuccess(x interface{}) {
	p.Success = x.([]*AlertInfo)
}

var fieldIDToName_AlertGetAlertListResult = map[int16]string{
	0: "success",
}

func (p *AlertGetAlertListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AlertGetAlertListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AlertGetAlertListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AlertGetAlertListResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Success = make([]*AlertInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewAlertInfo()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Success = append(p.Success, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *AlertGetAlertListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAlertList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AlertGetAlertListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return err
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AlertGetAlertListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlertGetAlertListResult(%+v)", *p)
}

func (p *AlertGetAlertListResult) DeepEqual(ano *AlertGetAlertListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AlertGetAlertListResult) Field0DeepEqual(src []*AlertInfo) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for i, v := range p.Success {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type AlertGetAlertDetailArgs struct {
	Req *common.Req `thrift:"req,1" frugal:"1,default,common.Req" json:"req"`
}

func NewAlertGetAlertDetailArgs() *AlertGetAlertDetailArgs {
	return &AlertGetAlertDetailArgs{}
}

func (p *AlertGetAlertDetailArgs) InitDefault() {
	*p = AlertGetAlertDetailArgs{}
}

var AlertGetAlertDetailArgs_Req_DEFAULT *common.Req

func (p *AlertGetAlertDetailArgs) GetReq() (v *common.Req) {
	if !p.IsSetReq() {
		return AlertGetAlertDetailArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AlertGetAlertDetailArgs) SetReq(val *common.Req) {
	p.Req = val
}

var fieldIDToName_AlertGetAlertDetailArgs = map[int16]string{
	1: "req",
}

func (p *AlertGetAlertDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AlertGetAlertDetailArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AlertGetAlertDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AlertGetAlertDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common.NewReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AlertGetAlertDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAlertDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AlertGetAlertDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AlertGetAlertDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlertGetAlertDetailArgs(%+v)", *p)
}

func (p *AlertGetAlertDetailArgs) DeepEqual(ano *AlertGetAlertDetailArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AlertGetAlertDetailArgs) Field1DeepEqual(src *common.Req) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AlertGetAlertDetailResult struct {
	Success *AlertInfo `thrift:"success,0,optional" frugal:"0,optional,AlertInfo" json:"success,omitempty"`
}

func NewAlertGetAlertDetailResult() *AlertGetAlertDetailResult {
	return &AlertGetAlertDetailResult{}
}

func (p *AlertGetAlertDetailResult) InitDefault() {
	*p = AlertGetAlertDetailResult{}
}

var AlertGetAlertDetailResult_Success_DEFAULT *AlertInfo

func (p *AlertGetAlertDetailResult) GetSuccess() (v *AlertInfo) {
	if !p.IsSetSuccess() {
		return AlertGetAlertDetailResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AlertGetAlertDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*AlertInfo)
}

var fieldIDToName_AlertGetAlertDetailResult = map[int16]string{
	0: "success",
}

func (p *AlertGetAlertDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AlertGetAlertDetailResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AlertGetAlertDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AlertGetAlertDetailResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewAlertInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AlertGetAlertDetailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAlertDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AlertGetAlertDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AlertGetAlertDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlertGetAlertDetailResult(%+v)", *p)
}

func (p *AlertGetAlertDetailResult) DeepEqual(ano *AlertGetAlertDetailResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AlertGetAlertDetailResult) Field0DeepEqual(src *AlertInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AlertUpdateAlertInfoArgs struct {
	Req *AlertInfo `thrift:"req,1" frugal:"1,default,AlertInfo" json:"req"`
}

func NewAlertUpdateAlertInfoArgs() *AlertUpdateAlertInfoArgs {
	return &AlertUpdateAlertInfoArgs{}
}

func (p *AlertUpdateAlertInfoArgs) InitDefault() {
	*p = AlertUpdateAlertInfoArgs{}
}

var AlertUpdateAlertInfoArgs_Req_DEFAULT *AlertInfo

func (p *AlertUpdateAlertInfoArgs) GetReq() (v *AlertInfo) {
	if !p.IsSetReq() {
		return AlertUpdateAlertInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AlertUpdateAlertInfoArgs) SetReq(val *AlertInfo) {
	p.Req = val
}

var fieldIDToName_AlertUpdateAlertInfoArgs = map[int16]string{
	1: "req",
}

func (p *AlertUpdateAlertInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AlertUpdateAlertInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AlertUpdateAlertInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AlertUpdateAlertInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewAlertInfo()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AlertUpdateAlertInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateAlertInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AlertUpdateAlertInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AlertUpdateAlertInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlertUpdateAlertInfoArgs(%+v)", *p)
}

func (p *AlertUpdateAlertInfoArgs) DeepEqual(ano *AlertUpdateAlertInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AlertUpdateAlertInfoArgs) Field1DeepEqual(src *AlertInfo) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AlertUpdateAlertInfoResult struct {
	Success *AlertInfo `thrift:"success,0,optional" frugal:"0,optional,AlertInfo" json:"success,omitempty"`
}

func NewAlertUpdateAlertInfoResult() *AlertUpdateAlertInfoResult {
	return &AlertUpdateAlertInfoResult{}
}

func (p *AlertUpdateAlertInfoResult) InitDefault() {
	*p = AlertUpdateAlertInfoResult{}
}

var AlertUpdateAlertInfoResult_Success_DEFAULT *AlertInfo

func (p *AlertUpdateAlertInfoResult) GetSuccess() (v *AlertInfo) {
	if !p.IsSetSuccess() {
		return AlertUpdateAlertInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AlertUpdateAlertInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*AlertInfo)
}

var fieldIDToName_AlertUpdateAlertInfoResult = map[int16]string{
	0: "success",
}

func (p *AlertUpdateAlertInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AlertUpdateAlertInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AlertUpdateAlertInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AlertUpdateAlertInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewAlertInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AlertUpdateAlertInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateAlertInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AlertUpdateAlertInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AlertUpdateAlertInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlertUpdateAlertInfoResult(%+v)", *p)
}

func (p *AlertUpdateAlertInfoResult) DeepEqual(ano *AlertUpdateAlertInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AlertUpdateAlertInfoResult) Field0DeepEqual(src *AlertInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AlertUploadAlertInfoArgs struct {
	Req *AlertInfo `thrift:"req,1" frugal:"1,default,AlertInfo" json:"req"`
}

func NewAlertUploadAlertInfoArgs() *AlertUploadAlertInfoArgs {
	return &AlertUploadAlertInfoArgs{}
}

func (p *AlertUploadAlertInfoArgs) InitDefault() {
	*p = AlertUploadAlertInfoArgs{}
}

var AlertUploadAlertInfoArgs_Req_DEFAULT *AlertInfo

func (p *AlertUploadAlertInfoArgs) GetReq() (v *AlertInfo) {
	if !p.IsSetReq() {
		return AlertUploadAlertInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AlertUploadAlertInfoArgs) SetReq(val *AlertInfo) {
	p.Req = val
}

var fieldIDToName_AlertUploadAlertInfoArgs = map[int16]string{
	1: "req",
}

func (p *AlertUploadAlertInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AlertUploadAlertInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AlertUploadAlertInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AlertUploadAlertInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewAlertInfo()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AlertUploadAlertInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UploadAlertInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AlertUploadAlertInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AlertUploadAlertInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlertUploadAlertInfoArgs(%+v)", *p)
}

func (p *AlertUploadAlertInfoArgs) DeepEqual(ano *AlertUploadAlertInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AlertUploadAlertInfoArgs) Field1DeepEqual(src *AlertInfo) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AlertUploadAlertInfoResult struct {
	Success *AlertInfo `thrift:"success,0,optional" frugal:"0,optional,AlertInfo" json:"success,omitempty"`
}

func NewAlertUploadAlertInfoResult() *AlertUploadAlertInfoResult {
	return &AlertUploadAlertInfoResult{}
}

func (p *AlertUploadAlertInfoResult) InitDefault() {
	*p = AlertUploadAlertInfoResult{}
}

var AlertUploadAlertInfoResult_Success_DEFAULT *AlertInfo

func (p *AlertUploadAlertInfoResult) GetSuccess() (v *AlertInfo) {
	if !p.IsSetSuccess() {
		return AlertUploadAlertInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AlertUploadAlertInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*AlertInfo)
}

var fieldIDToName_AlertUploadAlertInfoResult = map[int16]string{
	0: "success",
}

func (p *AlertUploadAlertInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AlertUploadAlertInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AlertUploadAlertInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AlertUploadAlertInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewAlertInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AlertUploadAlertInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UploadAlertInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AlertUploadAlertInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AlertUploadAlertInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlertUploadAlertInfoResult(%+v)", *p)
}

func (p *AlertUploadAlertInfoResult) DeepEqual(ano *AlertUploadAlertInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AlertUploadAlertInfoResult) Field0DeepEqual(src *AlertInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AlertDeleteAlertArgs struct {
	Req *common.Req `thrift:"req,1" frugal:"1,default,common.Req" json:"req"`
}

func NewAlertDeleteAlertArgs() *AlertDeleteAlertArgs {
	return &AlertDeleteAlertArgs{}
}

func (p *AlertDeleteAlertArgs) InitDefault() {
	*p = AlertDeleteAlertArgs{}
}

var AlertDeleteAlertArgs_Req_DEFAULT *common.Req

func (p *AlertDeleteAlertArgs) GetReq() (v *common.Req) {
	if !p.IsSetReq() {
		return AlertDeleteAlertArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AlertDeleteAlertArgs) SetReq(val *common.Req) {
	p.Req = val
}

var fieldIDToName_AlertDeleteAlertArgs = map[int16]string{
	1: "req",
}

func (p *AlertDeleteAlertArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AlertDeleteAlertArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AlertDeleteAlertArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AlertDeleteAlertArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common.NewReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AlertDeleteAlertArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteAlert_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AlertDeleteAlertArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AlertDeleteAlertArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlertDeleteAlertArgs(%+v)", *p)
}

func (p *AlertDeleteAlertArgs) DeepEqual(ano *AlertDeleteAlertArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AlertDeleteAlertArgs) Field1DeepEqual(src *common.Req) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AlertDeleteAlertResult struct {
	Success *common.Empty `thrift:"success,0,optional" frugal:"0,optional,common.Empty" json:"success,omitempty"`
}

func NewAlertDeleteAlertResult() *AlertDeleteAlertResult {
	return &AlertDeleteAlertResult{}
}

func (p *AlertDeleteAlertResult) InitDefault() {
	*p = AlertDeleteAlertResult{}
}

var AlertDeleteAlertResult_Success_DEFAULT *common.Empty

func (p *AlertDeleteAlertResult) GetSuccess() (v *common.Empty) {
	if !p.IsSetSuccess() {
		return AlertDeleteAlertResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AlertDeleteAlertResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.Empty)
}

var fieldIDToName_AlertDeleteAlertResult = map[int16]string{
	0: "success",
}

func (p *AlertDeleteAlertResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AlertDeleteAlertResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AlertDeleteAlertResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AlertDeleteAlertResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmpty()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AlertDeleteAlertResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteAlert_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AlertDeleteAlertResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AlertDeleteAlertResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlertDeleteAlertResult(%+v)", *p)
}

func (p *AlertDeleteAlertResult) DeepEqual(ano *AlertDeleteAlertResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AlertDeleteAlertResult) Field0DeepEqual(src *common.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
