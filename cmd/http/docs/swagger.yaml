definitions:
  example.AlertData:
    properties:
      count:
        example: 50
        type: integer
      desc:
        example: hello,alert
        type: string
      device_id:
        example: 1
        type: integer
      first_alarm:
        example: "2023-12-22 15:16:00"
        type: string
      id:
        example: 1
        type: integer
      is_ongoing:
        example: true
        type: boolean
      last_alarm:
        example: "2023-12-30 15:16:00"
        type: string
      level:
        example: 1
        type: integer
    type: object
  example.AuthData:
    properties:
      expired_at:
        example: "2023-12-25T14:59:11.322480873+08:00"
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MDM0ODc1NTEsIm9yaWdfaWF0IjoxNzAzNDgzOTUxLCJ1aWQiOjN9.J5sOSjOPIgifaTpGIqzfZV3vi1ZRD6WnOJV3fok_ltk
        type: string
    type: object
  example.DeviceData:
    properties:
      desc:
        example: test
        type: string
      hardware_version:
        example: 1.0.0
        type: string
      id:
        example: 1
        type: integer
      location_id:
        example: "1"
        type: string
      name:
        example: test
        type: string
      owner_id:
        example: 1
        type: integer
      product_id:
        example: 1
        type: integer
      serial_no:
        example: "1234567890123456"
        type: string
      software_version:
        example: 1.0.0
        type: string
      state:
        example: 1
        type: integer
    type: object
  example.MiniProgLoginBody:
    properties:
      wxCode:
        example: wx1234567890abcdef1234567890abcdef
        type: string
    type: object
  example.MobileLoginBody:
    properties:
      mobile:
        example: "19535876981"
        type: string
      smsCode:
        example: "123456"
        type: string
    type: object
  example.MobileRegisterBody:
    properties:
      mobile:
        example: "19535876981"
        type: string
      password:
        example: "12345678"
        type: string
      smsCode:
        example: "123456"
        type: string
      username:
        example: demon_wang
        type: string
    type: object
  example.PwdLoginBody:
    properties:
      password:
        description: '2: required string Email (api.body="email", api.vd="regexp(''^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$'')");'
        example: "12345678"
        type: string
      username:
        example: demon_wang
        type: string
    type: object
  example.RespBadRequest:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: bad request
        type: string
      success:
        example: false
        type: boolean
    type: object
  example.RespConflict:
    properties:
      code:
        example: 409
        type: integer
      message:
        example: account already exists
        type: string
      success:
        example: false
        type: boolean
    type: object
  example.RespInternal:
    properties:
      code:
        example: 500
        type: integer
      message:
        example: internal error
        type: string
      success:
        example: false
        type: boolean
    type: object
  example.RespNotFound:
    properties:
      code:
        example: 404
        type: integer
      message:
        example: not found
        type: string
      success:
        example: false
        type: boolean
    type: object
  example.RespOk:
    properties:
      code:
        example: 200
        type: integer
      message:
        example: ok
        type: string
      success:
        example: true
        type: boolean
    type: object
  example.RespUnauthorized:
    properties:
      code:
        example: 401
        type: integer
      message:
        example: authentication fails
        type: string
      success:
        example: false
        type: boolean
    type: object
  example.UserData:
    properties:
      age:
        example: 18
        type: integer
      avatar:
        example: ""
        type: string
      email:
        example: wwwwwdemon@gmail.com
        type: string
      gender:
        example: 1
        type: integer
      id:
        example: 1
        type: integer
      mobile:
        example: "19535876981"
        type: string
      password:
        example: "12345678"
        type: string
      profile:
        example: hello,world
        type: string
      username:
        example: lilhammer111
        type: string
    type: object
  example.UsernameRegisterBody:
    properties:
      password:
        example: "12345678"
        type: string
      username:
        example: demon_wang
        type: string
    type: object
info:
  contact: {}
paths:
  /api/auth/mini_prog_login:
    post:
      consumes:
      - application/json
      operationId: LoginByMiniProg
      parameters:
      - description: mini program login
        in: body
        name: mini_login
        required: true
        schema:
          $ref: '#/definitions/example.MiniProgLoginBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.AuthData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: user login by mini program
      tags:
      - auth
  /api/auth/mobile_login:
    post:
      consumes:
      - application/json
      operationId: LoginByMobile
      parameters:
      - description: mobile login form
        in: body
        name: mobile_login
        required: true
        schema:
          $ref: '#/definitions/example.MobileLoginBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.AuthData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: user login by mobile number and sms code
      tags:
      - auth
  /api/auth/mobile_register:
    post:
      consumes:
      - application/json
      operationId: RegisterByMobile
      parameters:
      - description: mobile register form
        in: body
        name: mobile_register
        required: true
        schema:
          $ref: '#/definitions/example.MobileRegisterBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.AuthData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "409":
          description: account already exists
          schema:
            $ref: '#/definitions/example.RespConflict'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: user register by mobile, sms code and password
      tags:
      - auth
  /api/auth/pwd_login:
    post:
      consumes:
      - application/json
      operationId: LoginByPwd
      parameters:
      - description: password
        in: body
        name: pwd_login
        required: true
        schema:
          $ref: '#/definitions/example.PwdLoginBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.AuthData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: user login by username and password
      tags:
      - auth
  /api/auth/send_sms:
    get:
      operationId: SendSms
      parameters:
      - description: mobile number
        in: query
        name: mobile
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/example.RespOk'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: ask aliyun to send sms
      tags:
      - captcha
  /api/auth/username_register:
    post:
      consumes:
      - application/json
      operationId: RegisterByUsername
      parameters:
      - description: register form
        in: body
        name: pwd_register_req
        required: true
        schema:
          $ref: '#/definitions/example.UsernameRegisterBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.AuthData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "409":
          description: account already exists
          schema:
            $ref: '#/definitions/example.RespConflict'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: user register by username and password
      tags:
      - auth
  /api/devices/alerts/delete:
    delete:
      operationId: DeleteAlert
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: alert id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/example.RespOk'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: delete alert info
      tags:
      - alerts
  /api/devices/alerts/detail:
    get:
      operationId: GetAlertDetail
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.AlertData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get alert detail
      tags:
      - alerts
  /api/devices/alerts/list:
    get:
      operationId: GetAlertList
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      - description: device id
        in: query
        name: device_id
        type: string
      - description: level
        in: query
        name: level
        type: string
      - description: sorts
        in: query
        name: sorts
        type: string
      - description: start date
        in: query
        name: start_date
        type: string
      - description: end date
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.AlertData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get alert list
      tags:
      - alerts
  /api/devices/alerts/update:
    put:
      operationId: UpdateAlertInfo
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: alert data
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/example.AlertData'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.AlertData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: update alert info
      tags:
      - alerts
  /api/devices/alerts/upload:
    post:
      operationId: UploadAlertInfo
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: alert data
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/example.AlertData'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.AlertData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: upload alert info
      tags:
      - alerts
  /api/devices/bind:
    post:
      operationId: BindDevice
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: device data
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/example.DeviceData'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.DeviceData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: bind device info
      tags:
      - devices
  /api/devices/detail:
    get:
      operationId: GetDeviceDetail
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.DeviceData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get device detail
      tags:
      - devices
  /api/devices/list:
    get:
      operationId: GetDeviceList
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      - description: state
        in: query
        name: state
        type: string
      - description: sorts
        in: query
        name: state
        type: string
      - description: search
        in: query
        name: state
        type: string
      - description: start_date
        in: query
        name: state
        type: string
      - description: end_date
        in: query
        name: state
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.DeviceData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get device list
      tags:
      - devices
  /api/devices/unbind:
    delete:
      operationId: UnbindDevice
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: device id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/example.RespOk'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: unbind device
      tags:
      - devices
  /api/devices/update:
    put:
      operationId: UpdateDeviceInfo
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: device data
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/example.DeviceData'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.DeviceData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: update device info
      tags:
      - devices
  /api/users/current:
    get:
      operationId: GetCurUserInfo
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.UserData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get current user info
      tags:
      - users
  /api/users/deregister:
    delete:
      operationId: DeregisterUser
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: user id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/example.RespOk'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: deregister user
      tags:
      - users
  /api/users/detail:
    get:
      operationId: GetUserDetail
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.UserData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get users detail
      tags:
      - users
  /api/users/list:
    get:
      operationId: GetUserList
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.UserData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get users list
      tags:
      - users
  /api/users/update:
    put:
      operationId: UpdateUserInfo
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: user data
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/example.UserData'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.UserData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: update user info
      tags:
      - users
swagger: "2.0"
