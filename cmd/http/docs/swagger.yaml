definitions:
  example.AddModelBody:
    properties:
      name:
        example: 豪华旗舰款
        type: string
    type: object
  example.AddProductData:
    properties:
      brand_id:
        example: 20
        type: integer
      brief:
        example: Product Description
        type: string
      category_id:
        example: 10
        type: integer
      model_list:
        example:
        - model1
        - model2
        - model3
        items:
          type: string
        type: array
      name:
        example: Product Name
        type: string
      picture:
        example: https://example.com/picture.jpg
        type: string
      price:
        example: 99.99
        type: number
      showcase:
        example:
        - https://example.com/showcase1.jpg
        - https://example.com/showcase2.jpg
        items:
          type: string
        type: array
    type: object
  example.AlertData:
    properties:
      count:
        example: 50
        type: integer
      desc:
        example: hello,alert
        type: string
      device_id:
        example: 1
        type: integer
      first_alarm:
        example: "2023-12-22 15:16:00"
        type: string
      id:
        example: 1
        type: integer
      is_ongoing:
        example: true
        type: boolean
      last_alarm:
        example: "2023-12-30 15:16:00"
        type: string
      level:
        example: 1
        type: integer
    type: object
  example.AuthData:
    properties:
      expired_at:
        example: "2023-12-25T14:59:11.322480873+08:00"
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MDM0ODc1NTEsIm9yaWdfaWF0IjoxNzAzNDgzOTUxLCJ1aWQiOjN9.J5sOSjOPIgifaTpGIqzfZV3vi1ZRD6WnOJV3fok_ltk
        type: string
    type: object
  example.BannerData:
    properties:
      id:
        example: 1
        type: integer
      index:
        example: 1
        type: integer
      picture:
        example: https://img.freepik.com/free-psd/bold-gradients-banner-template_23-2148819008.jpg?t=st=1703601665~exp=1703602265~hmac=84f6d13b72f5e743e64c58166cfe6323de3809450b6dfa9340cb80ab5e455a51
        type: string
      product_link:
        example: https://pet.service.com/prodcut-link
        type: string
    type: object
  example.BrandData:
    properties:
      id:
        example: 1
        type: integer
      logo:
        example: https://upload.wikimedia.org/wikipedia/commons/2/29/Xiaomi_logo.svg
        type: string
      name:
        example: xiaomi
        type: string
    type: object
  example.CategoryBrandData:
    properties:
      brand_id:
        example: 5
        type: integer
      category_id:
        example: 10
        type: integer
      id:
        example: 123
        type: integer
    type: object
  example.CategoryData:
    properties:
      brief:
        example: An automated feeder for pets
        type: string
      id:
        example: 1
        type: integer
      name:
        example: smart pet feeder
        type: string
      picture:
        example: https://example.com/pet_feeder.jpg
        type: string
      showcase:
        example:
        - https://example.com/showcase1.jpg
        - ' https://example.com/showcase2.jpg'
        items:
          type: string
        type: array
    type: object
  example.DeviceData:
    properties:
      desc:
        example: test
        type: string
      hardware_version:
        example: 1.0.0
        type: string
      id:
        example: 1
        type: integer
      location_id:
        example: "1"
        type: string
      name:
        example: test
        type: string
      owner_id:
        example: 1
        type: integer
      product_id:
        example: 1
        type: integer
      serial_no:
        example: "1234567890123456"
        type: string
      software_version:
        example: 1.0.0
        type: string
      state:
        example: 1
        type: integer
    type: object
  example.Empty:
    type: object
  example.MiniProgLoginBody:
    properties:
      wxCode:
        example: wx1234567890abcdef1234567890abcdef
        type: string
    type: object
  example.MobileLoginBody:
    properties:
      mobile:
        example: "19535876981"
        type: string
      smsCode:
        example: "123456"
        type: string
    type: object
  example.MobileRegisterBody:
    properties:
      mobile:
        example: "19535876981"
        type: string
      password:
        example: "12345678"
        type: string
      smsCode:
        example: "123456"
        type: string
      username:
        example: demon_wang
        type: string
    type: object
  example.ModelData:
    properties:
      id:
        example: 1
        type: integer
      name:
        example: 豪华旗舰款
        type: string
    type: object
  example.NewBannerBody:
    properties:
      index:
        example: 1
        type: integer
      picture:
        example: https://img.freepik.com/free-psd/bold-gradients-banner-template_23-2148819008.jpg?t=st=1703601665~exp=1703602265~hmac=84f6d13b72f5e743e64c58166cfe6323de3809450b6dfa9340cb80ab5e455a51
        type: string
      product_link:
        example: https://pet.service.com/prodcut-link
        type: string
    type: object
  example.NewBrandBody:
    properties:
      logo:
        example: https://upload.wikimedia.org/wikipedia/commons/2/29/Xiaomi_logo.svg
        type: string
      name:
        example: xiaomi
        type: string
    type: object
  example.NewCategoryBody:
    properties:
      brief:
        example: An automated feeder for pets
        type: string
      name:
        example: smart pet feeder
        type: string
      picture:
        example: https://example.com/pet_feeder.jpg
        type: string
      showcase:
        example:
        - https://example.com/showcase1.jpg
        - ' https://example.com/showcase2.jpg'
        items:
          type: string
        type: array
    type: object
  example.NewCategoryBrandBody:
    properties:
      brand_id:
        example: 5
        type: integer
      category_id:
        example:
        - 10
        - 11
        - 12
        items:
          type: integer
        type: array
    type: object
  example.ProductState:
    properties:
      is_free_shipping:
        example: false
        type: boolean
      is_hot:
        example: false
        type: boolean
      is_new:
        example: true
        type: boolean
      is_recommended:
        example: true
        type: boolean
      on_sale:
        example: true
        type: boolean
    type: object
  example.PwdLoginBody:
    properties:
      password:
        description: '2: required string Email (api.body="email", api.vd="regexp(''^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$'')");'
        example: "12345678"
        type: string
      username:
        example: demon_wang
        type: string
    type: object
  example.RatingData:
    properties:
      product_id:
        example: 1
        type: integer
      rating:
        example: 4.5
        type: number
      total_customer:
        example: 250
        type: integer
    type: object
  example.RespBadRequest:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: Bad request.
        type: string
      success:
        example: false
        type: boolean
    type: object
  example.RespConflict:
    properties:
      code:
        example: 409
        type: integer
      message:
        example: Already exists.
        type: string
      success:
        example: false
        type: boolean
    type: object
  example.RespCreated:
    properties:
      code:
        example: 201
        type: integer
      message:
        example: Creating successes.
        type: string
      success:
        example: true
        type: boolean
    type: object
  example.RespInternal:
    properties:
      code:
        example: 500
        type: integer
      message:
        example: Internal server error.
        type: string
      success:
        example: false
        type: boolean
    type: object
  example.RespNoContent:
    properties:
      code:
        example: 204
        type: integer
      message:
        example: Deleting successes.
        type: string
      success:
        example: true
        type: boolean
    type: object
  example.RespNotFound:
    properties:
      code:
        example: 404
        type: integer
      message:
        example: Not found.
        type: string
      success:
        example: false
        type: boolean
    type: object
  example.RespOk:
    properties:
      code:
        example: 200
        type: integer
      message:
        example: OK.
        type: string
      success:
        example: true
        type: boolean
    type: object
  example.RespUnauthorized:
    properties:
      code:
        example: 401
        type: integer
      message:
        example: Authentication fails.
        type: string
      success:
        example: false
        type: boolean
    type: object
  example.UpdateProductData:
    properties:
      brand_id:
        example: 20
        type: integer
      brief:
        example: Product Description
        type: string
      category_id:
        example: 10
        type: integer
      id:
        example: 1
        type: integer
      model_list:
        example:
        - model1
        - model2
        - model3
        items:
          type: string
        type: array
      name:
        example: Product Name
        type: string
      picture:
        example: https://example.com/picture.jpg
        type: string
      price:
        example: 99.99
        type: number
      showcase:
        example:
        - https://example.com/showcase1.jpg
        - https://example.com/showcase2.jpg
        items:
          type: string
        type: array
    type: object
  example.UpdateRatingData:
    properties:
      product_id:
        example: 1
        type: integer
      rating:
        example: 4.5
        type: number
    type: object
  example.UserData:
    properties:
      age:
        example: 18
        type: integer
      avatar:
        example: ""
        type: string
      email:
        example: wwwwwdemon@gmail.com
        type: string
      gender:
        example: 1
        type: integer
      id:
        example: 1
        type: integer
      mobile:
        example: "19535876981"
        type: string
      password:
        example: "12345678"
        type: string
      profile:
        example: hello,world
        type: string
      username:
        example: lilhammer111
        type: string
    type: object
  example.UsernameRegisterBody:
    properties:
      password:
        example: "12345678"
        type: string
      username:
        example: demon_wang
        type: string
    type: object
info:
  contact: {}
paths:
  /api/auth/mini_prog_login:
    post:
      consumes:
      - application/json
      operationId: LoginByMiniProg
      parameters:
      - description: mini program login
        in: body
        name: mini_login
        required: true
        schema:
          $ref: '#/definitions/example.MiniProgLoginBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.AuthData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: user login by mini program
      tags:
      - auth
  /api/auth/mobile_login:
    post:
      consumes:
      - application/json
      operationId: LoginByMobile
      parameters:
      - description: mobile login form
        in: body
        name: mobile_login
        required: true
        schema:
          $ref: '#/definitions/example.MobileLoginBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.AuthData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: user login by mobile number and sms code
      tags:
      - auth
  /api/auth/mobile_register:
    post:
      consumes:
      - application/json
      operationId: RegisterByMobile
      parameters:
      - description: mobile register form
        in: body
        name: mobile_register
        required: true
        schema:
          $ref: '#/definitions/example.MobileRegisterBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.AuthData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "409":
          description: account already exists
          schema:
            $ref: '#/definitions/example.RespConflict'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: user register by mobile, sms code and password
      tags:
      - auth
  /api/auth/pwd_login:
    post:
      consumes:
      - application/json
      operationId: LoginByPwd
      parameters:
      - description: password
        in: body
        name: pwd_login
        required: true
        schema:
          $ref: '#/definitions/example.PwdLoginBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.AuthData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: user login by username and password
      tags:
      - auth
  /api/auth/send_sms:
    get:
      operationId: SendSms
      parameters:
      - description: mobile number
        in: query
        name: mobile
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/example.RespOk'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: ask aliyun to send sms
      tags:
      - captcha
  /api/auth/username_register:
    post:
      consumes:
      - application/json
      operationId: RegisterByUsername
      parameters:
      - description: register form
        in: body
        name: pwd_register_req
        required: true
        schema:
          $ref: '#/definitions/example.UsernameRegisterBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.AuthData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "409":
          description: account already exists
          schema:
            $ref: '#/definitions/example.RespConflict'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: user register by username and password
      tags:
      - auth
  /api/devices/alerts/delete:
    delete:
      operationId: DeleteAlert
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: alert id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/example.RespOk'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: delete alert info
      tags:
      - alerts
  /api/devices/alerts/detail:
    get:
      operationId: GetAlertDetail
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.AlertData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get alert detail
      tags:
      - alerts
  /api/devices/alerts/list:
    get:
      operationId: GetAlertList
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      - description: device id
        in: query
        name: device_id
        type: string
      - description: level
        in: query
        name: level
        type: string
      - description: sorts
        in: query
        name: sorts
        type: string
      - description: start date
        in: query
        name: start_date
        type: string
      - description: end date
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.AlertData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get alert list
      tags:
      - alerts
  /api/devices/alerts/update:
    put:
      operationId: UpdateAlertInfo
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: alert data
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/example.AlertData'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.AlertData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: update alert info
      tags:
      - alerts
  /api/devices/alerts/upload:
    post:
      operationId: UploadAlertInfo
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: alert data
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/example.AlertData'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.AlertData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: upload alert info
      tags:
      - alerts
  /api/devices/bind:
    post:
      operationId: BindDevice
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: device data
        in: body
        name: devices
        required: true
        schema:
          $ref: '#/definitions/example.DeviceData'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.DeviceData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: bind device info
      tags:
      - devices
  /api/devices/detail:
    get:
      operationId: GetDeviceDetail
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.DeviceData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get device detail
      tags:
      - devices
  /api/devices/list:
    get:
      operationId: GetDeviceList
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      - description: state
        in: query
        name: state
        type: string
      - description: sorts
        in: query
        name: state
        type: string
      - description: search
        in: query
        name: state
        type: string
      - description: start_date
        in: query
        name: state
        type: string
      - description: end_date
        in: query
        name: state
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/example.DeviceData'
                  type: array
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get device list
      tags:
      - devices
  /api/devices/unbind:
    delete:
      operationId: UnbindDevice
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: device id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: success
          schema:
            $ref: '#/definitions/example.RespNoContent'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: unbind device
      tags:
      - devices
  /api/devices/update:
    put:
      operationId: UpdateDeviceInfo
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: device data
        in: body
        name: devices
        required: true
        schema:
          $ref: '#/definitions/example.DeviceData'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.DeviceData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: update device info
      tags:
      - devices
  /api/products/add:
    post:
      operationId: AddNewProduct
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: product data
        in: body
        name: product
        required: true
        schema:
          allOf:
          - $ref: '#/definitions/example.AddProductData'
          - properties:
              state:
                $ref: '#/definitions/example.ProductState'
            type: object
      produces:
      - application/json
      responses:
        "201":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespCreated'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/example.UpdateProductData'
                  - properties:
                      state:
                        $ref: '#/definitions/example.ProductState'
                    type: object
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: add a new product
      tags:
      - products
  /api/products/banners/add:
    post:
      operationId: AddNewBanner
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: banner data
        in: body
        name: banner
        required: true
        schema:
          $ref: '#/definitions/example.NewBannerBody'
      produces:
      - application/json
      responses:
        "201":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespCreated'
            - properties:
                data:
                  $ref: '#/definitions/example.BannerData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: bind banner info
      tags:
      - product banners
  /api/products/banners/delete:
    delete:
      operationId: DeleteBanner
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: banner id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.Empty'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: delete a product banner
      tags:
      - product banners
  /api/products/banners/list:
    get:
      operationId: GetAllBanners
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/example.BannerData'
                  type: array
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get all banners
      tags:
      - product banners
  /api/products/banners/update:
    put:
      operationId: UpdateBanner
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: banner data
        in: body
        name: banner
        required: true
        schema:
          $ref: '#/definitions/example.BannerData'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.BannerData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: update banner info
      tags:
      - product banners
  /api/products/brands/add:
    post:
      operationId: AddNewBrand
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: brand data
        in: body
        name: brand
        required: true
        schema:
          $ref: '#/definitions/example.NewBrandBody'
      produces:
      - application/json
      responses:
        "201":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespCreated'
            - properties:
                data:
                  $ref: '#/definitions/example.DeviceData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: bind brand info
      tags:
      - product brands
  /api/products/brands/all:
    get:
      operationId: GetBrandList
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/example.BrandData'
                  type: array
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get brand list
      tags:
      - product brands
  /api/products/brands/delete:
    delete:
      operationId: DeleteBrand
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: success
          schema:
            $ref: '#/definitions/example.RespNoContent'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: delete brand record
      tags:
      - product brands
  /api/products/brands/detail:
    get:
      operationId: GetBrandDetail
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.BrandData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get brand detail
      tags:
      - product brands
  /api/products/brands/related:
    get:
      operationId: GetRelatedBrandsByCategoryId
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: category_id
        in: query
        name: category_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/example.BrandData'
                  type: array
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get brands list by category id
      tags:
      - product brands
  /api/products/brands/update:
    put:
      operationId: UpdateBrand
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: brand data
        in: body
        name: brand
        required: true
        schema:
          $ref: '#/definitions/example.BrandData'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.BrandData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: update brand info
      tags:
      - product brands
  /api/products/categories/add:
    post:
      operationId: AddNewCategory
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/example.NewCategoryBody'
      produces:
      - application/json
      responses:
        "201":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespCreated'
            - properties:
                data:
                  $ref: '#/definitions/example.CategoryData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: add a new category
      tags:
      - product categories
  /api/products/categories/delete:
    delete:
      operationId: DeleteCategory
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: success
          schema:
            $ref: '#/definitions/example.RespNoContent'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: delete category record
      tags:
      - product categories
  /api/products/categories/detail:
    get:
      operationId: GetCategoryDetail
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.CategoryData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get category detail
      tags:
      - product categories
  /api/products/categories/list:
    get:
      operationId: GetCategoryList
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/example.CategoryData'
                  type: array
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get category list
      tags:
      - product categories
  /api/products/categories/update:
    put:
      operationId: UpdateCategory
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/example.CategoryData'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.CategoryData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: update category info
      tags:
      - product categories
  /api/products/category_brand/batch_add:
    post:
      operationId: BatchAddCategoryBrand
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: category_brand data
        in: body
        name: category_brand
        required: true
        schema:
          $ref: '#/definitions/example.NewCategoryBrandBody'
      produces:
      - application/json
      responses:
        "201":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespCreated'
            - properties:
                data:
                  $ref: '#/definitions/example.CategoryBrandData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: add related categories in batch by brand id
      tags:
      - product category_brand
  /api/products/category_brand/batch_reduce:
    delete:
      operationId: BatchReduceCategoryBrand
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: category data
        in: body
        name: category_brand
        required: true
        schema:
          $ref: '#/definitions/example.NewCategoryBrandBody'
      produces:
      - application/json
      responses:
        "201":
          description: success
          schema:
            $ref: '#/definitions/example.RespNoContent'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: reduce related categories in batch by brand id
      tags:
      - product category_brand
  /api/products/category_brand/delete_brand:
    delete:
      operationId: DeleteBrandByCategory
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: success
          schema:
            $ref: '#/definitions/example.RespNoContent'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: delete related brand by category id
      tags:
      - product category_brand
  /api/products/category_brand/delete_category:
    delete:
      operationId: DeleteCategoryByBrand
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: success
          schema:
            $ref: '#/definitions/example.RespNoContent'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: delete related category by brand id
      tags:
      - product category_brand
  /api/products/delete:
    delete:
      operationId: DeleteProduct
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: success
          schema:
            $ref: '#/definitions/example.RespNoContent'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: delete product
      tags:
      - products
  /api/products/detail:
    get:
      operationId: GetProductDetail
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.UpdateProductData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get product detail
      tags:
      - products
  /api/products/list:
    get:
      operationId: GetProductList
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      - description: Category ID to filter products
        in: query
        name: category_id
        type: integer
      - collectionFormat: csv
        description: List of Brand IDs to filter products
        in: query
        items:
          type: integer
        name: brand_id_list
        type: array
      - description: Set to true for ascending price sorting, false for descending
        in: query
        name: is_price_asc
        type: boolean
      - description: Set to true for ascending rating sorting, false for descending
        in: query
        name: is_rating_asc
        type: boolean
      - description: Set to true to filter products that are on sale
        in: query
        name: on_sale
        type: boolean
      - description: Set to true to filter products with free shipping
        in: query
        name: is_free_shipping
        type: boolean
      - description: Set to true to filter new products
        in: query
        name: is_new
        type: boolean
      - description: Set to true to filter hot products
        in: query
        name: is_hot
        type: boolean
      - description: Set to true to filter recommended products
        in: query
        name: is_recommended
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  items:
                    allOf:
                    - $ref: '#/definitions/example.UpdateProductData'
                    - properties:
                        state:
                          $ref: '#/definitions/example.ProductState'
                      type: object
                  type: array
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get product list
      tags:
      - products
  /api/products/models/add:
    post:
      operationId: AddNewModel
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: model request body
        in: body
        name: models
        required: true
        schema:
          $ref: '#/definitions/example.AddModelBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.ModelData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: add a new product model
      tags:
      - product models
  /api/products/models/delete:
    delete:
      operationId: DeleteModel
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: model id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.Empty'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: delete a product model
      tags:
      - product models
  /api/products/models/detail:
    get:
      operationId: GetModelDetail
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.DeviceData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get product model detail
      tags:
      - product models
  /api/products/models/list:
    get:
      operationId: GetAllModels
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/example.ModelData'
                  type: array
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get all models
      tags:
      - product models
  /api/products/rating/update:
    put:
      operationId: UpdateRating
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: product rating data
        in: body
        name: rating
        required: true
        schema:
          $ref: '#/definitions/example.UpdateRatingData'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.RatingData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: update product rating info
      tags:
      - products
  /api/products/update:
    put:
      operationId: UpdateProduct
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/example.UpdateProductData'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.UpdateProductData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: update product info
      tags:
      - products
  /api/users/current:
    get:
      operationId: GetCurUserInfo
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.UserData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get current user info
      tags:
      - users
  /api/users/deregister:
    delete:
      operationId: DeregisterUser
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: user id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/example.RespOk'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: deregister user
      tags:
      - users
  /api/users/detail:
    get:
      operationId: GetUserDetail
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.UserData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get users detail
      tags:
      - users
  /api/users/list:
    get:
      operationId: GetUserList
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.UserData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: get users list
      tags:
      - users
  /api/users/update:
    put:
      operationId: UpdateUserInfo
      parameters:
      - description: Bearer User's access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: user data
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/example.UserData'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/example.RespOk'
            - properties:
                data:
                  $ref: '#/definitions/example.UserData'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/example.RespBadRequest'
        "401":
          description: authentication failed
          schema:
            $ref: '#/definitions/example.RespUnauthorized'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/example.RespNotFound'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/example.RespInternal'
      summary: update user info
      tags:
      - users
swagger: "2.0"
