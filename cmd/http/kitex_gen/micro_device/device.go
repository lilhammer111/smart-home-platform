// Code generated by thriftgo (0.3.3). DO NOT EDIT.

package micro_device

import (
	"context"
	"fmt"
	"git.zqbjj.top/pet/services/cmd/http/kitex_gen/alert"
	"git.zqbjj.top/pet/services/cmd/http/kitex_gen/common"
	"git.zqbjj.top/pet/services/cmd/http/kitex_gen/device"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type RpcExpandLocReq struct {
	Title string `thrift:"Title,1,required" frugal:"1,required,string" json:"Title"`
}

func NewRpcExpandLocReq() *RpcExpandLocReq {
	return &RpcExpandLocReq{}
}

func (p *RpcExpandLocReq) InitDefault() {
	*p = RpcExpandLocReq{}
}

func (p *RpcExpandLocReq) GetTitle() (v string) {
	return p.Title
}
func (p *RpcExpandLocReq) SetTitle(val string) {
	p.Title = val
}

var fieldIDToName_RpcExpandLocReq = map[int16]string{
	1: "Title",
}

func (p *RpcExpandLocReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTitle bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTitle = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTitle {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RpcExpandLocReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_RpcExpandLocReq[fieldId]))
}

func (p *RpcExpandLocReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Title = v
	}
	return nil
}

func (p *RpcExpandLocReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RpcExpandLocReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RpcExpandLocReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Title", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Title); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RpcExpandLocReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RpcExpandLocReq(%+v)", *p)
}

func (p *RpcExpandLocReq) DeepEqual(ano *RpcExpandLocReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Title) {
		return false
	}
	return true
}

func (p *RpcExpandLocReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Title, src) != 0 {
		return false
	}
	return true
}

type RpcReduceLocReq struct {
	Id int16 `thrift:"Id,1,required" frugal:"1,required,i16" json:"Id"`
}

func NewRpcReduceLocReq() *RpcReduceLocReq {
	return &RpcReduceLocReq{}
}

func (p *RpcReduceLocReq) InitDefault() {
	*p = RpcReduceLocReq{}
}

func (p *RpcReduceLocReq) GetId() (v int16) {
	return p.Id
}
func (p *RpcReduceLocReq) SetId(val int16) {
	p.Id = val
}

var fieldIDToName_RpcReduceLocReq = map[int16]string{
	1: "Id",
}

func (p *RpcReduceLocReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RpcReduceLocReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_RpcReduceLocReq[fieldId]))
}

func (p *RpcReduceLocReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *RpcReduceLocReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RpcReduceLocReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RpcReduceLocReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I16, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI16(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RpcReduceLocReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RpcReduceLocReq(%+v)", *p)
}

func (p *RpcReduceLocReq) DeepEqual(ano *RpcReduceLocReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *RpcReduceLocReq) Field1DeepEqual(src int16) bool {

	if p.Id != src {
		return false
	}
	return true
}

type RpcFindLocReq struct {
	Id int16 `thrift:"Id,1,required" frugal:"1,required,i16" json:"Id"`
}

func NewRpcFindLocReq() *RpcFindLocReq {
	return &RpcFindLocReq{}
}

func (p *RpcFindLocReq) InitDefault() {
	*p = RpcFindLocReq{}
}

func (p *RpcFindLocReq) GetId() (v int16) {
	return p.Id
}
func (p *RpcFindLocReq) SetId(val int16) {
	p.Id = val
}

var fieldIDToName_RpcFindLocReq = map[int16]string{
	1: "Id",
}

func (p *RpcFindLocReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RpcFindLocReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_RpcFindLocReq[fieldId]))
}

func (p *RpcFindLocReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *RpcFindLocReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RpcFindLocReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RpcFindLocReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I16, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI16(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RpcFindLocReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RpcFindLocReq(%+v)", *p)
}

func (p *RpcFindLocReq) DeepEqual(ano *RpcFindLocReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *RpcFindLocReq) Field1DeepEqual(src int16) bool {

	if p.Id != src {
		return false
	}
	return true
}

type LocationData struct {
	Id    int16  `thrift:"Id,1,required" frugal:"1,required,i16" json:"Id"`
	Title string `thrift:"Title,2,required" frugal:"2,required,string" json:"Title"`
}

func NewLocationData() *LocationData {
	return &LocationData{}
}

func (p *LocationData) InitDefault() {
	*p = LocationData{}
}

func (p *LocationData) GetId() (v int16) {
	return p.Id
}

func (p *LocationData) GetTitle() (v string) {
	return p.Title
}
func (p *LocationData) SetId(val int16) {
	p.Id = val
}
func (p *LocationData) SetTitle(val string) {
	p.Title = val
}

var fieldIDToName_LocationData = map[int16]string{
	1: "Id",
	2: "Title",
}

func (p *LocationData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetTitle bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTitle = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTitle {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LocationData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_LocationData[fieldId]))
}

func (p *LocationData) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}
func (p *LocationData) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Title = v
	}
	return nil
}

func (p *LocationData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LocationData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LocationData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I16, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI16(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *LocationData) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Title", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Title); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LocationData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LocationData(%+v)", *p)
}

func (p *LocationData) DeepEqual(ano *LocationData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Title) {
		return false
	}
	return true
}

func (p *LocationData) Field1DeepEqual(src int16) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *LocationData) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Title, src) != 0 {
		return false
	}
	return true
}

type LocationListResp struct {
	LocationList []*LocationData `thrift:"LocationList,1,required" frugal:"1,required,list<LocationData>" json:"LocationList"`
}

func NewLocationListResp() *LocationListResp {
	return &LocationListResp{}
}

func (p *LocationListResp) InitDefault() {
	*p = LocationListResp{}
}

func (p *LocationListResp) GetLocationList() (v []*LocationData) {
	return p.LocationList
}
func (p *LocationListResp) SetLocationList(val []*LocationData) {
	p.LocationList = val
}

var fieldIDToName_LocationListResp = map[int16]string{
	1: "LocationList",
}

func (p *LocationListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetLocationList bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetLocationList = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetLocationList {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LocationListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_LocationListResp[fieldId]))
}

func (p *LocationListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.LocationList = make([]*LocationData, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewLocationData()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.LocationList = append(p.LocationList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *LocationListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LocationListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LocationListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LocationList", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LocationList)); err != nil {
		return err
	}
	for _, v := range p.LocationList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LocationListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LocationListResp(%+v)", *p)
}

func (p *LocationListResp) DeepEqual(ano *LocationListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LocationList) {
		return false
	}
	return true
}

func (p *LocationListResp) Field1DeepEqual(src []*LocationData) bool {

	if len(p.LocationList) != len(src) {
		return false
	}
	for i, v := range p.LocationList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type RpcFindDeviceReq struct {
	Id int32 `thrift:"Id,1,required" frugal:"1,required,i32" json:"Id"`
}

func NewRpcFindDeviceReq() *RpcFindDeviceReq {
	return &RpcFindDeviceReq{}
}

func (p *RpcFindDeviceReq) InitDefault() {
	*p = RpcFindDeviceReq{}
}

func (p *RpcFindDeviceReq) GetId() (v int32) {
	return p.Id
}
func (p *RpcFindDeviceReq) SetId(val int32) {
	p.Id = val
}

var fieldIDToName_RpcFindDeviceReq = map[int16]string{
	1: "Id",
}

func (p *RpcFindDeviceReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RpcFindDeviceReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_RpcFindDeviceReq[fieldId]))
}

func (p *RpcFindDeviceReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *RpcFindDeviceReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RpcFindDeviceReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RpcFindDeviceReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RpcFindDeviceReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RpcFindDeviceReq(%+v)", *p)
}

func (p *RpcFindDeviceReq) DeepEqual(ano *RpcFindDeviceReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *RpcFindDeviceReq) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}

type RpcDeleteDeviceReq struct {
	Id int32 `thrift:"Id,1,required" frugal:"1,required,i32" json:"Id"`
}

func NewRpcDeleteDeviceReq() *RpcDeleteDeviceReq {
	return &RpcDeleteDeviceReq{}
}

func (p *RpcDeleteDeviceReq) InitDefault() {
	*p = RpcDeleteDeviceReq{}
}

func (p *RpcDeleteDeviceReq) GetId() (v int32) {
	return p.Id
}
func (p *RpcDeleteDeviceReq) SetId(val int32) {
	p.Id = val
}

var fieldIDToName_RpcDeleteDeviceReq = map[int16]string{
	1: "Id",
}

func (p *RpcDeleteDeviceReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RpcDeleteDeviceReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_RpcDeleteDeviceReq[fieldId]))
}

func (p *RpcDeleteDeviceReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *RpcDeleteDeviceReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RpcDeleteDeviceReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RpcDeleteDeviceReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RpcDeleteDeviceReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RpcDeleteDeviceReq(%+v)", *p)
}

func (p *RpcDeleteDeviceReq) DeepEqual(ano *RpcDeleteDeviceReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *RpcDeleteDeviceReq) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}

type RpcFindAlertReq struct {
	Id int32 `thrift:"Id,1,required" frugal:"1,required,i32" json:"Id"`
}

func NewRpcFindAlertReq() *RpcFindAlertReq {
	return &RpcFindAlertReq{}
}

func (p *RpcFindAlertReq) InitDefault() {
	*p = RpcFindAlertReq{}
}

func (p *RpcFindAlertReq) GetId() (v int32) {
	return p.Id
}
func (p *RpcFindAlertReq) SetId(val int32) {
	p.Id = val
}

var fieldIDToName_RpcFindAlertReq = map[int16]string{
	1: "Id",
}

func (p *RpcFindAlertReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RpcFindAlertReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_RpcFindAlertReq[fieldId]))
}

func (p *RpcFindAlertReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *RpcFindAlertReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RpcFindAlertReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RpcFindAlertReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RpcFindAlertReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RpcFindAlertReq(%+v)", *p)
}

func (p *RpcFindAlertReq) DeepEqual(ano *RpcFindAlertReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *RpcFindAlertReq) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}

type RpcDeleteAlertReq struct {
	Id int32 `thrift:"Id,1,required" frugal:"1,required,i32" json:"Id"`
}

func NewRpcDeleteAlertReq() *RpcDeleteAlertReq {
	return &RpcDeleteAlertReq{}
}

func (p *RpcDeleteAlertReq) InitDefault() {
	*p = RpcDeleteAlertReq{}
}

func (p *RpcDeleteAlertReq) GetId() (v int32) {
	return p.Id
}
func (p *RpcDeleteAlertReq) SetId(val int32) {
	p.Id = val
}

var fieldIDToName_RpcDeleteAlertReq = map[int16]string{
	1: "Id",
}

func (p *RpcDeleteAlertReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RpcDeleteAlertReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_RpcDeleteAlertReq[fieldId]))
}

func (p *RpcDeleteAlertReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *RpcDeleteAlertReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RpcDeleteAlertReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RpcDeleteAlertReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RpcDeleteAlertReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RpcDeleteAlertReq(%+v)", *p)
}

func (p *RpcDeleteAlertReq) DeepEqual(ano *RpcDeleteAlertReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *RpcDeleteAlertReq) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}

type MicroDevice interface {
	FindDevice(ctx context.Context, req *RpcFindDeviceReq) (r *device.DeviceInfo, err error)

	QueryDevicesWithFilter(ctx context.Context, req *device.DeviceFilter) (r []*device.DeviceInfo, err error)

	CreateDevice(ctx context.Context, req *device.DeviceInfo) (r *device.DeviceInfo, err error)

	UpdateDevice(ctx context.Context, req *device.DeviceInfo) (r *device.DeviceInfo, err error)

	DeleteDevice(ctx context.Context, req *RpcDeleteDeviceReq) (r *common.Empty, err error)

	FindLocationTitle(ctx context.Context, req *RpcFindLocReq) (r *LocationData, err error)

	FindAllLocationEnum(ctx context.Context) (r []*LocationData, err error)

	ReduceLocationEnum(ctx context.Context, req *RpcReduceLocReq) (r *common.Empty, err error)

	ExpandLocationEnum(ctx context.Context, req *RpcExpandLocReq) (r *common.Empty, err error)

	FindAlert(ctx context.Context, req *RpcFindAlertReq) (r *alert.AlertInfo, err error)

	QueryAlertsWithFilter(ctx context.Context, req *alert.AlertFilter) (r []*alert.AlertInfo, err error)

	CreateAlert(ctx context.Context, req *alert.AlertInfo) (r *alert.AlertInfo, err error)

	UpdateAlert(ctx context.Context, req *alert.AlertInfo) (r *alert.AlertInfo, err error)

	DeleteAlert(ctx context.Context, req *RpcDeleteAlertReq) (r *common.Empty, err error)
}

type MicroDeviceClient struct {
	c thrift.TClient
}

func NewMicroDeviceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MicroDeviceClient {
	return &MicroDeviceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewMicroDeviceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MicroDeviceClient {
	return &MicroDeviceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewMicroDeviceClient(c thrift.TClient) *MicroDeviceClient {
	return &MicroDeviceClient{
		c: c,
	}
}

func (p *MicroDeviceClient) Client_() thrift.TClient {
	return p.c
}

func (p *MicroDeviceClient) FindDevice(ctx context.Context, req *RpcFindDeviceReq) (r *device.DeviceInfo, err error) {
	var _args MicroDeviceFindDeviceArgs
	_args.Req = req
	var _result MicroDeviceFindDeviceResult
	if err = p.Client_().Call(ctx, "FindDevice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroDeviceClient) QueryDevicesWithFilter(ctx context.Context, req *device.DeviceFilter) (r []*device.DeviceInfo, err error) {
	var _args MicroDeviceQueryDevicesWithFilterArgs
	_args.Req = req
	var _result MicroDeviceQueryDevicesWithFilterResult
	if err = p.Client_().Call(ctx, "QueryDevicesWithFilter", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroDeviceClient) CreateDevice(ctx context.Context, req *device.DeviceInfo) (r *device.DeviceInfo, err error) {
	var _args MicroDeviceCreateDeviceArgs
	_args.Req = req
	var _result MicroDeviceCreateDeviceResult
	if err = p.Client_().Call(ctx, "CreateDevice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroDeviceClient) UpdateDevice(ctx context.Context, req *device.DeviceInfo) (r *device.DeviceInfo, err error) {
	var _args MicroDeviceUpdateDeviceArgs
	_args.Req = req
	var _result MicroDeviceUpdateDeviceResult
	if err = p.Client_().Call(ctx, "UpdateDevice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroDeviceClient) DeleteDevice(ctx context.Context, req *RpcDeleteDeviceReq) (r *common.Empty, err error) {
	var _args MicroDeviceDeleteDeviceArgs
	_args.Req = req
	var _result MicroDeviceDeleteDeviceResult
	if err = p.Client_().Call(ctx, "DeleteDevice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroDeviceClient) FindLocationTitle(ctx context.Context, req *RpcFindLocReq) (r *LocationData, err error) {
	var _args MicroDeviceFindLocationTitleArgs
	_args.Req = req
	var _result MicroDeviceFindLocationTitleResult
	if err = p.Client_().Call(ctx, "FindLocationTitle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroDeviceClient) FindAllLocationEnum(ctx context.Context) (r []*LocationData, err error) {
	var _args MicroDeviceFindAllLocationEnumArgs
	var _result MicroDeviceFindAllLocationEnumResult
	if err = p.Client_().Call(ctx, "FindAllLocationEnum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroDeviceClient) ReduceLocationEnum(ctx context.Context, req *RpcReduceLocReq) (r *common.Empty, err error) {
	var _args MicroDeviceReduceLocationEnumArgs
	_args.Req = req
	var _result MicroDeviceReduceLocationEnumResult
	if err = p.Client_().Call(ctx, "ReduceLocationEnum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroDeviceClient) ExpandLocationEnum(ctx context.Context, req *RpcExpandLocReq) (r *common.Empty, err error) {
	var _args MicroDeviceExpandLocationEnumArgs
	_args.Req = req
	var _result MicroDeviceExpandLocationEnumResult
	if err = p.Client_().Call(ctx, "ExpandLocationEnum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroDeviceClient) FindAlert(ctx context.Context, req *RpcFindAlertReq) (r *alert.AlertInfo, err error) {
	var _args MicroDeviceFindAlertArgs
	_args.Req = req
	var _result MicroDeviceFindAlertResult
	if err = p.Client_().Call(ctx, "FindAlert", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroDeviceClient) QueryAlertsWithFilter(ctx context.Context, req *alert.AlertFilter) (r []*alert.AlertInfo, err error) {
	var _args MicroDeviceQueryAlertsWithFilterArgs
	_args.Req = req
	var _result MicroDeviceQueryAlertsWithFilterResult
	if err = p.Client_().Call(ctx, "QueryAlertsWithFilter", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroDeviceClient) CreateAlert(ctx context.Context, req *alert.AlertInfo) (r *alert.AlertInfo, err error) {
	var _args MicroDeviceCreateAlertArgs
	_args.Req = req
	var _result MicroDeviceCreateAlertResult
	if err = p.Client_().Call(ctx, "CreateAlert", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroDeviceClient) UpdateAlert(ctx context.Context, req *alert.AlertInfo) (r *alert.AlertInfo, err error) {
	var _args MicroDeviceUpdateAlertArgs
	_args.Req = req
	var _result MicroDeviceUpdateAlertResult
	if err = p.Client_().Call(ctx, "UpdateAlert", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroDeviceClient) DeleteAlert(ctx context.Context, req *RpcDeleteAlertReq) (r *common.Empty, err error) {
	var _args MicroDeviceDeleteAlertArgs
	_args.Req = req
	var _result MicroDeviceDeleteAlertResult
	if err = p.Client_().Call(ctx, "DeleteAlert", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type MicroDeviceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MicroDevice
}

func (p *MicroDeviceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MicroDeviceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MicroDeviceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMicroDeviceProcessor(handler MicroDevice) *MicroDeviceProcessor {
	self := &MicroDeviceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("FindDevice", &microDeviceProcessorFindDevice{handler: handler})
	self.AddToProcessorMap("QueryDevicesWithFilter", &microDeviceProcessorQueryDevicesWithFilter{handler: handler})
	self.AddToProcessorMap("CreateDevice", &microDeviceProcessorCreateDevice{handler: handler})
	self.AddToProcessorMap("UpdateDevice", &microDeviceProcessorUpdateDevice{handler: handler})
	self.AddToProcessorMap("DeleteDevice", &microDeviceProcessorDeleteDevice{handler: handler})
	self.AddToProcessorMap("FindLocationTitle", &microDeviceProcessorFindLocationTitle{handler: handler})
	self.AddToProcessorMap("FindAllLocationEnum", &microDeviceProcessorFindAllLocationEnum{handler: handler})
	self.AddToProcessorMap("ReduceLocationEnum", &microDeviceProcessorReduceLocationEnum{handler: handler})
	self.AddToProcessorMap("ExpandLocationEnum", &microDeviceProcessorExpandLocationEnum{handler: handler})
	self.AddToProcessorMap("FindAlert", &microDeviceProcessorFindAlert{handler: handler})
	self.AddToProcessorMap("QueryAlertsWithFilter", &microDeviceProcessorQueryAlertsWithFilter{handler: handler})
	self.AddToProcessorMap("CreateAlert", &microDeviceProcessorCreateAlert{handler: handler})
	self.AddToProcessorMap("UpdateAlert", &microDeviceProcessorUpdateAlert{handler: handler})
	self.AddToProcessorMap("DeleteAlert", &microDeviceProcessorDeleteAlert{handler: handler})
	return self
}
func (p *MicroDeviceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type microDeviceProcessorFindDevice struct {
	handler MicroDevice
}

func (p *microDeviceProcessorFindDevice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroDeviceFindDeviceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("FindDevice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroDeviceFindDeviceResult{}
	var retval *device.DeviceInfo
	if retval, err2 = p.handler.FindDevice(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FindDevice: "+err2.Error())
		oprot.WriteMessageBegin("FindDevice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("FindDevice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microDeviceProcessorQueryDevicesWithFilter struct {
	handler MicroDevice
}

func (p *microDeviceProcessorQueryDevicesWithFilter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroDeviceQueryDevicesWithFilterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryDevicesWithFilter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroDeviceQueryDevicesWithFilterResult{}
	var retval []*device.DeviceInfo
	if retval, err2 = p.handler.QueryDevicesWithFilter(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryDevicesWithFilter: "+err2.Error())
		oprot.WriteMessageBegin("QueryDevicesWithFilter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryDevicesWithFilter", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microDeviceProcessorCreateDevice struct {
	handler MicroDevice
}

func (p *microDeviceProcessorCreateDevice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroDeviceCreateDeviceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateDevice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroDeviceCreateDeviceResult{}
	var retval *device.DeviceInfo
	if retval, err2 = p.handler.CreateDevice(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateDevice: "+err2.Error())
		oprot.WriteMessageBegin("CreateDevice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateDevice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microDeviceProcessorUpdateDevice struct {
	handler MicroDevice
}

func (p *microDeviceProcessorUpdateDevice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroDeviceUpdateDeviceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateDevice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroDeviceUpdateDeviceResult{}
	var retval *device.DeviceInfo
	if retval, err2 = p.handler.UpdateDevice(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateDevice: "+err2.Error())
		oprot.WriteMessageBegin("UpdateDevice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateDevice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microDeviceProcessorDeleteDevice struct {
	handler MicroDevice
}

func (p *microDeviceProcessorDeleteDevice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroDeviceDeleteDeviceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteDevice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroDeviceDeleteDeviceResult{}
	var retval *common.Empty
	if retval, err2 = p.handler.DeleteDevice(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteDevice: "+err2.Error())
		oprot.WriteMessageBegin("DeleteDevice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteDevice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microDeviceProcessorFindLocationTitle struct {
	handler MicroDevice
}

func (p *microDeviceProcessorFindLocationTitle) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroDeviceFindLocationTitleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("FindLocationTitle", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroDeviceFindLocationTitleResult{}
	var retval *LocationData
	if retval, err2 = p.handler.FindLocationTitle(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FindLocationTitle: "+err2.Error())
		oprot.WriteMessageBegin("FindLocationTitle", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("FindLocationTitle", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microDeviceProcessorFindAllLocationEnum struct {
	handler MicroDevice
}

func (p *microDeviceProcessorFindAllLocationEnum) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroDeviceFindAllLocationEnumArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("FindAllLocationEnum", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroDeviceFindAllLocationEnumResult{}
	var retval []*LocationData
	if retval, err2 = p.handler.FindAllLocationEnum(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FindAllLocationEnum: "+err2.Error())
		oprot.WriteMessageBegin("FindAllLocationEnum", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("FindAllLocationEnum", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microDeviceProcessorReduceLocationEnum struct {
	handler MicroDevice
}

func (p *microDeviceProcessorReduceLocationEnum) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroDeviceReduceLocationEnumArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ReduceLocationEnum", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroDeviceReduceLocationEnumResult{}
	var retval *common.Empty
	if retval, err2 = p.handler.ReduceLocationEnum(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReduceLocationEnum: "+err2.Error())
		oprot.WriteMessageBegin("ReduceLocationEnum", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ReduceLocationEnum", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microDeviceProcessorExpandLocationEnum struct {
	handler MicroDevice
}

func (p *microDeviceProcessorExpandLocationEnum) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroDeviceExpandLocationEnumArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ExpandLocationEnum", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroDeviceExpandLocationEnumResult{}
	var retval *common.Empty
	if retval, err2 = p.handler.ExpandLocationEnum(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ExpandLocationEnum: "+err2.Error())
		oprot.WriteMessageBegin("ExpandLocationEnum", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ExpandLocationEnum", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microDeviceProcessorFindAlert struct {
	handler MicroDevice
}

func (p *microDeviceProcessorFindAlert) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroDeviceFindAlertArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("FindAlert", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroDeviceFindAlertResult{}
	var retval *alert.AlertInfo
	if retval, err2 = p.handler.FindAlert(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FindAlert: "+err2.Error())
		oprot.WriteMessageBegin("FindAlert", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("FindAlert", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microDeviceProcessorQueryAlertsWithFilter struct {
	handler MicroDevice
}

func (p *microDeviceProcessorQueryAlertsWithFilter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroDeviceQueryAlertsWithFilterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryAlertsWithFilter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroDeviceQueryAlertsWithFilterResult{}
	var retval []*alert.AlertInfo
	if retval, err2 = p.handler.QueryAlertsWithFilter(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryAlertsWithFilter: "+err2.Error())
		oprot.WriteMessageBegin("QueryAlertsWithFilter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryAlertsWithFilter", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microDeviceProcessorCreateAlert struct {
	handler MicroDevice
}

func (p *microDeviceProcessorCreateAlert) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroDeviceCreateAlertArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateAlert", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroDeviceCreateAlertResult{}
	var retval *alert.AlertInfo
	if retval, err2 = p.handler.CreateAlert(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateAlert: "+err2.Error())
		oprot.WriteMessageBegin("CreateAlert", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateAlert", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microDeviceProcessorUpdateAlert struct {
	handler MicroDevice
}

func (p *microDeviceProcessorUpdateAlert) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroDeviceUpdateAlertArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateAlert", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroDeviceUpdateAlertResult{}
	var retval *alert.AlertInfo
	if retval, err2 = p.handler.UpdateAlert(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateAlert: "+err2.Error())
		oprot.WriteMessageBegin("UpdateAlert", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateAlert", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microDeviceProcessorDeleteAlert struct {
	handler MicroDevice
}

func (p *microDeviceProcessorDeleteAlert) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroDeviceDeleteAlertArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteAlert", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroDeviceDeleteAlertResult{}
	var retval *common.Empty
	if retval, err2 = p.handler.DeleteAlert(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteAlert: "+err2.Error())
		oprot.WriteMessageBegin("DeleteAlert", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteAlert", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type MicroDeviceFindDeviceArgs struct {
	Req *RpcFindDeviceReq `thrift:"req,1" frugal:"1,default,RpcFindDeviceReq" json:"req"`
}

func NewMicroDeviceFindDeviceArgs() *MicroDeviceFindDeviceArgs {
	return &MicroDeviceFindDeviceArgs{}
}

func (p *MicroDeviceFindDeviceArgs) InitDefault() {
	*p = MicroDeviceFindDeviceArgs{}
}

var MicroDeviceFindDeviceArgs_Req_DEFAULT *RpcFindDeviceReq

func (p *MicroDeviceFindDeviceArgs) GetReq() (v *RpcFindDeviceReq) {
	if !p.IsSetReq() {
		return MicroDeviceFindDeviceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroDeviceFindDeviceArgs) SetReq(val *RpcFindDeviceReq) {
	p.Req = val
}

var fieldIDToName_MicroDeviceFindDeviceArgs = map[int16]string{
	1: "req",
}

func (p *MicroDeviceFindDeviceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroDeviceFindDeviceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceFindDeviceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceFindDeviceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewRpcFindDeviceReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceFindDeviceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FindDevice_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceFindDeviceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroDeviceFindDeviceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceFindDeviceArgs(%+v)", *p)
}

func (p *MicroDeviceFindDeviceArgs) DeepEqual(ano *MicroDeviceFindDeviceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroDeviceFindDeviceArgs) Field1DeepEqual(src *RpcFindDeviceReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroDeviceFindDeviceResult struct {
	Success *device.DeviceInfo `thrift:"success,0,optional" frugal:"0,optional,device.DeviceInfo" json:"success,omitempty"`
}

func NewMicroDeviceFindDeviceResult() *MicroDeviceFindDeviceResult {
	return &MicroDeviceFindDeviceResult{}
}

func (p *MicroDeviceFindDeviceResult) InitDefault() {
	*p = MicroDeviceFindDeviceResult{}
}

var MicroDeviceFindDeviceResult_Success_DEFAULT *device.DeviceInfo

func (p *MicroDeviceFindDeviceResult) GetSuccess() (v *device.DeviceInfo) {
	if !p.IsSetSuccess() {
		return MicroDeviceFindDeviceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroDeviceFindDeviceResult) SetSuccess(x interface{}) {
	p.Success = x.(*device.DeviceInfo)
}

var fieldIDToName_MicroDeviceFindDeviceResult = map[int16]string{
	0: "success",
}

func (p *MicroDeviceFindDeviceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroDeviceFindDeviceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceFindDeviceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceFindDeviceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = device.NewDeviceInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceFindDeviceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FindDevice_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceFindDeviceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroDeviceFindDeviceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceFindDeviceResult(%+v)", *p)
}

func (p *MicroDeviceFindDeviceResult) DeepEqual(ano *MicroDeviceFindDeviceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroDeviceFindDeviceResult) Field0DeepEqual(src *device.DeviceInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MicroDeviceQueryDevicesWithFilterArgs struct {
	Req *device.DeviceFilter `thrift:"req,1" frugal:"1,default,device.DeviceFilter" json:"req"`
}

func NewMicroDeviceQueryDevicesWithFilterArgs() *MicroDeviceQueryDevicesWithFilterArgs {
	return &MicroDeviceQueryDevicesWithFilterArgs{}
}

func (p *MicroDeviceQueryDevicesWithFilterArgs) InitDefault() {
	*p = MicroDeviceQueryDevicesWithFilterArgs{}
}

var MicroDeviceQueryDevicesWithFilterArgs_Req_DEFAULT *device.DeviceFilter

func (p *MicroDeviceQueryDevicesWithFilterArgs) GetReq() (v *device.DeviceFilter) {
	if !p.IsSetReq() {
		return MicroDeviceQueryDevicesWithFilterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroDeviceQueryDevicesWithFilterArgs) SetReq(val *device.DeviceFilter) {
	p.Req = val
}

var fieldIDToName_MicroDeviceQueryDevicesWithFilterArgs = map[int16]string{
	1: "req",
}

func (p *MicroDeviceQueryDevicesWithFilterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroDeviceQueryDevicesWithFilterArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceQueryDevicesWithFilterArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceQueryDevicesWithFilterArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = device.NewDeviceFilter()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceQueryDevicesWithFilterArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryDevicesWithFilter_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceQueryDevicesWithFilterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroDeviceQueryDevicesWithFilterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceQueryDevicesWithFilterArgs(%+v)", *p)
}

func (p *MicroDeviceQueryDevicesWithFilterArgs) DeepEqual(ano *MicroDeviceQueryDevicesWithFilterArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroDeviceQueryDevicesWithFilterArgs) Field1DeepEqual(src *device.DeviceFilter) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroDeviceQueryDevicesWithFilterResult struct {
	Success []*device.DeviceInfo `thrift:"success,0,optional" frugal:"0,optional,list<device.DeviceInfo>" json:"success,omitempty"`
}

func NewMicroDeviceQueryDevicesWithFilterResult() *MicroDeviceQueryDevicesWithFilterResult {
	return &MicroDeviceQueryDevicesWithFilterResult{}
}

func (p *MicroDeviceQueryDevicesWithFilterResult) InitDefault() {
	*p = MicroDeviceQueryDevicesWithFilterResult{}
}

var MicroDeviceQueryDevicesWithFilterResult_Success_DEFAULT []*device.DeviceInfo

func (p *MicroDeviceQueryDevicesWithFilterResult) GetSuccess() (v []*device.DeviceInfo) {
	if !p.IsSetSuccess() {
		return MicroDeviceQueryDevicesWithFilterResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroDeviceQueryDevicesWithFilterResult) SetSuccess(x interface{}) {
	p.Success = x.([]*device.DeviceInfo)
}

var fieldIDToName_MicroDeviceQueryDevicesWithFilterResult = map[int16]string{
	0: "success",
}

func (p *MicroDeviceQueryDevicesWithFilterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroDeviceQueryDevicesWithFilterResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceQueryDevicesWithFilterResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceQueryDevicesWithFilterResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Success = make([]*device.DeviceInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := device.NewDeviceInfo()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Success = append(p.Success, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceQueryDevicesWithFilterResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryDevicesWithFilter_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceQueryDevicesWithFilterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return err
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroDeviceQueryDevicesWithFilterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceQueryDevicesWithFilterResult(%+v)", *p)
}

func (p *MicroDeviceQueryDevicesWithFilterResult) DeepEqual(ano *MicroDeviceQueryDevicesWithFilterResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroDeviceQueryDevicesWithFilterResult) Field0DeepEqual(src []*device.DeviceInfo) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for i, v := range p.Success {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type MicroDeviceCreateDeviceArgs struct {
	Req *device.DeviceInfo `thrift:"req,1" frugal:"1,default,device.DeviceInfo" json:"req"`
}

func NewMicroDeviceCreateDeviceArgs() *MicroDeviceCreateDeviceArgs {
	return &MicroDeviceCreateDeviceArgs{}
}

func (p *MicroDeviceCreateDeviceArgs) InitDefault() {
	*p = MicroDeviceCreateDeviceArgs{}
}

var MicroDeviceCreateDeviceArgs_Req_DEFAULT *device.DeviceInfo

func (p *MicroDeviceCreateDeviceArgs) GetReq() (v *device.DeviceInfo) {
	if !p.IsSetReq() {
		return MicroDeviceCreateDeviceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroDeviceCreateDeviceArgs) SetReq(val *device.DeviceInfo) {
	p.Req = val
}

var fieldIDToName_MicroDeviceCreateDeviceArgs = map[int16]string{
	1: "req",
}

func (p *MicroDeviceCreateDeviceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroDeviceCreateDeviceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceCreateDeviceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceCreateDeviceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = device.NewDeviceInfo()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceCreateDeviceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDevice_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceCreateDeviceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroDeviceCreateDeviceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceCreateDeviceArgs(%+v)", *p)
}

func (p *MicroDeviceCreateDeviceArgs) DeepEqual(ano *MicroDeviceCreateDeviceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroDeviceCreateDeviceArgs) Field1DeepEqual(src *device.DeviceInfo) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroDeviceCreateDeviceResult struct {
	Success *device.DeviceInfo `thrift:"success,0,optional" frugal:"0,optional,device.DeviceInfo" json:"success,omitempty"`
}

func NewMicroDeviceCreateDeviceResult() *MicroDeviceCreateDeviceResult {
	return &MicroDeviceCreateDeviceResult{}
}

func (p *MicroDeviceCreateDeviceResult) InitDefault() {
	*p = MicroDeviceCreateDeviceResult{}
}

var MicroDeviceCreateDeviceResult_Success_DEFAULT *device.DeviceInfo

func (p *MicroDeviceCreateDeviceResult) GetSuccess() (v *device.DeviceInfo) {
	if !p.IsSetSuccess() {
		return MicroDeviceCreateDeviceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroDeviceCreateDeviceResult) SetSuccess(x interface{}) {
	p.Success = x.(*device.DeviceInfo)
}

var fieldIDToName_MicroDeviceCreateDeviceResult = map[int16]string{
	0: "success",
}

func (p *MicroDeviceCreateDeviceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroDeviceCreateDeviceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceCreateDeviceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceCreateDeviceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = device.NewDeviceInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceCreateDeviceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDevice_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceCreateDeviceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroDeviceCreateDeviceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceCreateDeviceResult(%+v)", *p)
}

func (p *MicroDeviceCreateDeviceResult) DeepEqual(ano *MicroDeviceCreateDeviceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroDeviceCreateDeviceResult) Field0DeepEqual(src *device.DeviceInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MicroDeviceUpdateDeviceArgs struct {
	Req *device.DeviceInfo `thrift:"req,1" frugal:"1,default,device.DeviceInfo" json:"req"`
}

func NewMicroDeviceUpdateDeviceArgs() *MicroDeviceUpdateDeviceArgs {
	return &MicroDeviceUpdateDeviceArgs{}
}

func (p *MicroDeviceUpdateDeviceArgs) InitDefault() {
	*p = MicroDeviceUpdateDeviceArgs{}
}

var MicroDeviceUpdateDeviceArgs_Req_DEFAULT *device.DeviceInfo

func (p *MicroDeviceUpdateDeviceArgs) GetReq() (v *device.DeviceInfo) {
	if !p.IsSetReq() {
		return MicroDeviceUpdateDeviceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroDeviceUpdateDeviceArgs) SetReq(val *device.DeviceInfo) {
	p.Req = val
}

var fieldIDToName_MicroDeviceUpdateDeviceArgs = map[int16]string{
	1: "req",
}

func (p *MicroDeviceUpdateDeviceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroDeviceUpdateDeviceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceUpdateDeviceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceUpdateDeviceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = device.NewDeviceInfo()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceUpdateDeviceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDevice_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceUpdateDeviceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroDeviceUpdateDeviceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceUpdateDeviceArgs(%+v)", *p)
}

func (p *MicroDeviceUpdateDeviceArgs) DeepEqual(ano *MicroDeviceUpdateDeviceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroDeviceUpdateDeviceArgs) Field1DeepEqual(src *device.DeviceInfo) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroDeviceUpdateDeviceResult struct {
	Success *device.DeviceInfo `thrift:"success,0,optional" frugal:"0,optional,device.DeviceInfo" json:"success,omitempty"`
}

func NewMicroDeviceUpdateDeviceResult() *MicroDeviceUpdateDeviceResult {
	return &MicroDeviceUpdateDeviceResult{}
}

func (p *MicroDeviceUpdateDeviceResult) InitDefault() {
	*p = MicroDeviceUpdateDeviceResult{}
}

var MicroDeviceUpdateDeviceResult_Success_DEFAULT *device.DeviceInfo

func (p *MicroDeviceUpdateDeviceResult) GetSuccess() (v *device.DeviceInfo) {
	if !p.IsSetSuccess() {
		return MicroDeviceUpdateDeviceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroDeviceUpdateDeviceResult) SetSuccess(x interface{}) {
	p.Success = x.(*device.DeviceInfo)
}

var fieldIDToName_MicroDeviceUpdateDeviceResult = map[int16]string{
	0: "success",
}

func (p *MicroDeviceUpdateDeviceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroDeviceUpdateDeviceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceUpdateDeviceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceUpdateDeviceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = device.NewDeviceInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceUpdateDeviceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDevice_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceUpdateDeviceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroDeviceUpdateDeviceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceUpdateDeviceResult(%+v)", *p)
}

func (p *MicroDeviceUpdateDeviceResult) DeepEqual(ano *MicroDeviceUpdateDeviceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroDeviceUpdateDeviceResult) Field0DeepEqual(src *device.DeviceInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MicroDeviceDeleteDeviceArgs struct {
	Req *RpcDeleteDeviceReq `thrift:"req,1" frugal:"1,default,RpcDeleteDeviceReq" json:"req"`
}

func NewMicroDeviceDeleteDeviceArgs() *MicroDeviceDeleteDeviceArgs {
	return &MicroDeviceDeleteDeviceArgs{}
}

func (p *MicroDeviceDeleteDeviceArgs) InitDefault() {
	*p = MicroDeviceDeleteDeviceArgs{}
}

var MicroDeviceDeleteDeviceArgs_Req_DEFAULT *RpcDeleteDeviceReq

func (p *MicroDeviceDeleteDeviceArgs) GetReq() (v *RpcDeleteDeviceReq) {
	if !p.IsSetReq() {
		return MicroDeviceDeleteDeviceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroDeviceDeleteDeviceArgs) SetReq(val *RpcDeleteDeviceReq) {
	p.Req = val
}

var fieldIDToName_MicroDeviceDeleteDeviceArgs = map[int16]string{
	1: "req",
}

func (p *MicroDeviceDeleteDeviceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroDeviceDeleteDeviceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceDeleteDeviceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceDeleteDeviceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewRpcDeleteDeviceReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceDeleteDeviceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDevice_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceDeleteDeviceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroDeviceDeleteDeviceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceDeleteDeviceArgs(%+v)", *p)
}

func (p *MicroDeviceDeleteDeviceArgs) DeepEqual(ano *MicroDeviceDeleteDeviceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroDeviceDeleteDeviceArgs) Field1DeepEqual(src *RpcDeleteDeviceReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroDeviceDeleteDeviceResult struct {
	Success *common.Empty `thrift:"success,0,optional" frugal:"0,optional,common.Empty" json:"success,omitempty"`
}

func NewMicroDeviceDeleteDeviceResult() *MicroDeviceDeleteDeviceResult {
	return &MicroDeviceDeleteDeviceResult{}
}

func (p *MicroDeviceDeleteDeviceResult) InitDefault() {
	*p = MicroDeviceDeleteDeviceResult{}
}

var MicroDeviceDeleteDeviceResult_Success_DEFAULT *common.Empty

func (p *MicroDeviceDeleteDeviceResult) GetSuccess() (v *common.Empty) {
	if !p.IsSetSuccess() {
		return MicroDeviceDeleteDeviceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroDeviceDeleteDeviceResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.Empty)
}

var fieldIDToName_MicroDeviceDeleteDeviceResult = map[int16]string{
	0: "success",
}

func (p *MicroDeviceDeleteDeviceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroDeviceDeleteDeviceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceDeleteDeviceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceDeleteDeviceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmpty()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceDeleteDeviceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDevice_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceDeleteDeviceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroDeviceDeleteDeviceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceDeleteDeviceResult(%+v)", *p)
}

func (p *MicroDeviceDeleteDeviceResult) DeepEqual(ano *MicroDeviceDeleteDeviceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroDeviceDeleteDeviceResult) Field0DeepEqual(src *common.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MicroDeviceFindLocationTitleArgs struct {
	Req *RpcFindLocReq `thrift:"req,1" frugal:"1,default,RpcFindLocReq" json:"req"`
}

func NewMicroDeviceFindLocationTitleArgs() *MicroDeviceFindLocationTitleArgs {
	return &MicroDeviceFindLocationTitleArgs{}
}

func (p *MicroDeviceFindLocationTitleArgs) InitDefault() {
	*p = MicroDeviceFindLocationTitleArgs{}
}

var MicroDeviceFindLocationTitleArgs_Req_DEFAULT *RpcFindLocReq

func (p *MicroDeviceFindLocationTitleArgs) GetReq() (v *RpcFindLocReq) {
	if !p.IsSetReq() {
		return MicroDeviceFindLocationTitleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroDeviceFindLocationTitleArgs) SetReq(val *RpcFindLocReq) {
	p.Req = val
}

var fieldIDToName_MicroDeviceFindLocationTitleArgs = map[int16]string{
	1: "req",
}

func (p *MicroDeviceFindLocationTitleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroDeviceFindLocationTitleArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceFindLocationTitleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceFindLocationTitleArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewRpcFindLocReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceFindLocationTitleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FindLocationTitle_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceFindLocationTitleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroDeviceFindLocationTitleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceFindLocationTitleArgs(%+v)", *p)
}

func (p *MicroDeviceFindLocationTitleArgs) DeepEqual(ano *MicroDeviceFindLocationTitleArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroDeviceFindLocationTitleArgs) Field1DeepEqual(src *RpcFindLocReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroDeviceFindLocationTitleResult struct {
	Success *LocationData `thrift:"success,0,optional" frugal:"0,optional,LocationData" json:"success,omitempty"`
}

func NewMicroDeviceFindLocationTitleResult() *MicroDeviceFindLocationTitleResult {
	return &MicroDeviceFindLocationTitleResult{}
}

func (p *MicroDeviceFindLocationTitleResult) InitDefault() {
	*p = MicroDeviceFindLocationTitleResult{}
}

var MicroDeviceFindLocationTitleResult_Success_DEFAULT *LocationData

func (p *MicroDeviceFindLocationTitleResult) GetSuccess() (v *LocationData) {
	if !p.IsSetSuccess() {
		return MicroDeviceFindLocationTitleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroDeviceFindLocationTitleResult) SetSuccess(x interface{}) {
	p.Success = x.(*LocationData)
}

var fieldIDToName_MicroDeviceFindLocationTitleResult = map[int16]string{
	0: "success",
}

func (p *MicroDeviceFindLocationTitleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroDeviceFindLocationTitleResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceFindLocationTitleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceFindLocationTitleResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewLocationData()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceFindLocationTitleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FindLocationTitle_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceFindLocationTitleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroDeviceFindLocationTitleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceFindLocationTitleResult(%+v)", *p)
}

func (p *MicroDeviceFindLocationTitleResult) DeepEqual(ano *MicroDeviceFindLocationTitleResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroDeviceFindLocationTitleResult) Field0DeepEqual(src *LocationData) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MicroDeviceFindAllLocationEnumArgs struct {
}

func NewMicroDeviceFindAllLocationEnumArgs() *MicroDeviceFindAllLocationEnumArgs {
	return &MicroDeviceFindAllLocationEnumArgs{}
}

func (p *MicroDeviceFindAllLocationEnumArgs) InitDefault() {
	*p = MicroDeviceFindAllLocationEnumArgs{}
}

var fieldIDToName_MicroDeviceFindAllLocationEnumArgs = map[int16]string{}

func (p *MicroDeviceFindAllLocationEnumArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceFindAllLocationEnumArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("FindAllLocationEnum_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceFindAllLocationEnumArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceFindAllLocationEnumArgs(%+v)", *p)
}

func (p *MicroDeviceFindAllLocationEnumArgs) DeepEqual(ano *MicroDeviceFindAllLocationEnumArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type MicroDeviceFindAllLocationEnumResult struct {
	Success []*LocationData `thrift:"success,0,optional" frugal:"0,optional,list<LocationData>" json:"success,omitempty"`
}

func NewMicroDeviceFindAllLocationEnumResult() *MicroDeviceFindAllLocationEnumResult {
	return &MicroDeviceFindAllLocationEnumResult{}
}

func (p *MicroDeviceFindAllLocationEnumResult) InitDefault() {
	*p = MicroDeviceFindAllLocationEnumResult{}
}

var MicroDeviceFindAllLocationEnumResult_Success_DEFAULT []*LocationData

func (p *MicroDeviceFindAllLocationEnumResult) GetSuccess() (v []*LocationData) {
	if !p.IsSetSuccess() {
		return MicroDeviceFindAllLocationEnumResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroDeviceFindAllLocationEnumResult) SetSuccess(x interface{}) {
	p.Success = x.([]*LocationData)
}

var fieldIDToName_MicroDeviceFindAllLocationEnumResult = map[int16]string{
	0: "success",
}

func (p *MicroDeviceFindAllLocationEnumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroDeviceFindAllLocationEnumResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceFindAllLocationEnumResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceFindAllLocationEnumResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Success = make([]*LocationData, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewLocationData()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Success = append(p.Success, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceFindAllLocationEnumResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FindAllLocationEnum_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceFindAllLocationEnumResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return err
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroDeviceFindAllLocationEnumResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceFindAllLocationEnumResult(%+v)", *p)
}

func (p *MicroDeviceFindAllLocationEnumResult) DeepEqual(ano *MicroDeviceFindAllLocationEnumResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroDeviceFindAllLocationEnumResult) Field0DeepEqual(src []*LocationData) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for i, v := range p.Success {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type MicroDeviceReduceLocationEnumArgs struct {
	Req *RpcReduceLocReq `thrift:"req,1" frugal:"1,default,RpcReduceLocReq" json:"req"`
}

func NewMicroDeviceReduceLocationEnumArgs() *MicroDeviceReduceLocationEnumArgs {
	return &MicroDeviceReduceLocationEnumArgs{}
}

func (p *MicroDeviceReduceLocationEnumArgs) InitDefault() {
	*p = MicroDeviceReduceLocationEnumArgs{}
}

var MicroDeviceReduceLocationEnumArgs_Req_DEFAULT *RpcReduceLocReq

func (p *MicroDeviceReduceLocationEnumArgs) GetReq() (v *RpcReduceLocReq) {
	if !p.IsSetReq() {
		return MicroDeviceReduceLocationEnumArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroDeviceReduceLocationEnumArgs) SetReq(val *RpcReduceLocReq) {
	p.Req = val
}

var fieldIDToName_MicroDeviceReduceLocationEnumArgs = map[int16]string{
	1: "req",
}

func (p *MicroDeviceReduceLocationEnumArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroDeviceReduceLocationEnumArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceReduceLocationEnumArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceReduceLocationEnumArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewRpcReduceLocReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceReduceLocationEnumArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReduceLocationEnum_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceReduceLocationEnumArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroDeviceReduceLocationEnumArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceReduceLocationEnumArgs(%+v)", *p)
}

func (p *MicroDeviceReduceLocationEnumArgs) DeepEqual(ano *MicroDeviceReduceLocationEnumArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroDeviceReduceLocationEnumArgs) Field1DeepEqual(src *RpcReduceLocReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroDeviceReduceLocationEnumResult struct {
	Success *common.Empty `thrift:"success,0,optional" frugal:"0,optional,common.Empty" json:"success,omitempty"`
}

func NewMicroDeviceReduceLocationEnumResult() *MicroDeviceReduceLocationEnumResult {
	return &MicroDeviceReduceLocationEnumResult{}
}

func (p *MicroDeviceReduceLocationEnumResult) InitDefault() {
	*p = MicroDeviceReduceLocationEnumResult{}
}

var MicroDeviceReduceLocationEnumResult_Success_DEFAULT *common.Empty

func (p *MicroDeviceReduceLocationEnumResult) GetSuccess() (v *common.Empty) {
	if !p.IsSetSuccess() {
		return MicroDeviceReduceLocationEnumResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroDeviceReduceLocationEnumResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.Empty)
}

var fieldIDToName_MicroDeviceReduceLocationEnumResult = map[int16]string{
	0: "success",
}

func (p *MicroDeviceReduceLocationEnumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroDeviceReduceLocationEnumResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceReduceLocationEnumResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceReduceLocationEnumResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmpty()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceReduceLocationEnumResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReduceLocationEnum_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceReduceLocationEnumResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroDeviceReduceLocationEnumResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceReduceLocationEnumResult(%+v)", *p)
}

func (p *MicroDeviceReduceLocationEnumResult) DeepEqual(ano *MicroDeviceReduceLocationEnumResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroDeviceReduceLocationEnumResult) Field0DeepEqual(src *common.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MicroDeviceExpandLocationEnumArgs struct {
	Req *RpcExpandLocReq `thrift:"req,1" frugal:"1,default,RpcExpandLocReq" json:"req"`
}

func NewMicroDeviceExpandLocationEnumArgs() *MicroDeviceExpandLocationEnumArgs {
	return &MicroDeviceExpandLocationEnumArgs{}
}

func (p *MicroDeviceExpandLocationEnumArgs) InitDefault() {
	*p = MicroDeviceExpandLocationEnumArgs{}
}

var MicroDeviceExpandLocationEnumArgs_Req_DEFAULT *RpcExpandLocReq

func (p *MicroDeviceExpandLocationEnumArgs) GetReq() (v *RpcExpandLocReq) {
	if !p.IsSetReq() {
		return MicroDeviceExpandLocationEnumArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroDeviceExpandLocationEnumArgs) SetReq(val *RpcExpandLocReq) {
	p.Req = val
}

var fieldIDToName_MicroDeviceExpandLocationEnumArgs = map[int16]string{
	1: "req",
}

func (p *MicroDeviceExpandLocationEnumArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroDeviceExpandLocationEnumArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceExpandLocationEnumArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceExpandLocationEnumArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewRpcExpandLocReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceExpandLocationEnumArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExpandLocationEnum_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceExpandLocationEnumArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroDeviceExpandLocationEnumArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceExpandLocationEnumArgs(%+v)", *p)
}

func (p *MicroDeviceExpandLocationEnumArgs) DeepEqual(ano *MicroDeviceExpandLocationEnumArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroDeviceExpandLocationEnumArgs) Field1DeepEqual(src *RpcExpandLocReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroDeviceExpandLocationEnumResult struct {
	Success *common.Empty `thrift:"success,0,optional" frugal:"0,optional,common.Empty" json:"success,omitempty"`
}

func NewMicroDeviceExpandLocationEnumResult() *MicroDeviceExpandLocationEnumResult {
	return &MicroDeviceExpandLocationEnumResult{}
}

func (p *MicroDeviceExpandLocationEnumResult) InitDefault() {
	*p = MicroDeviceExpandLocationEnumResult{}
}

var MicroDeviceExpandLocationEnumResult_Success_DEFAULT *common.Empty

func (p *MicroDeviceExpandLocationEnumResult) GetSuccess() (v *common.Empty) {
	if !p.IsSetSuccess() {
		return MicroDeviceExpandLocationEnumResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroDeviceExpandLocationEnumResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.Empty)
}

var fieldIDToName_MicroDeviceExpandLocationEnumResult = map[int16]string{
	0: "success",
}

func (p *MicroDeviceExpandLocationEnumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroDeviceExpandLocationEnumResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceExpandLocationEnumResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceExpandLocationEnumResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmpty()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceExpandLocationEnumResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExpandLocationEnum_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceExpandLocationEnumResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroDeviceExpandLocationEnumResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceExpandLocationEnumResult(%+v)", *p)
}

func (p *MicroDeviceExpandLocationEnumResult) DeepEqual(ano *MicroDeviceExpandLocationEnumResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroDeviceExpandLocationEnumResult) Field0DeepEqual(src *common.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MicroDeviceFindAlertArgs struct {
	Req *RpcFindAlertReq `thrift:"req,1" frugal:"1,default,RpcFindAlertReq" json:"req"`
}

func NewMicroDeviceFindAlertArgs() *MicroDeviceFindAlertArgs {
	return &MicroDeviceFindAlertArgs{}
}

func (p *MicroDeviceFindAlertArgs) InitDefault() {
	*p = MicroDeviceFindAlertArgs{}
}

var MicroDeviceFindAlertArgs_Req_DEFAULT *RpcFindAlertReq

func (p *MicroDeviceFindAlertArgs) GetReq() (v *RpcFindAlertReq) {
	if !p.IsSetReq() {
		return MicroDeviceFindAlertArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroDeviceFindAlertArgs) SetReq(val *RpcFindAlertReq) {
	p.Req = val
}

var fieldIDToName_MicroDeviceFindAlertArgs = map[int16]string{
	1: "req",
}

func (p *MicroDeviceFindAlertArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroDeviceFindAlertArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceFindAlertArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceFindAlertArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewRpcFindAlertReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceFindAlertArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FindAlert_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceFindAlertArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroDeviceFindAlertArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceFindAlertArgs(%+v)", *p)
}

func (p *MicroDeviceFindAlertArgs) DeepEqual(ano *MicroDeviceFindAlertArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroDeviceFindAlertArgs) Field1DeepEqual(src *RpcFindAlertReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroDeviceFindAlertResult struct {
	Success *alert.AlertInfo `thrift:"success,0,optional" frugal:"0,optional,alert.AlertInfo" json:"success,omitempty"`
}

func NewMicroDeviceFindAlertResult() *MicroDeviceFindAlertResult {
	return &MicroDeviceFindAlertResult{}
}

func (p *MicroDeviceFindAlertResult) InitDefault() {
	*p = MicroDeviceFindAlertResult{}
}

var MicroDeviceFindAlertResult_Success_DEFAULT *alert.AlertInfo

func (p *MicroDeviceFindAlertResult) GetSuccess() (v *alert.AlertInfo) {
	if !p.IsSetSuccess() {
		return MicroDeviceFindAlertResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroDeviceFindAlertResult) SetSuccess(x interface{}) {
	p.Success = x.(*alert.AlertInfo)
}

var fieldIDToName_MicroDeviceFindAlertResult = map[int16]string{
	0: "success",
}

func (p *MicroDeviceFindAlertResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroDeviceFindAlertResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceFindAlertResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceFindAlertResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = alert.NewAlertInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceFindAlertResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FindAlert_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceFindAlertResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroDeviceFindAlertResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceFindAlertResult(%+v)", *p)
}

func (p *MicroDeviceFindAlertResult) DeepEqual(ano *MicroDeviceFindAlertResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroDeviceFindAlertResult) Field0DeepEqual(src *alert.AlertInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MicroDeviceQueryAlertsWithFilterArgs struct {
	Req *alert.AlertFilter `thrift:"req,1" frugal:"1,default,alert.AlertFilter" json:"req"`
}

func NewMicroDeviceQueryAlertsWithFilterArgs() *MicroDeviceQueryAlertsWithFilterArgs {
	return &MicroDeviceQueryAlertsWithFilterArgs{}
}

func (p *MicroDeviceQueryAlertsWithFilterArgs) InitDefault() {
	*p = MicroDeviceQueryAlertsWithFilterArgs{}
}

var MicroDeviceQueryAlertsWithFilterArgs_Req_DEFAULT *alert.AlertFilter

func (p *MicroDeviceQueryAlertsWithFilterArgs) GetReq() (v *alert.AlertFilter) {
	if !p.IsSetReq() {
		return MicroDeviceQueryAlertsWithFilterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroDeviceQueryAlertsWithFilterArgs) SetReq(val *alert.AlertFilter) {
	p.Req = val
}

var fieldIDToName_MicroDeviceQueryAlertsWithFilterArgs = map[int16]string{
	1: "req",
}

func (p *MicroDeviceQueryAlertsWithFilterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroDeviceQueryAlertsWithFilterArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceQueryAlertsWithFilterArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceQueryAlertsWithFilterArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = alert.NewAlertFilter()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceQueryAlertsWithFilterArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryAlertsWithFilter_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceQueryAlertsWithFilterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroDeviceQueryAlertsWithFilterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceQueryAlertsWithFilterArgs(%+v)", *p)
}

func (p *MicroDeviceQueryAlertsWithFilterArgs) DeepEqual(ano *MicroDeviceQueryAlertsWithFilterArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroDeviceQueryAlertsWithFilterArgs) Field1DeepEqual(src *alert.AlertFilter) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroDeviceQueryAlertsWithFilterResult struct {
	Success []*alert.AlertInfo `thrift:"success,0,optional" frugal:"0,optional,list<alert.AlertInfo>" json:"success,omitempty"`
}

func NewMicroDeviceQueryAlertsWithFilterResult() *MicroDeviceQueryAlertsWithFilterResult {
	return &MicroDeviceQueryAlertsWithFilterResult{}
}

func (p *MicroDeviceQueryAlertsWithFilterResult) InitDefault() {
	*p = MicroDeviceQueryAlertsWithFilterResult{}
}

var MicroDeviceQueryAlertsWithFilterResult_Success_DEFAULT []*alert.AlertInfo

func (p *MicroDeviceQueryAlertsWithFilterResult) GetSuccess() (v []*alert.AlertInfo) {
	if !p.IsSetSuccess() {
		return MicroDeviceQueryAlertsWithFilterResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroDeviceQueryAlertsWithFilterResult) SetSuccess(x interface{}) {
	p.Success = x.([]*alert.AlertInfo)
}

var fieldIDToName_MicroDeviceQueryAlertsWithFilterResult = map[int16]string{
	0: "success",
}

func (p *MicroDeviceQueryAlertsWithFilterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroDeviceQueryAlertsWithFilterResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceQueryAlertsWithFilterResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceQueryAlertsWithFilterResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Success = make([]*alert.AlertInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := alert.NewAlertInfo()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Success = append(p.Success, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceQueryAlertsWithFilterResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryAlertsWithFilter_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceQueryAlertsWithFilterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return err
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroDeviceQueryAlertsWithFilterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceQueryAlertsWithFilterResult(%+v)", *p)
}

func (p *MicroDeviceQueryAlertsWithFilterResult) DeepEqual(ano *MicroDeviceQueryAlertsWithFilterResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroDeviceQueryAlertsWithFilterResult) Field0DeepEqual(src []*alert.AlertInfo) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for i, v := range p.Success {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type MicroDeviceCreateAlertArgs struct {
	Req *alert.AlertInfo `thrift:"req,1" frugal:"1,default,alert.AlertInfo" json:"req"`
}

func NewMicroDeviceCreateAlertArgs() *MicroDeviceCreateAlertArgs {
	return &MicroDeviceCreateAlertArgs{}
}

func (p *MicroDeviceCreateAlertArgs) InitDefault() {
	*p = MicroDeviceCreateAlertArgs{}
}

var MicroDeviceCreateAlertArgs_Req_DEFAULT *alert.AlertInfo

func (p *MicroDeviceCreateAlertArgs) GetReq() (v *alert.AlertInfo) {
	if !p.IsSetReq() {
		return MicroDeviceCreateAlertArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroDeviceCreateAlertArgs) SetReq(val *alert.AlertInfo) {
	p.Req = val
}

var fieldIDToName_MicroDeviceCreateAlertArgs = map[int16]string{
	1: "req",
}

func (p *MicroDeviceCreateAlertArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroDeviceCreateAlertArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceCreateAlertArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceCreateAlertArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = alert.NewAlertInfo()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceCreateAlertArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateAlert_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceCreateAlertArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroDeviceCreateAlertArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceCreateAlertArgs(%+v)", *p)
}

func (p *MicroDeviceCreateAlertArgs) DeepEqual(ano *MicroDeviceCreateAlertArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroDeviceCreateAlertArgs) Field1DeepEqual(src *alert.AlertInfo) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroDeviceCreateAlertResult struct {
	Success *alert.AlertInfo `thrift:"success,0,optional" frugal:"0,optional,alert.AlertInfo" json:"success,omitempty"`
}

func NewMicroDeviceCreateAlertResult() *MicroDeviceCreateAlertResult {
	return &MicroDeviceCreateAlertResult{}
}

func (p *MicroDeviceCreateAlertResult) InitDefault() {
	*p = MicroDeviceCreateAlertResult{}
}

var MicroDeviceCreateAlertResult_Success_DEFAULT *alert.AlertInfo

func (p *MicroDeviceCreateAlertResult) GetSuccess() (v *alert.AlertInfo) {
	if !p.IsSetSuccess() {
		return MicroDeviceCreateAlertResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroDeviceCreateAlertResult) SetSuccess(x interface{}) {
	p.Success = x.(*alert.AlertInfo)
}

var fieldIDToName_MicroDeviceCreateAlertResult = map[int16]string{
	0: "success",
}

func (p *MicroDeviceCreateAlertResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroDeviceCreateAlertResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceCreateAlertResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceCreateAlertResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = alert.NewAlertInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceCreateAlertResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateAlert_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceCreateAlertResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroDeviceCreateAlertResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceCreateAlertResult(%+v)", *p)
}

func (p *MicroDeviceCreateAlertResult) DeepEqual(ano *MicroDeviceCreateAlertResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroDeviceCreateAlertResult) Field0DeepEqual(src *alert.AlertInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MicroDeviceUpdateAlertArgs struct {
	Req *alert.AlertInfo `thrift:"req,1" frugal:"1,default,alert.AlertInfo" json:"req"`
}

func NewMicroDeviceUpdateAlertArgs() *MicroDeviceUpdateAlertArgs {
	return &MicroDeviceUpdateAlertArgs{}
}

func (p *MicroDeviceUpdateAlertArgs) InitDefault() {
	*p = MicroDeviceUpdateAlertArgs{}
}

var MicroDeviceUpdateAlertArgs_Req_DEFAULT *alert.AlertInfo

func (p *MicroDeviceUpdateAlertArgs) GetReq() (v *alert.AlertInfo) {
	if !p.IsSetReq() {
		return MicroDeviceUpdateAlertArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroDeviceUpdateAlertArgs) SetReq(val *alert.AlertInfo) {
	p.Req = val
}

var fieldIDToName_MicroDeviceUpdateAlertArgs = map[int16]string{
	1: "req",
}

func (p *MicroDeviceUpdateAlertArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroDeviceUpdateAlertArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceUpdateAlertArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceUpdateAlertArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = alert.NewAlertInfo()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceUpdateAlertArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateAlert_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceUpdateAlertArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroDeviceUpdateAlertArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceUpdateAlertArgs(%+v)", *p)
}

func (p *MicroDeviceUpdateAlertArgs) DeepEqual(ano *MicroDeviceUpdateAlertArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroDeviceUpdateAlertArgs) Field1DeepEqual(src *alert.AlertInfo) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroDeviceUpdateAlertResult struct {
	Success *alert.AlertInfo `thrift:"success,0,optional" frugal:"0,optional,alert.AlertInfo" json:"success,omitempty"`
}

func NewMicroDeviceUpdateAlertResult() *MicroDeviceUpdateAlertResult {
	return &MicroDeviceUpdateAlertResult{}
}

func (p *MicroDeviceUpdateAlertResult) InitDefault() {
	*p = MicroDeviceUpdateAlertResult{}
}

var MicroDeviceUpdateAlertResult_Success_DEFAULT *alert.AlertInfo

func (p *MicroDeviceUpdateAlertResult) GetSuccess() (v *alert.AlertInfo) {
	if !p.IsSetSuccess() {
		return MicroDeviceUpdateAlertResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroDeviceUpdateAlertResult) SetSuccess(x interface{}) {
	p.Success = x.(*alert.AlertInfo)
}

var fieldIDToName_MicroDeviceUpdateAlertResult = map[int16]string{
	0: "success",
}

func (p *MicroDeviceUpdateAlertResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroDeviceUpdateAlertResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceUpdateAlertResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceUpdateAlertResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = alert.NewAlertInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceUpdateAlertResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateAlert_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceUpdateAlertResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroDeviceUpdateAlertResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceUpdateAlertResult(%+v)", *p)
}

func (p *MicroDeviceUpdateAlertResult) DeepEqual(ano *MicroDeviceUpdateAlertResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroDeviceUpdateAlertResult) Field0DeepEqual(src *alert.AlertInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MicroDeviceDeleteAlertArgs struct {
	Req *RpcDeleteAlertReq `thrift:"req,1" frugal:"1,default,RpcDeleteAlertReq" json:"req"`
}

func NewMicroDeviceDeleteAlertArgs() *MicroDeviceDeleteAlertArgs {
	return &MicroDeviceDeleteAlertArgs{}
}

func (p *MicroDeviceDeleteAlertArgs) InitDefault() {
	*p = MicroDeviceDeleteAlertArgs{}
}

var MicroDeviceDeleteAlertArgs_Req_DEFAULT *RpcDeleteAlertReq

func (p *MicroDeviceDeleteAlertArgs) GetReq() (v *RpcDeleteAlertReq) {
	if !p.IsSetReq() {
		return MicroDeviceDeleteAlertArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroDeviceDeleteAlertArgs) SetReq(val *RpcDeleteAlertReq) {
	p.Req = val
}

var fieldIDToName_MicroDeviceDeleteAlertArgs = map[int16]string{
	1: "req",
}

func (p *MicroDeviceDeleteAlertArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroDeviceDeleteAlertArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceDeleteAlertArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceDeleteAlertArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewRpcDeleteAlertReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceDeleteAlertArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteAlert_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceDeleteAlertArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroDeviceDeleteAlertArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceDeleteAlertArgs(%+v)", *p)
}

func (p *MicroDeviceDeleteAlertArgs) DeepEqual(ano *MicroDeviceDeleteAlertArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroDeviceDeleteAlertArgs) Field1DeepEqual(src *RpcDeleteAlertReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroDeviceDeleteAlertResult struct {
	Success *common.Empty `thrift:"success,0,optional" frugal:"0,optional,common.Empty" json:"success,omitempty"`
}

func NewMicroDeviceDeleteAlertResult() *MicroDeviceDeleteAlertResult {
	return &MicroDeviceDeleteAlertResult{}
}

func (p *MicroDeviceDeleteAlertResult) InitDefault() {
	*p = MicroDeviceDeleteAlertResult{}
}

var MicroDeviceDeleteAlertResult_Success_DEFAULT *common.Empty

func (p *MicroDeviceDeleteAlertResult) GetSuccess() (v *common.Empty) {
	if !p.IsSetSuccess() {
		return MicroDeviceDeleteAlertResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroDeviceDeleteAlertResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.Empty)
}

var fieldIDToName_MicroDeviceDeleteAlertResult = map[int16]string{
	0: "success",
}

func (p *MicroDeviceDeleteAlertResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroDeviceDeleteAlertResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroDeviceDeleteAlertResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroDeviceDeleteAlertResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmpty()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroDeviceDeleteAlertResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteAlert_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroDeviceDeleteAlertResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroDeviceDeleteAlertResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroDeviceDeleteAlertResult(%+v)", *p)
}

func (p *MicroDeviceDeleteAlertResult) DeepEqual(ano *MicroDeviceDeleteAlertResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroDeviceDeleteAlertResult) Field0DeepEqual(src *common.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
