// Code generated by thriftgo (0.3.3). DO NOT EDIT.

package category

import (
	"context"
	"fmt"
	"git.zqbjj.top/pet/services/cmd/http/kitex_gen/common"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type CategoryInfo struct {
	Id       int32    `thrift:"Id,1,required" frugal:"1,required,i32" json:"Id"`
	Name     string   `thrift:"Name,2,required" frugal:"2,required,string" json:"Name"`
	Picture  string   `thrift:"Picture,3,required" frugal:"3,required,string" json:"Picture"`
	Showcase []string `thrift:"Showcase,4,required" frugal:"4,required,list<string>" json:"Showcase"`
	Brief    string   `thrift:"Brief,5,required" frugal:"5,required,string" json:"Brief"`
}

func NewCategoryInfo() *CategoryInfo {
	return &CategoryInfo{}
}

func (p *CategoryInfo) InitDefault() {
	*p = CategoryInfo{}
}

func (p *CategoryInfo) GetId() (v int32) {
	return p.Id
}

func (p *CategoryInfo) GetName() (v string) {
	return p.Name
}

func (p *CategoryInfo) GetPicture() (v string) {
	return p.Picture
}

func (p *CategoryInfo) GetShowcase() (v []string) {
	return p.Showcase
}

func (p *CategoryInfo) GetBrief() (v string) {
	return p.Brief
}
func (p *CategoryInfo) SetId(val int32) {
	p.Id = val
}
func (p *CategoryInfo) SetName(val string) {
	p.Name = val
}
func (p *CategoryInfo) SetPicture(val string) {
	p.Picture = val
}
func (p *CategoryInfo) SetShowcase(val []string) {
	p.Showcase = val
}
func (p *CategoryInfo) SetBrief(val string) {
	p.Brief = val
}

var fieldIDToName_CategoryInfo = map[int16]string{
	1: "Id",
	2: "Name",
	3: "Picture",
	4: "Showcase",
	5: "Brief",
}

func (p *CategoryInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetName bool = false
	var issetPicture bool = false
	var issetShowcase bool = false
	var issetBrief bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPicture = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetShowcase = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetBrief = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPicture {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetShowcase {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetBrief {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CategoryInfo[fieldId]))
}

func (p *CategoryInfo) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}
func (p *CategoryInfo) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}
func (p *CategoryInfo) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Picture = v
	}
	return nil
}
func (p *CategoryInfo) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Showcase = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Showcase = append(p.Showcase, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *CategoryInfo) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Brief = v
	}
	return nil
}

func (p *CategoryInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CategoryInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CategoryInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CategoryInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Picture", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Picture); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CategoryInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Showcase", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Showcase)); err != nil {
		return err
	}
	for _, v := range p.Showcase {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *CategoryInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Brief", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Brief); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CategoryInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryInfo(%+v)", *p)
}

func (p *CategoryInfo) DeepEqual(ano *CategoryInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Picture) {
		return false
	}
	if !p.Field4DeepEqual(ano.Showcase) {
		return false
	}
	if !p.Field5DeepEqual(ano.Brief) {
		return false
	}
	return true
}

func (p *CategoryInfo) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *CategoryInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CategoryInfo) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Picture, src) != 0 {
		return false
	}
	return true
}
func (p *CategoryInfo) Field4DeepEqual(src []string) bool {

	if len(p.Showcase) != len(src) {
		return false
	}
	for i, v := range p.Showcase {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *CategoryInfo) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Brief, src) != 0 {
		return false
	}
	return true
}

type NewCategory_ struct {
	Name     string   `thrift:"Name,2,required" frugal:"2,required,string" json:"Name"`
	Picture  string   `thrift:"Picture,3,required" frugal:"3,required,string" json:"Picture"`
	Showcase []string `thrift:"Showcase,4,required" frugal:"4,required,list<string>" json:"Showcase"`
	Brief    string   `thrift:"Brief,5,required" frugal:"5,required,string" json:"Brief"`
}

func NewNewCategory_() *NewCategory_ {
	return &NewCategory_{}
}

func (p *NewCategory_) InitDefault() {
	*p = NewCategory_{}
}

func (p *NewCategory_) GetName() (v string) {
	return p.Name
}

func (p *NewCategory_) GetPicture() (v string) {
	return p.Picture
}

func (p *NewCategory_) GetShowcase() (v []string) {
	return p.Showcase
}

func (p *NewCategory_) GetBrief() (v string) {
	return p.Brief
}
func (p *NewCategory_) SetName(val string) {
	p.Name = val
}
func (p *NewCategory_) SetPicture(val string) {
	p.Picture = val
}
func (p *NewCategory_) SetShowcase(val []string) {
	p.Showcase = val
}
func (p *NewCategory_) SetBrief(val string) {
	p.Brief = val
}

var fieldIDToName_NewCategory_ = map[int16]string{
	2: "Name",
	3: "Picture",
	4: "Showcase",
	5: "Brief",
}

func (p *NewCategory_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetPicture bool = false
	var issetShowcase bool = false
	var issetBrief bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPicture = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetShowcase = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetBrief = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPicture {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetShowcase {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetBrief {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NewCategory_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_NewCategory_[fieldId]))
}

func (p *NewCategory_) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}
func (p *NewCategory_) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Picture = v
	}
	return nil
}
func (p *NewCategory_) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Showcase = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Showcase = append(p.Showcase, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *NewCategory_) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Brief = v
	}
	return nil
}

func (p *NewCategory_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NewCategory"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NewCategory_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *NewCategory_) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Picture", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Picture); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *NewCategory_) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Showcase", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Showcase)); err != nil {
		return err
	}
	for _, v := range p.Showcase {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *NewCategory_) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Brief", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Brief); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *NewCategory_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NewCategory_(%+v)", *p)
}

func (p *NewCategory_) DeepEqual(ano *NewCategory_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Picture) {
		return false
	}
	if !p.Field4DeepEqual(ano.Showcase) {
		return false
	}
	if !p.Field5DeepEqual(ano.Brief) {
		return false
	}
	return true
}

func (p *NewCategory_) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *NewCategory_) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Picture, src) != 0 {
		return false
	}
	return true
}
func (p *NewCategory_) Field4DeepEqual(src []string) bool {

	if len(p.Showcase) != len(src) {
		return false
	}
	for i, v := range p.Showcase {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *NewCategory_) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Brief, src) != 0 {
		return false
	}
	return true
}

type Category interface {
	GetCategoryList(ctx context.Context, req *common.PageFilter) (r []*CategoryInfo, err error)

	GetCategoryDetail(ctx context.Context, req *common.Req) (r *CategoryInfo, err error)

	AddNewCategory(ctx context.Context, req *NewCategory_) (r *CategoryInfo, err error)

	UpdateCategory(ctx context.Context, req *CategoryInfo) (r *CategoryInfo, err error)

	DeleteCategory(ctx context.Context, req *common.Req) (r *common.Empty, err error)
}

type CategoryClient struct {
	c thrift.TClient
}

func NewCategoryClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CategoryClient {
	return &CategoryClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewCategoryClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CategoryClient {
	return &CategoryClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewCategoryClient(c thrift.TClient) *CategoryClient {
	return &CategoryClient{
		c: c,
	}
}

func (p *CategoryClient) Client_() thrift.TClient {
	return p.c
}

func (p *CategoryClient) GetCategoryList(ctx context.Context, req *common.PageFilter) (r []*CategoryInfo, err error) {
	var _args CategoryGetCategoryListArgs
	_args.Req = req
	var _result CategoryGetCategoryListResult
	if err = p.Client_().Call(ctx, "GetCategoryList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CategoryClient) GetCategoryDetail(ctx context.Context, req *common.Req) (r *CategoryInfo, err error) {
	var _args CategoryGetCategoryDetailArgs
	_args.Req = req
	var _result CategoryGetCategoryDetailResult
	if err = p.Client_().Call(ctx, "GetCategoryDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CategoryClient) AddNewCategory(ctx context.Context, req *NewCategory_) (r *CategoryInfo, err error) {
	var _args CategoryAddNewCategoryArgs
	_args.Req = req
	var _result CategoryAddNewCategoryResult
	if err = p.Client_().Call(ctx, "AddNewCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CategoryClient) UpdateCategory(ctx context.Context, req *CategoryInfo) (r *CategoryInfo, err error) {
	var _args CategoryUpdateCategoryArgs
	_args.Req = req
	var _result CategoryUpdateCategoryResult
	if err = p.Client_().Call(ctx, "UpdateCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CategoryClient) DeleteCategory(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args CategoryDeleteCategoryArgs
	_args.Req = req
	var _result CategoryDeleteCategoryResult
	if err = p.Client_().Call(ctx, "DeleteCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type CategoryProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      Category
}

func (p *CategoryProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CategoryProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *CategoryProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCategoryProcessor(handler Category) *CategoryProcessor {
	self := &CategoryProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetCategoryList", &categoryProcessorGetCategoryList{handler: handler})
	self.AddToProcessorMap("GetCategoryDetail", &categoryProcessorGetCategoryDetail{handler: handler})
	self.AddToProcessorMap("AddNewCategory", &categoryProcessorAddNewCategory{handler: handler})
	self.AddToProcessorMap("UpdateCategory", &categoryProcessorUpdateCategory{handler: handler})
	self.AddToProcessorMap("DeleteCategory", &categoryProcessorDeleteCategory{handler: handler})
	return self
}
func (p *CategoryProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type categoryProcessorGetCategoryList struct {
	handler Category
}

func (p *categoryProcessorGetCategoryList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CategoryGetCategoryListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetCategoryList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CategoryGetCategoryListResult{}
	var retval []*CategoryInfo
	if retval, err2 = p.handler.GetCategoryList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCategoryList: "+err2.Error())
		oprot.WriteMessageBegin("GetCategoryList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetCategoryList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type categoryProcessorGetCategoryDetail struct {
	handler Category
}

func (p *categoryProcessorGetCategoryDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CategoryGetCategoryDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetCategoryDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CategoryGetCategoryDetailResult{}
	var retval *CategoryInfo
	if retval, err2 = p.handler.GetCategoryDetail(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCategoryDetail: "+err2.Error())
		oprot.WriteMessageBegin("GetCategoryDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetCategoryDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type categoryProcessorAddNewCategory struct {
	handler Category
}

func (p *categoryProcessorAddNewCategory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CategoryAddNewCategoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddNewCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CategoryAddNewCategoryResult{}
	var retval *CategoryInfo
	if retval, err2 = p.handler.AddNewCategory(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddNewCategory: "+err2.Error())
		oprot.WriteMessageBegin("AddNewCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddNewCategory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type categoryProcessorUpdateCategory struct {
	handler Category
}

func (p *categoryProcessorUpdateCategory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CategoryUpdateCategoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CategoryUpdateCategoryResult{}
	var retval *CategoryInfo
	if retval, err2 = p.handler.UpdateCategory(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateCategory: "+err2.Error())
		oprot.WriteMessageBegin("UpdateCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateCategory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type categoryProcessorDeleteCategory struct {
	handler Category
}

func (p *categoryProcessorDeleteCategory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CategoryDeleteCategoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CategoryDeleteCategoryResult{}
	var retval *common.Empty
	if retval, err2 = p.handler.DeleteCategory(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteCategory: "+err2.Error())
		oprot.WriteMessageBegin("DeleteCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteCategory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type CategoryGetCategoryListArgs struct {
	Req *common.PageFilter `thrift:"req,1" frugal:"1,default,common.PageFilter" json:"req"`
}

func NewCategoryGetCategoryListArgs() *CategoryGetCategoryListArgs {
	return &CategoryGetCategoryListArgs{}
}

func (p *CategoryGetCategoryListArgs) InitDefault() {
	*p = CategoryGetCategoryListArgs{}
}

var CategoryGetCategoryListArgs_Req_DEFAULT *common.PageFilter

func (p *CategoryGetCategoryListArgs) GetReq() (v *common.PageFilter) {
	if !p.IsSetReq() {
		return CategoryGetCategoryListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CategoryGetCategoryListArgs) SetReq(val *common.PageFilter) {
	p.Req = val
}

var fieldIDToName_CategoryGetCategoryListArgs = map[int16]string{
	1: "req",
}

func (p *CategoryGetCategoryListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CategoryGetCategoryListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryGetCategoryListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryGetCategoryListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common.NewPageFilter()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryGetCategoryListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCategoryList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryGetCategoryListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CategoryGetCategoryListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryGetCategoryListArgs(%+v)", *p)
}

func (p *CategoryGetCategoryListArgs) DeepEqual(ano *CategoryGetCategoryListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CategoryGetCategoryListArgs) Field1DeepEqual(src *common.PageFilter) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryGetCategoryListResult struct {
	Success []*CategoryInfo `thrift:"success,0,optional" frugal:"0,optional,list<CategoryInfo>" json:"success,omitempty"`
}

func NewCategoryGetCategoryListResult() *CategoryGetCategoryListResult {
	return &CategoryGetCategoryListResult{}
}

func (p *CategoryGetCategoryListResult) InitDefault() {
	*p = CategoryGetCategoryListResult{}
}

var CategoryGetCategoryListResult_Success_DEFAULT []*CategoryInfo

func (p *CategoryGetCategoryListResult) GetSuccess() (v []*CategoryInfo) {
	if !p.IsSetSuccess() {
		return CategoryGetCategoryListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CategoryGetCategoryListResult) SetSuccess(x interface{}) {
	p.Success = x.([]*CategoryInfo)
}

var fieldIDToName_CategoryGetCategoryListResult = map[int16]string{
	0: "success",
}

func (p *CategoryGetCategoryListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CategoryGetCategoryListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryGetCategoryListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryGetCategoryListResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Success = make([]*CategoryInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewCategoryInfo()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Success = append(p.Success, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CategoryGetCategoryListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCategoryList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryGetCategoryListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return err
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CategoryGetCategoryListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryGetCategoryListResult(%+v)", *p)
}

func (p *CategoryGetCategoryListResult) DeepEqual(ano *CategoryGetCategoryListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CategoryGetCategoryListResult) Field0DeepEqual(src []*CategoryInfo) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for i, v := range p.Success {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CategoryGetCategoryDetailArgs struct {
	Req *common.Req `thrift:"req,1" frugal:"1,default,common.Req" json:"req"`
}

func NewCategoryGetCategoryDetailArgs() *CategoryGetCategoryDetailArgs {
	return &CategoryGetCategoryDetailArgs{}
}

func (p *CategoryGetCategoryDetailArgs) InitDefault() {
	*p = CategoryGetCategoryDetailArgs{}
}

var CategoryGetCategoryDetailArgs_Req_DEFAULT *common.Req

func (p *CategoryGetCategoryDetailArgs) GetReq() (v *common.Req) {
	if !p.IsSetReq() {
		return CategoryGetCategoryDetailArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CategoryGetCategoryDetailArgs) SetReq(val *common.Req) {
	p.Req = val
}

var fieldIDToName_CategoryGetCategoryDetailArgs = map[int16]string{
	1: "req",
}

func (p *CategoryGetCategoryDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CategoryGetCategoryDetailArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryGetCategoryDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryGetCategoryDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common.NewReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryGetCategoryDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCategoryDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryGetCategoryDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CategoryGetCategoryDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryGetCategoryDetailArgs(%+v)", *p)
}

func (p *CategoryGetCategoryDetailArgs) DeepEqual(ano *CategoryGetCategoryDetailArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CategoryGetCategoryDetailArgs) Field1DeepEqual(src *common.Req) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryGetCategoryDetailResult struct {
	Success *CategoryInfo `thrift:"success,0,optional" frugal:"0,optional,CategoryInfo" json:"success,omitempty"`
}

func NewCategoryGetCategoryDetailResult() *CategoryGetCategoryDetailResult {
	return &CategoryGetCategoryDetailResult{}
}

func (p *CategoryGetCategoryDetailResult) InitDefault() {
	*p = CategoryGetCategoryDetailResult{}
}

var CategoryGetCategoryDetailResult_Success_DEFAULT *CategoryInfo

func (p *CategoryGetCategoryDetailResult) GetSuccess() (v *CategoryInfo) {
	if !p.IsSetSuccess() {
		return CategoryGetCategoryDetailResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CategoryGetCategoryDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*CategoryInfo)
}

var fieldIDToName_CategoryGetCategoryDetailResult = map[int16]string{
	0: "success",
}

func (p *CategoryGetCategoryDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CategoryGetCategoryDetailResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryGetCategoryDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryGetCategoryDetailResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCategoryInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryGetCategoryDetailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCategoryDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryGetCategoryDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CategoryGetCategoryDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryGetCategoryDetailResult(%+v)", *p)
}

func (p *CategoryGetCategoryDetailResult) DeepEqual(ano *CategoryGetCategoryDetailResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CategoryGetCategoryDetailResult) Field0DeepEqual(src *CategoryInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryAddNewCategoryArgs struct {
	Req *NewCategory_ `thrift:"req,1" frugal:"1,default,NewCategory_" json:"req"`
}

func NewCategoryAddNewCategoryArgs() *CategoryAddNewCategoryArgs {
	return &CategoryAddNewCategoryArgs{}
}

func (p *CategoryAddNewCategoryArgs) InitDefault() {
	*p = CategoryAddNewCategoryArgs{}
}

var CategoryAddNewCategoryArgs_Req_DEFAULT *NewCategory_

func (p *CategoryAddNewCategoryArgs) GetReq() (v *NewCategory_) {
	if !p.IsSetReq() {
		return CategoryAddNewCategoryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CategoryAddNewCategoryArgs) SetReq(val *NewCategory_) {
	p.Req = val
}

var fieldIDToName_CategoryAddNewCategoryArgs = map[int16]string{
	1: "req",
}

func (p *CategoryAddNewCategoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CategoryAddNewCategoryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryAddNewCategoryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryAddNewCategoryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewNewCategory_()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryAddNewCategoryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddNewCategory_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryAddNewCategoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CategoryAddNewCategoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryAddNewCategoryArgs(%+v)", *p)
}

func (p *CategoryAddNewCategoryArgs) DeepEqual(ano *CategoryAddNewCategoryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CategoryAddNewCategoryArgs) Field1DeepEqual(src *NewCategory_) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryAddNewCategoryResult struct {
	Success *CategoryInfo `thrift:"success,0,optional" frugal:"0,optional,CategoryInfo" json:"success,omitempty"`
}

func NewCategoryAddNewCategoryResult() *CategoryAddNewCategoryResult {
	return &CategoryAddNewCategoryResult{}
}

func (p *CategoryAddNewCategoryResult) InitDefault() {
	*p = CategoryAddNewCategoryResult{}
}

var CategoryAddNewCategoryResult_Success_DEFAULT *CategoryInfo

func (p *CategoryAddNewCategoryResult) GetSuccess() (v *CategoryInfo) {
	if !p.IsSetSuccess() {
		return CategoryAddNewCategoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CategoryAddNewCategoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*CategoryInfo)
}

var fieldIDToName_CategoryAddNewCategoryResult = map[int16]string{
	0: "success",
}

func (p *CategoryAddNewCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CategoryAddNewCategoryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryAddNewCategoryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryAddNewCategoryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCategoryInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryAddNewCategoryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddNewCategory_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryAddNewCategoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CategoryAddNewCategoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryAddNewCategoryResult(%+v)", *p)
}

func (p *CategoryAddNewCategoryResult) DeepEqual(ano *CategoryAddNewCategoryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CategoryAddNewCategoryResult) Field0DeepEqual(src *CategoryInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryUpdateCategoryArgs struct {
	Req *CategoryInfo `thrift:"req,1" frugal:"1,default,CategoryInfo" json:"req"`
}

func NewCategoryUpdateCategoryArgs() *CategoryUpdateCategoryArgs {
	return &CategoryUpdateCategoryArgs{}
}

func (p *CategoryUpdateCategoryArgs) InitDefault() {
	*p = CategoryUpdateCategoryArgs{}
}

var CategoryUpdateCategoryArgs_Req_DEFAULT *CategoryInfo

func (p *CategoryUpdateCategoryArgs) GetReq() (v *CategoryInfo) {
	if !p.IsSetReq() {
		return CategoryUpdateCategoryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CategoryUpdateCategoryArgs) SetReq(val *CategoryInfo) {
	p.Req = val
}

var fieldIDToName_CategoryUpdateCategoryArgs = map[int16]string{
	1: "req",
}

func (p *CategoryUpdateCategoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CategoryUpdateCategoryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryUpdateCategoryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryUpdateCategoryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCategoryInfo()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryUpdateCategoryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCategory_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryUpdateCategoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CategoryUpdateCategoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryUpdateCategoryArgs(%+v)", *p)
}

func (p *CategoryUpdateCategoryArgs) DeepEqual(ano *CategoryUpdateCategoryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CategoryUpdateCategoryArgs) Field1DeepEqual(src *CategoryInfo) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryUpdateCategoryResult struct {
	Success *CategoryInfo `thrift:"success,0,optional" frugal:"0,optional,CategoryInfo" json:"success,omitempty"`
}

func NewCategoryUpdateCategoryResult() *CategoryUpdateCategoryResult {
	return &CategoryUpdateCategoryResult{}
}

func (p *CategoryUpdateCategoryResult) InitDefault() {
	*p = CategoryUpdateCategoryResult{}
}

var CategoryUpdateCategoryResult_Success_DEFAULT *CategoryInfo

func (p *CategoryUpdateCategoryResult) GetSuccess() (v *CategoryInfo) {
	if !p.IsSetSuccess() {
		return CategoryUpdateCategoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CategoryUpdateCategoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*CategoryInfo)
}

var fieldIDToName_CategoryUpdateCategoryResult = map[int16]string{
	0: "success",
}

func (p *CategoryUpdateCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CategoryUpdateCategoryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryUpdateCategoryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryUpdateCategoryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCategoryInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryUpdateCategoryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCategory_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryUpdateCategoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CategoryUpdateCategoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryUpdateCategoryResult(%+v)", *p)
}

func (p *CategoryUpdateCategoryResult) DeepEqual(ano *CategoryUpdateCategoryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CategoryUpdateCategoryResult) Field0DeepEqual(src *CategoryInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryDeleteCategoryArgs struct {
	Req *common.Req `thrift:"req,1" frugal:"1,default,common.Req" json:"req"`
}

func NewCategoryDeleteCategoryArgs() *CategoryDeleteCategoryArgs {
	return &CategoryDeleteCategoryArgs{}
}

func (p *CategoryDeleteCategoryArgs) InitDefault() {
	*p = CategoryDeleteCategoryArgs{}
}

var CategoryDeleteCategoryArgs_Req_DEFAULT *common.Req

func (p *CategoryDeleteCategoryArgs) GetReq() (v *common.Req) {
	if !p.IsSetReq() {
		return CategoryDeleteCategoryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CategoryDeleteCategoryArgs) SetReq(val *common.Req) {
	p.Req = val
}

var fieldIDToName_CategoryDeleteCategoryArgs = map[int16]string{
	1: "req",
}

func (p *CategoryDeleteCategoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CategoryDeleteCategoryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryDeleteCategoryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryDeleteCategoryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common.NewReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryDeleteCategoryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCategory_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryDeleteCategoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CategoryDeleteCategoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryDeleteCategoryArgs(%+v)", *p)
}

func (p *CategoryDeleteCategoryArgs) DeepEqual(ano *CategoryDeleteCategoryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CategoryDeleteCategoryArgs) Field1DeepEqual(src *common.Req) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryDeleteCategoryResult struct {
	Success *common.Empty `thrift:"success,0,optional" frugal:"0,optional,common.Empty" json:"success,omitempty"`
}

func NewCategoryDeleteCategoryResult() *CategoryDeleteCategoryResult {
	return &CategoryDeleteCategoryResult{}
}

func (p *CategoryDeleteCategoryResult) InitDefault() {
	*p = CategoryDeleteCategoryResult{}
}

var CategoryDeleteCategoryResult_Success_DEFAULT *common.Empty

func (p *CategoryDeleteCategoryResult) GetSuccess() (v *common.Empty) {
	if !p.IsSetSuccess() {
		return CategoryDeleteCategoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CategoryDeleteCategoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.Empty)
}

var fieldIDToName_CategoryDeleteCategoryResult = map[int16]string{
	0: "success",
}

func (p *CategoryDeleteCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CategoryDeleteCategoryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryDeleteCategoryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryDeleteCategoryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmpty()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryDeleteCategoryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCategory_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryDeleteCategoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CategoryDeleteCategoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryDeleteCategoryResult(%+v)", *p)
}

func (p *CategoryDeleteCategoryResult) DeepEqual(ano *CategoryDeleteCategoryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CategoryDeleteCategoryResult) Field0DeepEqual(src *common.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
