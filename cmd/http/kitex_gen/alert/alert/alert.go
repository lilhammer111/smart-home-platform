// Code generated by Kitex v0.6.1. DO NOT EDIT.

package alert

import (
	"context"
	alert "git.zqbjj.top/pet/services/cmd/http/kitex_gen/alert"
	common "git.zqbjj.top/pet/services/cmd/http/kitex_gen/common"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return alertServiceInfo
}

var alertServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "alert"
	handlerType := (*alert.Alert)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetAlertList":    kitex.NewMethodInfo(getAlertListHandler, newAlertGetAlertListArgs, newAlertGetAlertListResult, false),
		"GetAlertDetail":  kitex.NewMethodInfo(getAlertDetailHandler, newAlertGetAlertDetailArgs, newAlertGetAlertDetailResult, false),
		"UpdateAlertInfo": kitex.NewMethodInfo(updateAlertInfoHandler, newAlertUpdateAlertInfoArgs, newAlertUpdateAlertInfoResult, false),
		"UploadAlertInfo": kitex.NewMethodInfo(uploadAlertInfoHandler, newAlertUploadAlertInfoArgs, newAlertUploadAlertInfoResult, false),
		"DeleteAlert":     kitex.NewMethodInfo(deleteAlertHandler, newAlertDeleteAlertArgs, newAlertDeleteAlertResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "alert",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func getAlertListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*alert.AlertGetAlertListArgs)
	realResult := result.(*alert.AlertGetAlertListResult)
	success, err := handler.(alert.Alert).GetAlertList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAlertGetAlertListArgs() interface{} {
	return alert.NewAlertGetAlertListArgs()
}

func newAlertGetAlertListResult() interface{} {
	return alert.NewAlertGetAlertListResult()
}

func getAlertDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*alert.AlertGetAlertDetailArgs)
	realResult := result.(*alert.AlertGetAlertDetailResult)
	success, err := handler.(alert.Alert).GetAlertDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAlertGetAlertDetailArgs() interface{} {
	return alert.NewAlertGetAlertDetailArgs()
}

func newAlertGetAlertDetailResult() interface{} {
	return alert.NewAlertGetAlertDetailResult()
}

func updateAlertInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*alert.AlertUpdateAlertInfoArgs)
	realResult := result.(*alert.AlertUpdateAlertInfoResult)
	success, err := handler.(alert.Alert).UpdateAlertInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAlertUpdateAlertInfoArgs() interface{} {
	return alert.NewAlertUpdateAlertInfoArgs()
}

func newAlertUpdateAlertInfoResult() interface{} {
	return alert.NewAlertUpdateAlertInfoResult()
}

func uploadAlertInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*alert.AlertUploadAlertInfoArgs)
	realResult := result.(*alert.AlertUploadAlertInfoResult)
	success, err := handler.(alert.Alert).UploadAlertInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAlertUploadAlertInfoArgs() interface{} {
	return alert.NewAlertUploadAlertInfoArgs()
}

func newAlertUploadAlertInfoResult() interface{} {
	return alert.NewAlertUploadAlertInfoResult()
}

func deleteAlertHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*alert.AlertDeleteAlertArgs)
	realResult := result.(*alert.AlertDeleteAlertResult)
	success, err := handler.(alert.Alert).DeleteAlert(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAlertDeleteAlertArgs() interface{} {
	return alert.NewAlertDeleteAlertArgs()
}

func newAlertDeleteAlertResult() interface{} {
	return alert.NewAlertDeleteAlertResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetAlertList(ctx context.Context, req *alert.AlertFilter) (r []*alert.AlertInfo, err error) {
	var _args alert.AlertGetAlertListArgs
	_args.Req = req
	var _result alert.AlertGetAlertListResult
	if err = p.c.Call(ctx, "GetAlertList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAlertDetail(ctx context.Context, req *common.Req) (r *alert.AlertInfo, err error) {
	var _args alert.AlertGetAlertDetailArgs
	_args.Req = req
	var _result alert.AlertGetAlertDetailResult
	if err = p.c.Call(ctx, "GetAlertDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateAlertInfo(ctx context.Context, req *alert.AlertInfo) (r *alert.AlertInfo, err error) {
	var _args alert.AlertUpdateAlertInfoArgs
	_args.Req = req
	var _result alert.AlertUpdateAlertInfoResult
	if err = p.c.Call(ctx, "UpdateAlertInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UploadAlertInfo(ctx context.Context, req *alert.AlertInfo) (r *alert.AlertInfo, err error) {
	var _args alert.AlertUploadAlertInfoArgs
	_args.Req = req
	var _result alert.AlertUploadAlertInfoResult
	if err = p.c.Call(ctx, "UploadAlertInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteAlert(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args alert.AlertDeleteAlertArgs
	_args.Req = req
	var _result alert.AlertDeleteAlertResult
	if err = p.c.Call(ctx, "DeleteAlert", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
