// Code generated by thriftgo (0.3.3). DO NOT EDIT.

package product

import (
	"context"
	"fmt"
	"git.zqbjj.top/pet/services/cmd/http/kitex_gen/common"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type ProductFilter struct {
	Page           *int16  `thrift:"Page,30,optional" frugal:"30,optional,i16" json:"Page,omitempty"`
	Limit          *int16  `thrift:"Limit,31,optional" frugal:"31,optional,i16" json:"Limit,omitempty"`
	Search         *string `thrift:"Search,1,optional" frugal:"1,optional,string" json:"Search,omitempty"`
	CategoryId     *int32  `thrift:"CategoryId,2,optional" frugal:"2,optional,i32" json:"CategoryId,omitempty"`
	BrandIdList    []int32 `thrift:"BrandIdList,3,optional" frugal:"3,optional,list<i32>" json:"BrandIdList,omitempty"`
	IsPriceAsc     *bool   `thrift:"IsPriceAsc,4,optional" frugal:"4,optional,bool" json:"IsPriceAsc,omitempty"`
	IsRatingAsc    *bool   `thrift:"IsRatingAsc,5,optional" frugal:"5,optional,bool" json:"IsRatingAsc,omitempty"`
	OnSale         *bool   `thrift:"OnSale,20,optional" frugal:"20,optional,bool" json:"OnSale,omitempty"`
	IsFreeShipping *bool   `thrift:"IsFreeShipping,21,optional" frugal:"21,optional,bool" json:"IsFreeShipping,omitempty"`
	IsNew          *bool   `thrift:"IsNew,22,optional" frugal:"22,optional,bool" json:"IsNew,omitempty"`
	IsHot          *bool   `thrift:"IsHot,23,optional" frugal:"23,optional,bool" json:"IsHot,omitempty"`
	IsRecommended  *bool   `thrift:"IsRecommended,24,optional" frugal:"24,optional,bool" json:"IsRecommended,omitempty"`
}

func NewProductFilter() *ProductFilter {
	return &ProductFilter{}
}

func (p *ProductFilter) InitDefault() {
	*p = ProductFilter{}
}

var ProductFilter_Page_DEFAULT int16

func (p *ProductFilter) GetPage() (v int16) {
	if !p.IsSetPage() {
		return ProductFilter_Page_DEFAULT
	}
	return *p.Page
}

var ProductFilter_Limit_DEFAULT int16

func (p *ProductFilter) GetLimit() (v int16) {
	if !p.IsSetLimit() {
		return ProductFilter_Limit_DEFAULT
	}
	return *p.Limit
}

var ProductFilter_Search_DEFAULT string

func (p *ProductFilter) GetSearch() (v string) {
	if !p.IsSetSearch() {
		return ProductFilter_Search_DEFAULT
	}
	return *p.Search
}

var ProductFilter_CategoryId_DEFAULT int32

func (p *ProductFilter) GetCategoryId() (v int32) {
	if !p.IsSetCategoryId() {
		return ProductFilter_CategoryId_DEFAULT
	}
	return *p.CategoryId
}

var ProductFilter_BrandIdList_DEFAULT []int32

func (p *ProductFilter) GetBrandIdList() (v []int32) {
	if !p.IsSetBrandIdList() {
		return ProductFilter_BrandIdList_DEFAULT
	}
	return p.BrandIdList
}

var ProductFilter_IsPriceAsc_DEFAULT bool

func (p *ProductFilter) GetIsPriceAsc() (v bool) {
	if !p.IsSetIsPriceAsc() {
		return ProductFilter_IsPriceAsc_DEFAULT
	}
	return *p.IsPriceAsc
}

var ProductFilter_IsRatingAsc_DEFAULT bool

func (p *ProductFilter) GetIsRatingAsc() (v bool) {
	if !p.IsSetIsRatingAsc() {
		return ProductFilter_IsRatingAsc_DEFAULT
	}
	return *p.IsRatingAsc
}

var ProductFilter_OnSale_DEFAULT bool

func (p *ProductFilter) GetOnSale() (v bool) {
	if !p.IsSetOnSale() {
		return ProductFilter_OnSale_DEFAULT
	}
	return *p.OnSale
}

var ProductFilter_IsFreeShipping_DEFAULT bool

func (p *ProductFilter) GetIsFreeShipping() (v bool) {
	if !p.IsSetIsFreeShipping() {
		return ProductFilter_IsFreeShipping_DEFAULT
	}
	return *p.IsFreeShipping
}

var ProductFilter_IsNew_DEFAULT bool

func (p *ProductFilter) GetIsNew() (v bool) {
	if !p.IsSetIsNew() {
		return ProductFilter_IsNew_DEFAULT
	}
	return *p.IsNew
}

var ProductFilter_IsHot_DEFAULT bool

func (p *ProductFilter) GetIsHot() (v bool) {
	if !p.IsSetIsHot() {
		return ProductFilter_IsHot_DEFAULT
	}
	return *p.IsHot
}

var ProductFilter_IsRecommended_DEFAULT bool

func (p *ProductFilter) GetIsRecommended() (v bool) {
	if !p.IsSetIsRecommended() {
		return ProductFilter_IsRecommended_DEFAULT
	}
	return *p.IsRecommended
}
func (p *ProductFilter) SetPage(val *int16) {
	p.Page = val
}
func (p *ProductFilter) SetLimit(val *int16) {
	p.Limit = val
}
func (p *ProductFilter) SetSearch(val *string) {
	p.Search = val
}
func (p *ProductFilter) SetCategoryId(val *int32) {
	p.CategoryId = val
}
func (p *ProductFilter) SetBrandIdList(val []int32) {
	p.BrandIdList = val
}
func (p *ProductFilter) SetIsPriceAsc(val *bool) {
	p.IsPriceAsc = val
}
func (p *ProductFilter) SetIsRatingAsc(val *bool) {
	p.IsRatingAsc = val
}
func (p *ProductFilter) SetOnSale(val *bool) {
	p.OnSale = val
}
func (p *ProductFilter) SetIsFreeShipping(val *bool) {
	p.IsFreeShipping = val
}
func (p *ProductFilter) SetIsNew(val *bool) {
	p.IsNew = val
}
func (p *ProductFilter) SetIsHot(val *bool) {
	p.IsHot = val
}
func (p *ProductFilter) SetIsRecommended(val *bool) {
	p.IsRecommended = val
}

var fieldIDToName_ProductFilter = map[int16]string{
	30: "Page",
	31: "Limit",
	1:  "Search",
	2:  "CategoryId",
	3:  "BrandIdList",
	4:  "IsPriceAsc",
	5:  "IsRatingAsc",
	20: "OnSale",
	21: "IsFreeShipping",
	22: "IsNew",
	23: "IsHot",
	24: "IsRecommended",
}

func (p *ProductFilter) IsSetPage() bool {
	return p.Page != nil
}

func (p *ProductFilter) IsSetLimit() bool {
	return p.Limit != nil
}

func (p *ProductFilter) IsSetSearch() bool {
	return p.Search != nil
}

func (p *ProductFilter) IsSetCategoryId() bool {
	return p.CategoryId != nil
}

func (p *ProductFilter) IsSetBrandIdList() bool {
	return p.BrandIdList != nil
}

func (p *ProductFilter) IsSetIsPriceAsc() bool {
	return p.IsPriceAsc != nil
}

func (p *ProductFilter) IsSetIsRatingAsc() bool {
	return p.IsRatingAsc != nil
}

func (p *ProductFilter) IsSetOnSale() bool {
	return p.OnSale != nil
}

func (p *ProductFilter) IsSetIsFreeShipping() bool {
	return p.IsFreeShipping != nil
}

func (p *ProductFilter) IsSetIsNew() bool {
	return p.IsNew != nil
}

func (p *ProductFilter) IsSetIsHot() bool {
	return p.IsHot != nil
}

func (p *ProductFilter) IsSetIsRecommended() bool {
	return p.IsRecommended != nil
}

func (p *ProductFilter) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 30:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField30(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 31:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField31(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProductFilter[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProductFilter) ReadField30(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		p.Page = &v
	}
	return nil
}
func (p *ProductFilter) ReadField31(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		p.Limit = &v
	}
	return nil
}
func (p *ProductFilter) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Search = &v
	}
	return nil
}
func (p *ProductFilter) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.CategoryId = &v
	}
	return nil
}
func (p *ProductFilter) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.BrandIdList = make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.BrandIdList = append(p.BrandIdList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *ProductFilter) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsPriceAsc = &v
	}
	return nil
}
func (p *ProductFilter) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsRatingAsc = &v
	}
	return nil
}
func (p *ProductFilter) ReadField20(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.OnSale = &v
	}
	return nil
}
func (p *ProductFilter) ReadField21(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsFreeShipping = &v
	}
	return nil
}
func (p *ProductFilter) ReadField22(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsNew = &v
	}
	return nil
}
func (p *ProductFilter) ReadField23(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsHot = &v
	}
	return nil
}
func (p *ProductFilter) ReadField24(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsRecommended = &v
	}
	return nil
}

func (p *ProductFilter) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProductFilter"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField30(oprot); err != nil {
			fieldId = 30
			goto WriteFieldError
		}
		if err = p.writeField31(oprot); err != nil {
			fieldId = 31
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProductFilter) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("Page", thrift.I16, 30); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 end error: ", p), err)
}
func (p *ProductFilter) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err = oprot.WriteFieldBegin("Limit", thrift.I16, 31); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.Limit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 end error: ", p), err)
}
func (p *ProductFilter) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSearch() {
		if err = oprot.WriteFieldBegin("Search", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Search); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ProductFilter) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCategoryId() {
		if err = oprot.WriteFieldBegin("CategoryId", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.CategoryId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ProductFilter) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBrandIdList() {
		if err = oprot.WriteFieldBegin("BrandIdList", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.BrandIdList)); err != nil {
			return err
		}
		for _, v := range p.BrandIdList {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ProductFilter) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsPriceAsc() {
		if err = oprot.WriteFieldBegin("IsPriceAsc", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsPriceAsc); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ProductFilter) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsRatingAsc() {
		if err = oprot.WriteFieldBegin("IsRatingAsc", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsRatingAsc); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *ProductFilter) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetOnSale() {
		if err = oprot.WriteFieldBegin("OnSale", thrift.BOOL, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.OnSale); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}
func (p *ProductFilter) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsFreeShipping() {
		if err = oprot.WriteFieldBegin("IsFreeShipping", thrift.BOOL, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsFreeShipping); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}
func (p *ProductFilter) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsNew() {
		if err = oprot.WriteFieldBegin("IsNew", thrift.BOOL, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsNew); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}
func (p *ProductFilter) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsHot() {
		if err = oprot.WriteFieldBegin("IsHot", thrift.BOOL, 23); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsHot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}
func (p *ProductFilter) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsRecommended() {
		if err = oprot.WriteFieldBegin("IsRecommended", thrift.BOOL, 24); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsRecommended); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *ProductFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductFilter(%+v)", *p)
}

func (p *ProductFilter) DeepEqual(ano *ProductFilter) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field30DeepEqual(ano.Page) {
		return false
	}
	if !p.Field31DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field1DeepEqual(ano.Search) {
		return false
	}
	if !p.Field2DeepEqual(ano.CategoryId) {
		return false
	}
	if !p.Field3DeepEqual(ano.BrandIdList) {
		return false
	}
	if !p.Field4DeepEqual(ano.IsPriceAsc) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsRatingAsc) {
		return false
	}
	if !p.Field20DeepEqual(ano.OnSale) {
		return false
	}
	if !p.Field21DeepEqual(ano.IsFreeShipping) {
		return false
	}
	if !p.Field22DeepEqual(ano.IsNew) {
		return false
	}
	if !p.Field23DeepEqual(ano.IsHot) {
		return false
	}
	if !p.Field24DeepEqual(ano.IsRecommended) {
		return false
	}
	return true
}

func (p *ProductFilter) Field30DeepEqual(src *int16) bool {

	if p.Page == src {
		return true
	} else if p.Page == nil || src == nil {
		return false
	}
	if *p.Page != *src {
		return false
	}
	return true
}
func (p *ProductFilter) Field31DeepEqual(src *int16) bool {

	if p.Limit == src {
		return true
	} else if p.Limit == nil || src == nil {
		return false
	}
	if *p.Limit != *src {
		return false
	}
	return true
}
func (p *ProductFilter) Field1DeepEqual(src *string) bool {

	if p.Search == src {
		return true
	} else if p.Search == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Search, *src) != 0 {
		return false
	}
	return true
}
func (p *ProductFilter) Field2DeepEqual(src *int32) bool {

	if p.CategoryId == src {
		return true
	} else if p.CategoryId == nil || src == nil {
		return false
	}
	if *p.CategoryId != *src {
		return false
	}
	return true
}
func (p *ProductFilter) Field3DeepEqual(src []int32) bool {

	if len(p.BrandIdList) != len(src) {
		return false
	}
	for i, v := range p.BrandIdList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ProductFilter) Field4DeepEqual(src *bool) bool {

	if p.IsPriceAsc == src {
		return true
	} else if p.IsPriceAsc == nil || src == nil {
		return false
	}
	if *p.IsPriceAsc != *src {
		return false
	}
	return true
}
func (p *ProductFilter) Field5DeepEqual(src *bool) bool {

	if p.IsRatingAsc == src {
		return true
	} else if p.IsRatingAsc == nil || src == nil {
		return false
	}
	if *p.IsRatingAsc != *src {
		return false
	}
	return true
}
func (p *ProductFilter) Field20DeepEqual(src *bool) bool {

	if p.OnSale == src {
		return true
	} else if p.OnSale == nil || src == nil {
		return false
	}
	if *p.OnSale != *src {
		return false
	}
	return true
}
func (p *ProductFilter) Field21DeepEqual(src *bool) bool {

	if p.IsFreeShipping == src {
		return true
	} else if p.IsFreeShipping == nil || src == nil {
		return false
	}
	if *p.IsFreeShipping != *src {
		return false
	}
	return true
}
func (p *ProductFilter) Field22DeepEqual(src *bool) bool {

	if p.IsNew == src {
		return true
	} else if p.IsNew == nil || src == nil {
		return false
	}
	if *p.IsNew != *src {
		return false
	}
	return true
}
func (p *ProductFilter) Field23DeepEqual(src *bool) bool {

	if p.IsHot == src {
		return true
	} else if p.IsHot == nil || src == nil {
		return false
	}
	if *p.IsHot != *src {
		return false
	}
	return true
}
func (p *ProductFilter) Field24DeepEqual(src *bool) bool {

	if p.IsRecommended == src {
		return true
	} else if p.IsRecommended == nil || src == nil {
		return false
	}
	if *p.IsRecommended != *src {
		return false
	}
	return true
}

type ProductState struct {
	OnSale         bool `thrift:"OnSale,20,required" frugal:"20,required,bool" json:"OnSale"`
	IsFreeShipping bool `thrift:"IsFreeShipping,21,required" frugal:"21,required,bool" json:"IsFreeShipping"`
	IsNew          bool `thrift:"IsNew,22,required" frugal:"22,required,bool" json:"IsNew"`
	IsHot          bool `thrift:"IsHot,23,required" frugal:"23,required,bool" json:"IsHot"`
	IsRecommended  bool `thrift:"IsRecommended,24,required" frugal:"24,required,bool" json:"IsRecommended"`
}

func NewProductState() *ProductState {
	return &ProductState{}
}

func (p *ProductState) InitDefault() {
	*p = ProductState{}
}

func (p *ProductState) GetOnSale() (v bool) {
	return p.OnSale
}

func (p *ProductState) GetIsFreeShipping() (v bool) {
	return p.IsFreeShipping
}

func (p *ProductState) GetIsNew() (v bool) {
	return p.IsNew
}

func (p *ProductState) GetIsHot() (v bool) {
	return p.IsHot
}

func (p *ProductState) GetIsRecommended() (v bool) {
	return p.IsRecommended
}
func (p *ProductState) SetOnSale(val bool) {
	p.OnSale = val
}
func (p *ProductState) SetIsFreeShipping(val bool) {
	p.IsFreeShipping = val
}
func (p *ProductState) SetIsNew(val bool) {
	p.IsNew = val
}
func (p *ProductState) SetIsHot(val bool) {
	p.IsHot = val
}
func (p *ProductState) SetIsRecommended(val bool) {
	p.IsRecommended = val
}

var fieldIDToName_ProductState = map[int16]string{
	20: "OnSale",
	21: "IsFreeShipping",
	22: "IsNew",
	23: "IsHot",
	24: "IsRecommended",
}

func (p *ProductState) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetOnSale bool = false
	var issetIsFreeShipping bool = false
	var issetIsNew bool = false
	var issetIsHot bool = false
	var issetIsRecommended bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 20:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
				issetOnSale = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsFreeShipping = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsNew = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsHot = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsRecommended = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetOnSale {
		fieldId = 20
		goto RequiredFieldNotSetError
	}

	if !issetIsFreeShipping {
		fieldId = 21
		goto RequiredFieldNotSetError
	}

	if !issetIsNew {
		fieldId = 22
		goto RequiredFieldNotSetError
	}

	if !issetIsHot {
		fieldId = 23
		goto RequiredFieldNotSetError
	}

	if !issetIsRecommended {
		fieldId = 24
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProductState[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ProductState[fieldId]))
}

func (p *ProductState) ReadField20(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.OnSale = v
	}
	return nil
}
func (p *ProductState) ReadField21(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsFreeShipping = v
	}
	return nil
}
func (p *ProductState) ReadField22(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsNew = v
	}
	return nil
}
func (p *ProductState) ReadField23(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsHot = v
	}
	return nil
}
func (p *ProductState) ReadField24(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsRecommended = v
	}
	return nil
}

func (p *ProductState) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProductState"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProductState) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("OnSale", thrift.BOOL, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.OnSale); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}
func (p *ProductState) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IsFreeShipping", thrift.BOOL, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsFreeShipping); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}
func (p *ProductState) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IsNew", thrift.BOOL, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsNew); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}
func (p *ProductState) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IsHot", thrift.BOOL, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsHot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}
func (p *ProductState) writeField24(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IsRecommended", thrift.BOOL, 24); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsRecommended); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *ProductState) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductState(%+v)", *p)
}

func (p *ProductState) DeepEqual(ano *ProductState) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field20DeepEqual(ano.OnSale) {
		return false
	}
	if !p.Field21DeepEqual(ano.IsFreeShipping) {
		return false
	}
	if !p.Field22DeepEqual(ano.IsNew) {
		return false
	}
	if !p.Field23DeepEqual(ano.IsHot) {
		return false
	}
	if !p.Field24DeepEqual(ano.IsRecommended) {
		return false
	}
	return true
}

func (p *ProductState) Field20DeepEqual(src bool) bool {

	if p.OnSale != src {
		return false
	}
	return true
}
func (p *ProductState) Field21DeepEqual(src bool) bool {

	if p.IsFreeShipping != src {
		return false
	}
	return true
}
func (p *ProductState) Field22DeepEqual(src bool) bool {

	if p.IsNew != src {
		return false
	}
	return true
}
func (p *ProductState) Field23DeepEqual(src bool) bool {

	if p.IsHot != src {
		return false
	}
	return true
}
func (p *ProductState) Field24DeepEqual(src bool) bool {

	if p.IsRecommended != src {
		return false
	}
	return true
}

type OptionalState struct {
	OnSale         *bool `thrift:"OnSale,20,optional" frugal:"20,optional,bool" json:"OnSale,omitempty"`
	IsFreeShipping *bool `thrift:"IsFreeShipping,21,optional" frugal:"21,optional,bool" json:"IsFreeShipping,omitempty"`
	IsNew          *bool `thrift:"IsNew,22,optional" frugal:"22,optional,bool" json:"IsNew,omitempty"`
	IsHot          *bool `thrift:"IsHot,23,optional" frugal:"23,optional,bool" json:"IsHot,omitempty"`
	IsRecommended  *bool `thrift:"IsRecommended,24,optional" frugal:"24,optional,bool" json:"IsRecommended,omitempty"`
}

func NewOptionalState() *OptionalState {
	return &OptionalState{}
}

func (p *OptionalState) InitDefault() {
	*p = OptionalState{}
}

var OptionalState_OnSale_DEFAULT bool

func (p *OptionalState) GetOnSale() (v bool) {
	if !p.IsSetOnSale() {
		return OptionalState_OnSale_DEFAULT
	}
	return *p.OnSale
}

var OptionalState_IsFreeShipping_DEFAULT bool

func (p *OptionalState) GetIsFreeShipping() (v bool) {
	if !p.IsSetIsFreeShipping() {
		return OptionalState_IsFreeShipping_DEFAULT
	}
	return *p.IsFreeShipping
}

var OptionalState_IsNew_DEFAULT bool

func (p *OptionalState) GetIsNew() (v bool) {
	if !p.IsSetIsNew() {
		return OptionalState_IsNew_DEFAULT
	}
	return *p.IsNew
}

var OptionalState_IsHot_DEFAULT bool

func (p *OptionalState) GetIsHot() (v bool) {
	if !p.IsSetIsHot() {
		return OptionalState_IsHot_DEFAULT
	}
	return *p.IsHot
}

var OptionalState_IsRecommended_DEFAULT bool

func (p *OptionalState) GetIsRecommended() (v bool) {
	if !p.IsSetIsRecommended() {
		return OptionalState_IsRecommended_DEFAULT
	}
	return *p.IsRecommended
}
func (p *OptionalState) SetOnSale(val *bool) {
	p.OnSale = val
}
func (p *OptionalState) SetIsFreeShipping(val *bool) {
	p.IsFreeShipping = val
}
func (p *OptionalState) SetIsNew(val *bool) {
	p.IsNew = val
}
func (p *OptionalState) SetIsHot(val *bool) {
	p.IsHot = val
}
func (p *OptionalState) SetIsRecommended(val *bool) {
	p.IsRecommended = val
}

var fieldIDToName_OptionalState = map[int16]string{
	20: "OnSale",
	21: "IsFreeShipping",
	22: "IsNew",
	23: "IsHot",
	24: "IsRecommended",
}

func (p *OptionalState) IsSetOnSale() bool {
	return p.OnSale != nil
}

func (p *OptionalState) IsSetIsFreeShipping() bool {
	return p.IsFreeShipping != nil
}

func (p *OptionalState) IsSetIsNew() bool {
	return p.IsNew != nil
}

func (p *OptionalState) IsSetIsHot() bool {
	return p.IsHot != nil
}

func (p *OptionalState) IsSetIsRecommended() bool {
	return p.IsRecommended != nil
}

func (p *OptionalState) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 20:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OptionalState[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OptionalState) ReadField20(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.OnSale = &v
	}
	return nil
}
func (p *OptionalState) ReadField21(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsFreeShipping = &v
	}
	return nil
}
func (p *OptionalState) ReadField22(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsNew = &v
	}
	return nil
}
func (p *OptionalState) ReadField23(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsHot = &v
	}
	return nil
}
func (p *OptionalState) ReadField24(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsRecommended = &v
	}
	return nil
}

func (p *OptionalState) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("OptionalState"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OptionalState) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetOnSale() {
		if err = oprot.WriteFieldBegin("OnSale", thrift.BOOL, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.OnSale); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}
func (p *OptionalState) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsFreeShipping() {
		if err = oprot.WriteFieldBegin("IsFreeShipping", thrift.BOOL, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsFreeShipping); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}
func (p *OptionalState) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsNew() {
		if err = oprot.WriteFieldBegin("IsNew", thrift.BOOL, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsNew); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}
func (p *OptionalState) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsHot() {
		if err = oprot.WriteFieldBegin("IsHot", thrift.BOOL, 23); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsHot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}
func (p *OptionalState) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsRecommended() {
		if err = oprot.WriteFieldBegin("IsRecommended", thrift.BOOL, 24); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsRecommended); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *OptionalState) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OptionalState(%+v)", *p)
}

func (p *OptionalState) DeepEqual(ano *OptionalState) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field20DeepEqual(ano.OnSale) {
		return false
	}
	if !p.Field21DeepEqual(ano.IsFreeShipping) {
		return false
	}
	if !p.Field22DeepEqual(ano.IsNew) {
		return false
	}
	if !p.Field23DeepEqual(ano.IsHot) {
		return false
	}
	if !p.Field24DeepEqual(ano.IsRecommended) {
		return false
	}
	return true
}

func (p *OptionalState) Field20DeepEqual(src *bool) bool {

	if p.OnSale == src {
		return true
	} else if p.OnSale == nil || src == nil {
		return false
	}
	if *p.OnSale != *src {
		return false
	}
	return true
}
func (p *OptionalState) Field21DeepEqual(src *bool) bool {

	if p.IsFreeShipping == src {
		return true
	} else if p.IsFreeShipping == nil || src == nil {
		return false
	}
	if *p.IsFreeShipping != *src {
		return false
	}
	return true
}
func (p *OptionalState) Field22DeepEqual(src *bool) bool {

	if p.IsNew == src {
		return true
	} else if p.IsNew == nil || src == nil {
		return false
	}
	if *p.IsNew != *src {
		return false
	}
	return true
}
func (p *OptionalState) Field23DeepEqual(src *bool) bool {

	if p.IsHot == src {
		return true
	} else if p.IsHot == nil || src == nil {
		return false
	}
	if *p.IsHot != *src {
		return false
	}
	return true
}
func (p *OptionalState) Field24DeepEqual(src *bool) bool {

	if p.IsRecommended == src {
		return true
	} else if p.IsRecommended == nil || src == nil {
		return false
	}
	if *p.IsRecommended != *src {
		return false
	}
	return true
}

type ProductBasicInfo struct {
	Id      int32  `thrift:"Id,1,required" frugal:"1,required,i32" json:"Id"`
	Name    string `thrift:"Name,2,required" frugal:"2,required,string" json:"Name"`
	Brief   string `thrift:"Brief,3,required" frugal:"3,required,string" json:"Brief"`
	Picture string `thrift:"Picture,4,required" frugal:"4,required,string" json:"Picture"`
	Price   string `thrift:"Price,6,required" frugal:"6,required,string" json:"Price"`
	Rating  string `thrift:"Rating,7,required" frugal:"7,required,string" json:"Rating"`
}

func NewProductBasicInfo() *ProductBasicInfo {
	return &ProductBasicInfo{}
}

func (p *ProductBasicInfo) InitDefault() {
	*p = ProductBasicInfo{}
}

func (p *ProductBasicInfo) GetId() (v int32) {
	return p.Id
}

func (p *ProductBasicInfo) GetName() (v string) {
	return p.Name
}

func (p *ProductBasicInfo) GetBrief() (v string) {
	return p.Brief
}

func (p *ProductBasicInfo) GetPicture() (v string) {
	return p.Picture
}

func (p *ProductBasicInfo) GetPrice() (v string) {
	return p.Price
}

func (p *ProductBasicInfo) GetRating() (v string) {
	return p.Rating
}
func (p *ProductBasicInfo) SetId(val int32) {
	p.Id = val
}
func (p *ProductBasicInfo) SetName(val string) {
	p.Name = val
}
func (p *ProductBasicInfo) SetBrief(val string) {
	p.Brief = val
}
func (p *ProductBasicInfo) SetPicture(val string) {
	p.Picture = val
}
func (p *ProductBasicInfo) SetPrice(val string) {
	p.Price = val
}
func (p *ProductBasicInfo) SetRating(val string) {
	p.Rating = val
}

var fieldIDToName_ProductBasicInfo = map[int16]string{
	1: "Id",
	2: "Name",
	3: "Brief",
	4: "Picture",
	6: "Price",
	7: "Rating",
}

func (p *ProductBasicInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetName bool = false
	var issetBrief bool = false
	var issetPicture bool = false
	var issetPrice bool = false
	var issetRating bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetBrief = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetPicture = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetPrice = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetRating = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetBrief {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetPicture {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetPrice {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetRating {
		fieldId = 7
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProductBasicInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ProductBasicInfo[fieldId]))
}

func (p *ProductBasicInfo) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}
func (p *ProductBasicInfo) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}
func (p *ProductBasicInfo) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Brief = v
	}
	return nil
}
func (p *ProductBasicInfo) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Picture = v
	}
	return nil
}
func (p *ProductBasicInfo) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Price = v
	}
	return nil
}
func (p *ProductBasicInfo) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Rating = v
	}
	return nil
}

func (p *ProductBasicInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProductBasicInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProductBasicInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ProductBasicInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ProductBasicInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Brief", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Brief); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ProductBasicInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Picture", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Picture); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ProductBasicInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Price", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Price); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *ProductBasicInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Rating", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Rating); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ProductBasicInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductBasicInfo(%+v)", *p)
}

func (p *ProductBasicInfo) DeepEqual(ano *ProductBasicInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Brief) {
		return false
	}
	if !p.Field4DeepEqual(ano.Picture) {
		return false
	}
	if !p.Field6DeepEqual(ano.Price) {
		return false
	}
	if !p.Field7DeepEqual(ano.Rating) {
		return false
	}
	return true
}

func (p *ProductBasicInfo) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ProductBasicInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ProductBasicInfo) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Brief, src) != 0 {
		return false
	}
	return true
}
func (p *ProductBasicInfo) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Picture, src) != 0 {
		return false
	}
	return true
}
func (p *ProductBasicInfo) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Price, src) != 0 {
		return false
	}
	return true
}
func (p *ProductBasicInfo) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Rating, src) != 0 {
		return false
	}
	return true
}

type AddProductReq struct {
	Name       string        `thrift:"Name,2,required" frugal:"2,required,string" json:"Name"`
	Brief      string        `thrift:"Brief,3,required" frugal:"3,required,string" json:"Brief"`
	Picture    string        `thrift:"Picture,4,required" frugal:"4,required,string" json:"Picture"`
	Price      float64       `thrift:"Price,6,required" frugal:"6,required,double" json:"Price"`
	State      *ProductState `thrift:"State,5,required" frugal:"5,required,ProductState" json:"State"`
	CategoryId int32         `thrift:"CategoryId,10,required" frugal:"10,required,i32" json:"CategoryId"`
	BrandId    int32         `thrift:"BrandId,12,required" frugal:"12,required,i32" json:"BrandId"`
	ModelList  []string      `thrift:"ModelList,13,required" frugal:"13,required,list<string>" json:"ModelList"`
	Showcase   []string      `thrift:"Showcase,14,required" frugal:"14,required,list<string>" json:"Showcase"`
}

func NewAddProductReq() *AddProductReq {
	return &AddProductReq{}
}

func (p *AddProductReq) InitDefault() {
	*p = AddProductReq{}
}

func (p *AddProductReq) GetName() (v string) {
	return p.Name
}

func (p *AddProductReq) GetBrief() (v string) {
	return p.Brief
}

func (p *AddProductReq) GetPicture() (v string) {
	return p.Picture
}

func (p *AddProductReq) GetPrice() (v float64) {
	return p.Price
}

var AddProductReq_State_DEFAULT *ProductState

func (p *AddProductReq) GetState() (v *ProductState) {
	if !p.IsSetState() {
		return AddProductReq_State_DEFAULT
	}
	return p.State
}

func (p *AddProductReq) GetCategoryId() (v int32) {
	return p.CategoryId
}

func (p *AddProductReq) GetBrandId() (v int32) {
	return p.BrandId
}

func (p *AddProductReq) GetModelList() (v []string) {
	return p.ModelList
}

func (p *AddProductReq) GetShowcase() (v []string) {
	return p.Showcase
}
func (p *AddProductReq) SetName(val string) {
	p.Name = val
}
func (p *AddProductReq) SetBrief(val string) {
	p.Brief = val
}
func (p *AddProductReq) SetPicture(val string) {
	p.Picture = val
}
func (p *AddProductReq) SetPrice(val float64) {
	p.Price = val
}
func (p *AddProductReq) SetState(val *ProductState) {
	p.State = val
}
func (p *AddProductReq) SetCategoryId(val int32) {
	p.CategoryId = val
}
func (p *AddProductReq) SetBrandId(val int32) {
	p.BrandId = val
}
func (p *AddProductReq) SetModelList(val []string) {
	p.ModelList = val
}
func (p *AddProductReq) SetShowcase(val []string) {
	p.Showcase = val
}

var fieldIDToName_AddProductReq = map[int16]string{
	2:  "Name",
	3:  "Brief",
	4:  "Picture",
	6:  "Price",
	5:  "State",
	10: "CategoryId",
	12: "BrandId",
	13: "ModelList",
	14: "Showcase",
}

func (p *AddProductReq) IsSetState() bool {
	return p.State != nil
}

func (p *AddProductReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetBrief bool = false
	var issetPicture bool = false
	var issetPrice bool = false
	var issetState bool = false
	var issetCategoryId bool = false
	var issetBrandId bool = false
	var issetModelList bool = false
	var issetShowcase bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetBrief = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetPicture = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetPrice = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetState = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetCategoryId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetBrandId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				issetModelList = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				issetShowcase = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetBrief {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetPicture {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetPrice {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetState {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetCategoryId {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetBrandId {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetModelList {
		fieldId = 13
		goto RequiredFieldNotSetError
	}

	if !issetShowcase {
		fieldId = 14
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AddProductReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AddProductReq[fieldId]))
}

func (p *AddProductReq) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}
func (p *AddProductReq) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Brief = v
	}
	return nil
}
func (p *AddProductReq) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Picture = v
	}
	return nil
}
func (p *AddProductReq) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.Price = v
	}
	return nil
}
func (p *AddProductReq) ReadField5(iprot thrift.TProtocol) error {
	p.State = NewProductState()

	if err := p.State.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *AddProductReq) ReadField10(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.CategoryId = v
	}
	return nil
}
func (p *AddProductReq) ReadField12(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.BrandId = v
	}
	return nil
}
func (p *AddProductReq) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ModelList = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.ModelList = append(p.ModelList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *AddProductReq) ReadField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Showcase = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Showcase = append(p.Showcase, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *AddProductReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddProductReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AddProductReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *AddProductReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Brief", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Brief); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *AddProductReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Picture", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Picture); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *AddProductReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Price", thrift.DOUBLE, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Price); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *AddProductReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("State", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.State.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *AddProductReq) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CategoryId", thrift.I32, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CategoryId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *AddProductReq) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BrandId", thrift.I32, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.BrandId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *AddProductReq) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ModelList", thrift.LIST, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ModelList)); err != nil {
		return err
	}
	for _, v := range p.ModelList {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}
func (p *AddProductReq) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Showcase", thrift.LIST, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Showcase)); err != nil {
		return err
	}
	for _, v := range p.Showcase {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *AddProductReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddProductReq(%+v)", *p)
}

func (p *AddProductReq) DeepEqual(ano *AddProductReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Brief) {
		return false
	}
	if !p.Field4DeepEqual(ano.Picture) {
		return false
	}
	if !p.Field6DeepEqual(ano.Price) {
		return false
	}
	if !p.Field5DeepEqual(ano.State) {
		return false
	}
	if !p.Field10DeepEqual(ano.CategoryId) {
		return false
	}
	if !p.Field12DeepEqual(ano.BrandId) {
		return false
	}
	if !p.Field13DeepEqual(ano.ModelList) {
		return false
	}
	if !p.Field14DeepEqual(ano.Showcase) {
		return false
	}
	return true
}

func (p *AddProductReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *AddProductReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Brief, src) != 0 {
		return false
	}
	return true
}
func (p *AddProductReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Picture, src) != 0 {
		return false
	}
	return true
}
func (p *AddProductReq) Field6DeepEqual(src float64) bool {

	if p.Price != src {
		return false
	}
	return true
}
func (p *AddProductReq) Field5DeepEqual(src *ProductState) bool {

	if !p.State.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AddProductReq) Field10DeepEqual(src int32) bool {

	if p.CategoryId != src {
		return false
	}
	return true
}
func (p *AddProductReq) Field12DeepEqual(src int32) bool {

	if p.BrandId != src {
		return false
	}
	return true
}
func (p *AddProductReq) Field13DeepEqual(src []string) bool {

	if len(p.ModelList) != len(src) {
		return false
	}
	for i, v := range p.ModelList {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *AddProductReq) Field14DeepEqual(src []string) bool {

	if len(p.Showcase) != len(src) {
		return false
	}
	for i, v := range p.Showcase {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type ProductDetailResp struct {
	Id         int32         `thrift:"Id,1,required" frugal:"1,required,i32" json:"Id"`
	Name       *string       `thrift:"Name,2,optional" frugal:"2,optional,string" json:"Name,omitempty"`
	Brief      *string       `thrift:"Brief,3,optional" frugal:"3,optional,string" json:"Brief,omitempty"`
	Picture    *string       `thrift:"Picture,4,optional" frugal:"4,optional,string" json:"Picture,omitempty"`
	Price      *string       `thrift:"Price,6,optional" frugal:"6,optional,string" json:"Price,omitempty"`
	State      *ProductState `thrift:"State,5,optional" frugal:"5,optional,ProductState" json:"State,omitempty"`
	CategoryId *int32        `thrift:"CategoryId,10,optional" frugal:"10,optional,i32" json:"CategoryId,omitempty"`
	BrandId    *int32        `thrift:"BrandId,12,optional" frugal:"12,optional,i32" json:"BrandId,omitempty"`
	ModelList  []string      `thrift:"ModelList,13,optional" frugal:"13,optional,list<string>" json:"ModelList,omitempty"`
	Showcase   []string      `thrift:"Showcase,14,optional" frugal:"14,optional,list<string>" json:"Showcase,omitempty"`
	Rating     string        `thrift:"Rating,7,required" frugal:"7,required,string" json:"Rating"`
}

func NewProductDetailResp() *ProductDetailResp {
	return &ProductDetailResp{}
}

func (p *ProductDetailResp) InitDefault() {
	*p = ProductDetailResp{}
}

func (p *ProductDetailResp) GetId() (v int32) {
	return p.Id
}

var ProductDetailResp_Name_DEFAULT string

func (p *ProductDetailResp) GetName() (v string) {
	if !p.IsSetName() {
		return ProductDetailResp_Name_DEFAULT
	}
	return *p.Name
}

var ProductDetailResp_Brief_DEFAULT string

func (p *ProductDetailResp) GetBrief() (v string) {
	if !p.IsSetBrief() {
		return ProductDetailResp_Brief_DEFAULT
	}
	return *p.Brief
}

var ProductDetailResp_Picture_DEFAULT string

func (p *ProductDetailResp) GetPicture() (v string) {
	if !p.IsSetPicture() {
		return ProductDetailResp_Picture_DEFAULT
	}
	return *p.Picture
}

var ProductDetailResp_Price_DEFAULT string

func (p *ProductDetailResp) GetPrice() (v string) {
	if !p.IsSetPrice() {
		return ProductDetailResp_Price_DEFAULT
	}
	return *p.Price
}

var ProductDetailResp_State_DEFAULT *ProductState

func (p *ProductDetailResp) GetState() (v *ProductState) {
	if !p.IsSetState() {
		return ProductDetailResp_State_DEFAULT
	}
	return p.State
}

var ProductDetailResp_CategoryId_DEFAULT int32

func (p *ProductDetailResp) GetCategoryId() (v int32) {
	if !p.IsSetCategoryId() {
		return ProductDetailResp_CategoryId_DEFAULT
	}
	return *p.CategoryId
}

var ProductDetailResp_BrandId_DEFAULT int32

func (p *ProductDetailResp) GetBrandId() (v int32) {
	if !p.IsSetBrandId() {
		return ProductDetailResp_BrandId_DEFAULT
	}
	return *p.BrandId
}

var ProductDetailResp_ModelList_DEFAULT []string

func (p *ProductDetailResp) GetModelList() (v []string) {
	if !p.IsSetModelList() {
		return ProductDetailResp_ModelList_DEFAULT
	}
	return p.ModelList
}

var ProductDetailResp_Showcase_DEFAULT []string

func (p *ProductDetailResp) GetShowcase() (v []string) {
	if !p.IsSetShowcase() {
		return ProductDetailResp_Showcase_DEFAULT
	}
	return p.Showcase
}

func (p *ProductDetailResp) GetRating() (v string) {
	return p.Rating
}
func (p *ProductDetailResp) SetId(val int32) {
	p.Id = val
}
func (p *ProductDetailResp) SetName(val *string) {
	p.Name = val
}
func (p *ProductDetailResp) SetBrief(val *string) {
	p.Brief = val
}
func (p *ProductDetailResp) SetPicture(val *string) {
	p.Picture = val
}
func (p *ProductDetailResp) SetPrice(val *string) {
	p.Price = val
}
func (p *ProductDetailResp) SetState(val *ProductState) {
	p.State = val
}
func (p *ProductDetailResp) SetCategoryId(val *int32) {
	p.CategoryId = val
}
func (p *ProductDetailResp) SetBrandId(val *int32) {
	p.BrandId = val
}
func (p *ProductDetailResp) SetModelList(val []string) {
	p.ModelList = val
}
func (p *ProductDetailResp) SetShowcase(val []string) {
	p.Showcase = val
}
func (p *ProductDetailResp) SetRating(val string) {
	p.Rating = val
}

var fieldIDToName_ProductDetailResp = map[int16]string{
	1:  "Id",
	2:  "Name",
	3:  "Brief",
	4:  "Picture",
	6:  "Price",
	5:  "State",
	10: "CategoryId",
	12: "BrandId",
	13: "ModelList",
	14: "Showcase",
	7:  "Rating",
}

func (p *ProductDetailResp) IsSetName() bool {
	return p.Name != nil
}

func (p *ProductDetailResp) IsSetBrief() bool {
	return p.Brief != nil
}

func (p *ProductDetailResp) IsSetPicture() bool {
	return p.Picture != nil
}

func (p *ProductDetailResp) IsSetPrice() bool {
	return p.Price != nil
}

func (p *ProductDetailResp) IsSetState() bool {
	return p.State != nil
}

func (p *ProductDetailResp) IsSetCategoryId() bool {
	return p.CategoryId != nil
}

func (p *ProductDetailResp) IsSetBrandId() bool {
	return p.BrandId != nil
}

func (p *ProductDetailResp) IsSetModelList() bool {
	return p.ModelList != nil
}

func (p *ProductDetailResp) IsSetShowcase() bool {
	return p.Showcase != nil
}

func (p *ProductDetailResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetRating bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetRating = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetRating {
		fieldId = 7
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProductDetailResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ProductDetailResp[fieldId]))
}

func (p *ProductDetailResp) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}
func (p *ProductDetailResp) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = &v
	}
	return nil
}
func (p *ProductDetailResp) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Brief = &v
	}
	return nil
}
func (p *ProductDetailResp) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Picture = &v
	}
	return nil
}
func (p *ProductDetailResp) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Price = &v
	}
	return nil
}
func (p *ProductDetailResp) ReadField5(iprot thrift.TProtocol) error {
	p.State = NewProductState()

	if err := p.State.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *ProductDetailResp) ReadField10(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.CategoryId = &v
	}
	return nil
}
func (p *ProductDetailResp) ReadField12(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.BrandId = &v
	}
	return nil
}
func (p *ProductDetailResp) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ModelList = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.ModelList = append(p.ModelList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *ProductDetailResp) ReadField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Showcase = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Showcase = append(p.Showcase, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *ProductDetailResp) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Rating = v
	}
	return nil
}

func (p *ProductDetailResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProductDetailResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProductDetailResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ProductDetailResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ProductDetailResp) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBrief() {
		if err = oprot.WriteFieldBegin("Brief", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Brief); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ProductDetailResp) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPicture() {
		if err = oprot.WriteFieldBegin("Picture", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Picture); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ProductDetailResp) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrice() {
		if err = oprot.WriteFieldBegin("Price", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Price); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *ProductDetailResp) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetState() {
		if err = oprot.WriteFieldBegin("State", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.State.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *ProductDetailResp) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetCategoryId() {
		if err = oprot.WriteFieldBegin("CategoryId", thrift.I32, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.CategoryId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *ProductDetailResp) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetBrandId() {
		if err = oprot.WriteFieldBegin("BrandId", thrift.I32, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.BrandId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *ProductDetailResp) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetModelList() {
		if err = oprot.WriteFieldBegin("ModelList", thrift.LIST, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ModelList)); err != nil {
			return err
		}
		for _, v := range p.ModelList {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}
func (p *ProductDetailResp) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetShowcase() {
		if err = oprot.WriteFieldBegin("Showcase", thrift.LIST, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Showcase)); err != nil {
			return err
		}
		for _, v := range p.Showcase {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}
func (p *ProductDetailResp) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Rating", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Rating); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ProductDetailResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductDetailResp(%+v)", *p)
}

func (p *ProductDetailResp) DeepEqual(ano *ProductDetailResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Brief) {
		return false
	}
	if !p.Field4DeepEqual(ano.Picture) {
		return false
	}
	if !p.Field6DeepEqual(ano.Price) {
		return false
	}
	if !p.Field5DeepEqual(ano.State) {
		return false
	}
	if !p.Field10DeepEqual(ano.CategoryId) {
		return false
	}
	if !p.Field12DeepEqual(ano.BrandId) {
		return false
	}
	if !p.Field13DeepEqual(ano.ModelList) {
		return false
	}
	if !p.Field14DeepEqual(ano.Showcase) {
		return false
	}
	if !p.Field7DeepEqual(ano.Rating) {
		return false
	}
	return true
}

func (p *ProductDetailResp) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ProductDetailResp) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *ProductDetailResp) Field3DeepEqual(src *string) bool {

	if p.Brief == src {
		return true
	} else if p.Brief == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Brief, *src) != 0 {
		return false
	}
	return true
}
func (p *ProductDetailResp) Field4DeepEqual(src *string) bool {

	if p.Picture == src {
		return true
	} else if p.Picture == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Picture, *src) != 0 {
		return false
	}
	return true
}
func (p *ProductDetailResp) Field6DeepEqual(src *string) bool {

	if p.Price == src {
		return true
	} else if p.Price == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Price, *src) != 0 {
		return false
	}
	return true
}
func (p *ProductDetailResp) Field5DeepEqual(src *ProductState) bool {

	if !p.State.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ProductDetailResp) Field10DeepEqual(src *int32) bool {

	if p.CategoryId == src {
		return true
	} else if p.CategoryId == nil || src == nil {
		return false
	}
	if *p.CategoryId != *src {
		return false
	}
	return true
}
func (p *ProductDetailResp) Field12DeepEqual(src *int32) bool {

	if p.BrandId == src {
		return true
	} else if p.BrandId == nil || src == nil {
		return false
	}
	if *p.BrandId != *src {
		return false
	}
	return true
}
func (p *ProductDetailResp) Field13DeepEqual(src []string) bool {

	if len(p.ModelList) != len(src) {
		return false
	}
	for i, v := range p.ModelList {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ProductDetailResp) Field14DeepEqual(src []string) bool {

	if len(p.Showcase) != len(src) {
		return false
	}
	for i, v := range p.Showcase {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ProductDetailResp) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Rating, src) != 0 {
		return false
	}
	return true
}

type ProductInfo struct {
	Id         int32          `thrift:"Id,1,required" frugal:"1,required,i32" json:"Id"`
	Name       *string        `thrift:"Name,2,optional" frugal:"2,optional,string" json:"Name,omitempty"`
	Brief      *string        `thrift:"Brief,3,optional" frugal:"3,optional,string" json:"Brief,omitempty"`
	Picture    *string        `thrift:"Picture,4,optional" frugal:"4,optional,string" json:"Picture,omitempty"`
	Price      *string        `thrift:"Price,6,optional" frugal:"6,optional,string" json:"Price,omitempty"`
	State      *OptionalState `thrift:"State,5,optional" frugal:"5,optional,OptionalState" json:"State,omitempty"`
	CategoryId *int32         `thrift:"CategoryId,10,optional" frugal:"10,optional,i32" json:"CategoryId,omitempty"`
	BrandId    *int32         `thrift:"BrandId,12,optional" frugal:"12,optional,i32" json:"BrandId,omitempty"`
	ModelList  []string       `thrift:"ModelList,13,optional" frugal:"13,optional,list<string>" json:"ModelList,omitempty"`
	Showcase   []string       `thrift:"Showcase,14,optional" frugal:"14,optional,list<string>" json:"Showcase,omitempty"`
}

func NewProductInfo() *ProductInfo {
	return &ProductInfo{}
}

func (p *ProductInfo) InitDefault() {
	*p = ProductInfo{}
}

func (p *ProductInfo) GetId() (v int32) {
	return p.Id
}

var ProductInfo_Name_DEFAULT string

func (p *ProductInfo) GetName() (v string) {
	if !p.IsSetName() {
		return ProductInfo_Name_DEFAULT
	}
	return *p.Name
}

var ProductInfo_Brief_DEFAULT string

func (p *ProductInfo) GetBrief() (v string) {
	if !p.IsSetBrief() {
		return ProductInfo_Brief_DEFAULT
	}
	return *p.Brief
}

var ProductInfo_Picture_DEFAULT string

func (p *ProductInfo) GetPicture() (v string) {
	if !p.IsSetPicture() {
		return ProductInfo_Picture_DEFAULT
	}
	return *p.Picture
}

var ProductInfo_Price_DEFAULT string

func (p *ProductInfo) GetPrice() (v string) {
	if !p.IsSetPrice() {
		return ProductInfo_Price_DEFAULT
	}
	return *p.Price
}

var ProductInfo_State_DEFAULT *OptionalState

func (p *ProductInfo) GetState() (v *OptionalState) {
	if !p.IsSetState() {
		return ProductInfo_State_DEFAULT
	}
	return p.State
}

var ProductInfo_CategoryId_DEFAULT int32

func (p *ProductInfo) GetCategoryId() (v int32) {
	if !p.IsSetCategoryId() {
		return ProductInfo_CategoryId_DEFAULT
	}
	return *p.CategoryId
}

var ProductInfo_BrandId_DEFAULT int32

func (p *ProductInfo) GetBrandId() (v int32) {
	if !p.IsSetBrandId() {
		return ProductInfo_BrandId_DEFAULT
	}
	return *p.BrandId
}

var ProductInfo_ModelList_DEFAULT []string

func (p *ProductInfo) GetModelList() (v []string) {
	if !p.IsSetModelList() {
		return ProductInfo_ModelList_DEFAULT
	}
	return p.ModelList
}

var ProductInfo_Showcase_DEFAULT []string

func (p *ProductInfo) GetShowcase() (v []string) {
	if !p.IsSetShowcase() {
		return ProductInfo_Showcase_DEFAULT
	}
	return p.Showcase
}
func (p *ProductInfo) SetId(val int32) {
	p.Id = val
}
func (p *ProductInfo) SetName(val *string) {
	p.Name = val
}
func (p *ProductInfo) SetBrief(val *string) {
	p.Brief = val
}
func (p *ProductInfo) SetPicture(val *string) {
	p.Picture = val
}
func (p *ProductInfo) SetPrice(val *string) {
	p.Price = val
}
func (p *ProductInfo) SetState(val *OptionalState) {
	p.State = val
}
func (p *ProductInfo) SetCategoryId(val *int32) {
	p.CategoryId = val
}
func (p *ProductInfo) SetBrandId(val *int32) {
	p.BrandId = val
}
func (p *ProductInfo) SetModelList(val []string) {
	p.ModelList = val
}
func (p *ProductInfo) SetShowcase(val []string) {
	p.Showcase = val
}

var fieldIDToName_ProductInfo = map[int16]string{
	1:  "Id",
	2:  "Name",
	3:  "Brief",
	4:  "Picture",
	6:  "Price",
	5:  "State",
	10: "CategoryId",
	12: "BrandId",
	13: "ModelList",
	14: "Showcase",
}

func (p *ProductInfo) IsSetName() bool {
	return p.Name != nil
}

func (p *ProductInfo) IsSetBrief() bool {
	return p.Brief != nil
}

func (p *ProductInfo) IsSetPicture() bool {
	return p.Picture != nil
}

func (p *ProductInfo) IsSetPrice() bool {
	return p.Price != nil
}

func (p *ProductInfo) IsSetState() bool {
	return p.State != nil
}

func (p *ProductInfo) IsSetCategoryId() bool {
	return p.CategoryId != nil
}

func (p *ProductInfo) IsSetBrandId() bool {
	return p.BrandId != nil
}

func (p *ProductInfo) IsSetModelList() bool {
	return p.ModelList != nil
}

func (p *ProductInfo) IsSetShowcase() bool {
	return p.Showcase != nil
}

func (p *ProductInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProductInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ProductInfo[fieldId]))
}

func (p *ProductInfo) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}
func (p *ProductInfo) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = &v
	}
	return nil
}
func (p *ProductInfo) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Brief = &v
	}
	return nil
}
func (p *ProductInfo) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Picture = &v
	}
	return nil
}
func (p *ProductInfo) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Price = &v
	}
	return nil
}
func (p *ProductInfo) ReadField5(iprot thrift.TProtocol) error {
	p.State = NewOptionalState()

	if err := p.State.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *ProductInfo) ReadField10(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.CategoryId = &v
	}
	return nil
}
func (p *ProductInfo) ReadField12(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.BrandId = &v
	}
	return nil
}
func (p *ProductInfo) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ModelList = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.ModelList = append(p.ModelList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *ProductInfo) ReadField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Showcase = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Showcase = append(p.Showcase, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ProductInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProductInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProductInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ProductInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ProductInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBrief() {
		if err = oprot.WriteFieldBegin("Brief", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Brief); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ProductInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPicture() {
		if err = oprot.WriteFieldBegin("Picture", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Picture); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ProductInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrice() {
		if err = oprot.WriteFieldBegin("Price", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Price); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *ProductInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetState() {
		if err = oprot.WriteFieldBegin("State", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.State.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *ProductInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetCategoryId() {
		if err = oprot.WriteFieldBegin("CategoryId", thrift.I32, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.CategoryId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *ProductInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetBrandId() {
		if err = oprot.WriteFieldBegin("BrandId", thrift.I32, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.BrandId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *ProductInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetModelList() {
		if err = oprot.WriteFieldBegin("ModelList", thrift.LIST, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ModelList)); err != nil {
			return err
		}
		for _, v := range p.ModelList {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}
func (p *ProductInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetShowcase() {
		if err = oprot.WriteFieldBegin("Showcase", thrift.LIST, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Showcase)); err != nil {
			return err
		}
		for _, v := range p.Showcase {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ProductInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductInfo(%+v)", *p)
}

func (p *ProductInfo) DeepEqual(ano *ProductInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Brief) {
		return false
	}
	if !p.Field4DeepEqual(ano.Picture) {
		return false
	}
	if !p.Field6DeepEqual(ano.Price) {
		return false
	}
	if !p.Field5DeepEqual(ano.State) {
		return false
	}
	if !p.Field10DeepEqual(ano.CategoryId) {
		return false
	}
	if !p.Field12DeepEqual(ano.BrandId) {
		return false
	}
	if !p.Field13DeepEqual(ano.ModelList) {
		return false
	}
	if !p.Field14DeepEqual(ano.Showcase) {
		return false
	}
	return true
}

func (p *ProductInfo) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ProductInfo) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *ProductInfo) Field3DeepEqual(src *string) bool {

	if p.Brief == src {
		return true
	} else if p.Brief == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Brief, *src) != 0 {
		return false
	}
	return true
}
func (p *ProductInfo) Field4DeepEqual(src *string) bool {

	if p.Picture == src {
		return true
	} else if p.Picture == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Picture, *src) != 0 {
		return false
	}
	return true
}
func (p *ProductInfo) Field6DeepEqual(src *string) bool {

	if p.Price == src {
		return true
	} else if p.Price == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Price, *src) != 0 {
		return false
	}
	return true
}
func (p *ProductInfo) Field5DeepEqual(src *OptionalState) bool {

	if !p.State.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ProductInfo) Field10DeepEqual(src *int32) bool {

	if p.CategoryId == src {
		return true
	} else if p.CategoryId == nil || src == nil {
		return false
	}
	if *p.CategoryId != *src {
		return false
	}
	return true
}
func (p *ProductInfo) Field12DeepEqual(src *int32) bool {

	if p.BrandId == src {
		return true
	} else if p.BrandId == nil || src == nil {
		return false
	}
	if *p.BrandId != *src {
		return false
	}
	return true
}
func (p *ProductInfo) Field13DeepEqual(src []string) bool {

	if len(p.ModelList) != len(src) {
		return false
	}
	for i, v := range p.ModelList {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ProductInfo) Field14DeepEqual(src []string) bool {

	if len(p.Showcase) != len(src) {
		return false
	}
	for i, v := range p.Showcase {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type RatingReq struct {
	ProductId int32   `thrift:"ProductId,2,required" frugal:"2,required,i32" json:"ProductId"`
	Rating    float64 `thrift:"Rating,1,required" frugal:"1,required,double" json:"Rating"`
}

func NewRatingReq() *RatingReq {
	return &RatingReq{}
}

func (p *RatingReq) InitDefault() {
	*p = RatingReq{}
}

func (p *RatingReq) GetProductId() (v int32) {
	return p.ProductId
}

func (p *RatingReq) GetRating() (v float64) {
	return p.Rating
}
func (p *RatingReq) SetProductId(val int32) {
	p.ProductId = val
}
func (p *RatingReq) SetRating(val float64) {
	p.Rating = val
}

var fieldIDToName_RatingReq = map[int16]string{
	2: "ProductId",
	1: "Rating",
}

func (p *RatingReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetProductId bool = false
	var issetRating bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetProductId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetRating = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetProductId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetRating {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RatingReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_RatingReq[fieldId]))
}

func (p *RatingReq) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ProductId = v
	}
	return nil
}
func (p *RatingReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.Rating = v
	}
	return nil
}

func (p *RatingReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RatingReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RatingReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ProductId", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ProductId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *RatingReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Rating", thrift.DOUBLE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Rating); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RatingReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RatingReq(%+v)", *p)
}

func (p *RatingReq) DeepEqual(ano *RatingReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field2DeepEqual(ano.ProductId) {
		return false
	}
	if !p.Field1DeepEqual(ano.Rating) {
		return false
	}
	return true
}

func (p *RatingReq) Field2DeepEqual(src int32) bool {

	if p.ProductId != src {
		return false
	}
	return true
}
func (p *RatingReq) Field1DeepEqual(src float64) bool {

	if p.Rating != src {
		return false
	}
	return true
}

type RatingResp struct {
	Rating string `thrift:"Rating,4,required" frugal:"4,required,string" json:"Rating"`
}

func NewRatingResp() *RatingResp {
	return &RatingResp{}
}

func (p *RatingResp) InitDefault() {
	*p = RatingResp{}
}

func (p *RatingResp) GetRating() (v string) {
	return p.Rating
}
func (p *RatingResp) SetRating(val string) {
	p.Rating = val
}

var fieldIDToName_RatingResp = map[int16]string{
	4: "Rating",
}

func (p *RatingResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRating bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetRating = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetRating {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RatingResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_RatingResp[fieldId]))
}

func (p *RatingResp) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Rating = v
	}
	return nil
}

func (p *RatingResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RatingResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RatingResp) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Rating", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Rating); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *RatingResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RatingResp(%+v)", *p)
}

func (p *RatingResp) DeepEqual(ano *RatingResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field4DeepEqual(ano.Rating) {
		return false
	}
	return true
}

func (p *RatingResp) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Rating, src) != 0 {
		return false
	}
	return true
}

type CategoryInfo struct {
	Id       int32    `thrift:"Id,1,required" frugal:"1,required,i32" json:"Id"`
	Name     string   `thrift:"Name,2,required" frugal:"2,required,string" json:"Name"`
	Picture  string   `thrift:"Picture,3,required" frugal:"3,required,string" json:"Picture"`
	Showcase []string `thrift:"Showcase,4,required" frugal:"4,required,list<string>" json:"Showcase"`
	Brief    string   `thrift:"Brief,5,required" frugal:"5,required,string" json:"Brief"`
}

func NewCategoryInfo() *CategoryInfo {
	return &CategoryInfo{}
}

func (p *CategoryInfo) InitDefault() {
	*p = CategoryInfo{}
}

func (p *CategoryInfo) GetId() (v int32) {
	return p.Id
}

func (p *CategoryInfo) GetName() (v string) {
	return p.Name
}

func (p *CategoryInfo) GetPicture() (v string) {
	return p.Picture
}

func (p *CategoryInfo) GetShowcase() (v []string) {
	return p.Showcase
}

func (p *CategoryInfo) GetBrief() (v string) {
	return p.Brief
}
func (p *CategoryInfo) SetId(val int32) {
	p.Id = val
}
func (p *CategoryInfo) SetName(val string) {
	p.Name = val
}
func (p *CategoryInfo) SetPicture(val string) {
	p.Picture = val
}
func (p *CategoryInfo) SetShowcase(val []string) {
	p.Showcase = val
}
func (p *CategoryInfo) SetBrief(val string) {
	p.Brief = val
}

var fieldIDToName_CategoryInfo = map[int16]string{
	1: "Id",
	2: "Name",
	3: "Picture",
	4: "Showcase",
	5: "Brief",
}

func (p *CategoryInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetName bool = false
	var issetPicture bool = false
	var issetShowcase bool = false
	var issetBrief bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPicture = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetShowcase = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetBrief = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPicture {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetShowcase {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetBrief {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CategoryInfo[fieldId]))
}

func (p *CategoryInfo) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}
func (p *CategoryInfo) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}
func (p *CategoryInfo) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Picture = v
	}
	return nil
}
func (p *CategoryInfo) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Showcase = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Showcase = append(p.Showcase, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *CategoryInfo) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Brief = v
	}
	return nil
}

func (p *CategoryInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CategoryInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CategoryInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CategoryInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Picture", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Picture); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CategoryInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Showcase", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Showcase)); err != nil {
		return err
	}
	for _, v := range p.Showcase {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *CategoryInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Brief", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Brief); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CategoryInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryInfo(%+v)", *p)
}

func (p *CategoryInfo) DeepEqual(ano *CategoryInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Picture) {
		return false
	}
	if !p.Field4DeepEqual(ano.Showcase) {
		return false
	}
	if !p.Field5DeepEqual(ano.Brief) {
		return false
	}
	return true
}

func (p *CategoryInfo) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *CategoryInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CategoryInfo) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Picture, src) != 0 {
		return false
	}
	return true
}
func (p *CategoryInfo) Field4DeepEqual(src []string) bool {

	if len(p.Showcase) != len(src) {
		return false
	}
	for i, v := range p.Showcase {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *CategoryInfo) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Brief, src) != 0 {
		return false
	}
	return true
}

type NewCategory_ struct {
	Name     string   `thrift:"Name,2,required" frugal:"2,required,string" json:"Name"`
	Picture  string   `thrift:"Picture,3,required" frugal:"3,required,string" json:"Picture"`
	Showcase []string `thrift:"Showcase,4,required" frugal:"4,required,list<string>" json:"Showcase"`
	Brief    string   `thrift:"Brief,5,required" frugal:"5,required,string" json:"Brief"`
}

func NewNewCategory_() *NewCategory_ {
	return &NewCategory_{}
}

func (p *NewCategory_) InitDefault() {
	*p = NewCategory_{}
}

func (p *NewCategory_) GetName() (v string) {
	return p.Name
}

func (p *NewCategory_) GetPicture() (v string) {
	return p.Picture
}

func (p *NewCategory_) GetShowcase() (v []string) {
	return p.Showcase
}

func (p *NewCategory_) GetBrief() (v string) {
	return p.Brief
}
func (p *NewCategory_) SetName(val string) {
	p.Name = val
}
func (p *NewCategory_) SetPicture(val string) {
	p.Picture = val
}
func (p *NewCategory_) SetShowcase(val []string) {
	p.Showcase = val
}
func (p *NewCategory_) SetBrief(val string) {
	p.Brief = val
}

var fieldIDToName_NewCategory_ = map[int16]string{
	2: "Name",
	3: "Picture",
	4: "Showcase",
	5: "Brief",
}

func (p *NewCategory_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetPicture bool = false
	var issetShowcase bool = false
	var issetBrief bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPicture = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetShowcase = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetBrief = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPicture {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetShowcase {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetBrief {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NewCategory_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_NewCategory_[fieldId]))
}

func (p *NewCategory_) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}
func (p *NewCategory_) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Picture = v
	}
	return nil
}
func (p *NewCategory_) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Showcase = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Showcase = append(p.Showcase, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *NewCategory_) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Brief = v
	}
	return nil
}

func (p *NewCategory_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NewCategory"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NewCategory_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *NewCategory_) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Picture", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Picture); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *NewCategory_) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Showcase", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Showcase)); err != nil {
		return err
	}
	for _, v := range p.Showcase {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *NewCategory_) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Brief", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Brief); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *NewCategory_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NewCategory_(%+v)", *p)
}

func (p *NewCategory_) DeepEqual(ano *NewCategory_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Picture) {
		return false
	}
	if !p.Field4DeepEqual(ano.Showcase) {
		return false
	}
	if !p.Field5DeepEqual(ano.Brief) {
		return false
	}
	return true
}

func (p *NewCategory_) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *NewCategory_) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Picture, src) != 0 {
		return false
	}
	return true
}
func (p *NewCategory_) Field4DeepEqual(src []string) bool {

	if len(p.Showcase) != len(src) {
		return false
	}
	for i, v := range p.Showcase {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *NewCategory_) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Brief, src) != 0 {
		return false
	}
	return true
}

type BrandInfo struct {
	Id   int32  `thrift:"Id,1,required" frugal:"1,required,i32" json:"Id"`
	Name string `thrift:"Name,2,required" frugal:"2,required,string" json:"Name"`
	Logo string `thrift:"Logo,3,required" frugal:"3,required,string" json:"Logo"`
}

func NewBrandInfo() *BrandInfo {
	return &BrandInfo{}
}

func (p *BrandInfo) InitDefault() {
	*p = BrandInfo{}
}

func (p *BrandInfo) GetId() (v int32) {
	return p.Id
}

func (p *BrandInfo) GetName() (v string) {
	return p.Name
}

func (p *BrandInfo) GetLogo() (v string) {
	return p.Logo
}
func (p *BrandInfo) SetId(val int32) {
	p.Id = val
}
func (p *BrandInfo) SetName(val string) {
	p.Name = val
}
func (p *BrandInfo) SetLogo(val string) {
	p.Logo = val
}

var fieldIDToName_BrandInfo = map[int16]string{
	1: "Id",
	2: "Name",
	3: "Logo",
}

func (p *BrandInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetName bool = false
	var issetLogo bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetLogo = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetLogo {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BrandInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BrandInfo[fieldId]))
}

func (p *BrandInfo) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}
func (p *BrandInfo) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}
func (p *BrandInfo) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Logo = v
	}
	return nil
}

func (p *BrandInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BrandInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BrandInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BrandInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BrandInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Logo", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Logo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BrandInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BrandInfo(%+v)", *p)
}

func (p *BrandInfo) DeepEqual(ano *BrandInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Logo) {
		return false
	}
	return true
}

func (p *BrandInfo) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *BrandInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *BrandInfo) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Logo, src) != 0 {
		return false
	}
	return true
}

type BrandListResp struct {
	Id           int32    `thrift:"Id,1,required" frugal:"1,required,i32" json:"Id"`
	Name         string   `thrift:"Name,2,required" frugal:"2,required,string" json:"Name"`
	Logo         string   `thrift:"Logo,3,required" frugal:"3,required,string" json:"Logo"`
	CategoryList []string `thrift:"CategoryList,5,required" frugal:"5,required,list<string>" json:"CategoryList"`
}

func NewBrandListResp() *BrandListResp {
	return &BrandListResp{}
}

func (p *BrandListResp) InitDefault() {
	*p = BrandListResp{}
}

func (p *BrandListResp) GetId() (v int32) {
	return p.Id
}

func (p *BrandListResp) GetName() (v string) {
	return p.Name
}

func (p *BrandListResp) GetLogo() (v string) {
	return p.Logo
}

func (p *BrandListResp) GetCategoryList() (v []string) {
	return p.CategoryList
}
func (p *BrandListResp) SetId(val int32) {
	p.Id = val
}
func (p *BrandListResp) SetName(val string) {
	p.Name = val
}
func (p *BrandListResp) SetLogo(val string) {
	p.Logo = val
}
func (p *BrandListResp) SetCategoryList(val []string) {
	p.CategoryList = val
}

var fieldIDToName_BrandListResp = map[int16]string{
	1: "Id",
	2: "Name",
	3: "Logo",
	5: "CategoryList",
}

func (p *BrandListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetName bool = false
	var issetLogo bool = false
	var issetCategoryList bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetLogo = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetCategoryList = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetLogo {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetCategoryList {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BrandListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BrandListResp[fieldId]))
}

func (p *BrandListResp) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}
func (p *BrandListResp) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}
func (p *BrandListResp) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Logo = v
	}
	return nil
}
func (p *BrandListResp) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.CategoryList = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.CategoryList = append(p.CategoryList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BrandListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BrandListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BrandListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BrandListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BrandListResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Logo", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Logo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BrandListResp) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CategoryList", thrift.LIST, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.CategoryList)); err != nil {
		return err
	}
	for _, v := range p.CategoryList {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *BrandListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BrandListResp(%+v)", *p)
}

func (p *BrandListResp) DeepEqual(ano *BrandListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Logo) {
		return false
	}
	if !p.Field5DeepEqual(ano.CategoryList) {
		return false
	}
	return true
}

func (p *BrandListResp) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *BrandListResp) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *BrandListResp) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Logo, src) != 0 {
		return false
	}
	return true
}
func (p *BrandListResp) Field5DeepEqual(src []string) bool {

	if len(p.CategoryList) != len(src) {
		return false
	}
	for i, v := range p.CategoryList {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type NewBrand_ struct {
	Name string `thrift:"Name,2,required" frugal:"2,required,string" json:"Name"`
	Logo string `thrift:"Logo,3,required" frugal:"3,required,string" json:"Logo"`
}

func NewNewBrand_() *NewBrand_ {
	return &NewBrand_{}
}

func (p *NewBrand_) InitDefault() {
	*p = NewBrand_{}
}

func (p *NewBrand_) GetName() (v string) {
	return p.Name
}

func (p *NewBrand_) GetLogo() (v string) {
	return p.Logo
}
func (p *NewBrand_) SetName(val string) {
	p.Name = val
}
func (p *NewBrand_) SetLogo(val string) {
	p.Logo = val
}

var fieldIDToName_NewBrand_ = map[int16]string{
	2: "Name",
	3: "Logo",
}

func (p *NewBrand_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetLogo bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetLogo = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetLogo {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NewBrand_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_NewBrand_[fieldId]))
}

func (p *NewBrand_) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}
func (p *NewBrand_) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Logo = v
	}
	return nil
}

func (p *NewBrand_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NewBrand"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NewBrand_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *NewBrand_) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Logo", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Logo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *NewBrand_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NewBrand_(%+v)", *p)
}

func (p *NewBrand_) DeepEqual(ano *NewBrand_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Logo) {
		return false
	}
	return true
}

func (p *NewBrand_) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *NewBrand_) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Logo, src) != 0 {
		return false
	}
	return true
}

type BrandByCatReq struct {
	CategoryId int32 `thrift:"CategoryId,1,required" frugal:"1,required,i32" json:"CategoryId"`
}

func NewBrandByCatReq() *BrandByCatReq {
	return &BrandByCatReq{}
}

func (p *BrandByCatReq) InitDefault() {
	*p = BrandByCatReq{}
}

func (p *BrandByCatReq) GetCategoryId() (v int32) {
	return p.CategoryId
}
func (p *BrandByCatReq) SetCategoryId(val int32) {
	p.CategoryId = val
}

var fieldIDToName_BrandByCatReq = map[int16]string{
	1: "CategoryId",
}

func (p *BrandByCatReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCategoryId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCategoryId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCategoryId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BrandByCatReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BrandByCatReq[fieldId]))
}

func (p *BrandByCatReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.CategoryId = v
	}
	return nil
}

func (p *BrandByCatReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BrandByCatReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BrandByCatReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CategoryId", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CategoryId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BrandByCatReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BrandByCatReq(%+v)", *p)
}

func (p *BrandByCatReq) DeepEqual(ano *BrandByCatReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CategoryId) {
		return false
	}
	return true
}

func (p *BrandByCatReq) Field1DeepEqual(src int32) bool {

	if p.CategoryId != src {
		return false
	}
	return true
}

type BannerInfo struct {
	Id          int8   `thrift:"Id,1,required" frugal:"1,required,i8" json:"Id"`
	Picture     string `thrift:"Picture,2,required" frugal:"2,required,string" json:"Picture"`
	ProductLink string `thrift:"ProductLink,3,required" frugal:"3,required,string" json:"ProductLink"`
	Index       int8   `thrift:"Index,4,required" frugal:"4,required,i8" json:"Index"`
}

func NewBannerInfo() *BannerInfo {
	return &BannerInfo{}
}

func (p *BannerInfo) InitDefault() {
	*p = BannerInfo{}
}

func (p *BannerInfo) GetId() (v int8) {
	return p.Id
}

func (p *BannerInfo) GetPicture() (v string) {
	return p.Picture
}

func (p *BannerInfo) GetProductLink() (v string) {
	return p.ProductLink
}

func (p *BannerInfo) GetIndex() (v int8) {
	return p.Index
}
func (p *BannerInfo) SetId(val int8) {
	p.Id = val
}
func (p *BannerInfo) SetPicture(val string) {
	p.Picture = val
}
func (p *BannerInfo) SetProductLink(val string) {
	p.ProductLink = val
}
func (p *BannerInfo) SetIndex(val int8) {
	p.Index = val
}

var fieldIDToName_BannerInfo = map[int16]string{
	1: "Id",
	2: "Picture",
	3: "ProductLink",
	4: "Index",
}

func (p *BannerInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetPicture bool = false
	var issetProductLink bool = false
	var issetIndex bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPicture = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetProductLink = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetIndex = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPicture {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetProductLink {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetIndex {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BannerInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BannerInfo[fieldId]))
}

func (p *BannerInfo) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}
func (p *BannerInfo) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Picture = v
	}
	return nil
}
func (p *BannerInfo) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ProductLink = v
	}
	return nil
}
func (p *BannerInfo) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Index = v
	}
	return nil
}

func (p *BannerInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BannerInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BannerInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BannerInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Picture", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Picture); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BannerInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ProductLink", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ProductLink); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BannerInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Index", thrift.BYTE, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Index); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *BannerInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BannerInfo(%+v)", *p)
}

func (p *BannerInfo) DeepEqual(ano *BannerInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Picture) {
		return false
	}
	if !p.Field3DeepEqual(ano.ProductLink) {
		return false
	}
	if !p.Field4DeepEqual(ano.Index) {
		return false
	}
	return true
}

func (p *BannerInfo) Field1DeepEqual(src int8) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *BannerInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Picture, src) != 0 {
		return false
	}
	return true
}
func (p *BannerInfo) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ProductLink, src) != 0 {
		return false
	}
	return true
}
func (p *BannerInfo) Field4DeepEqual(src int8) bool {

	if p.Index != src {
		return false
	}
	return true
}

type NewBanner_ struct {
	Picture     string `thrift:"Picture,2,required" frugal:"2,required,string" json:"Picture"`
	ProductLink string `thrift:"ProductLink,3,required" frugal:"3,required,string" json:"ProductLink"`
	Index       int8   `thrift:"Index,4,required" frugal:"4,required,i8" json:"Index"`
}

func NewNewBanner_() *NewBanner_ {
	return &NewBanner_{}
}

func (p *NewBanner_) InitDefault() {
	*p = NewBanner_{}
}

func (p *NewBanner_) GetPicture() (v string) {
	return p.Picture
}

func (p *NewBanner_) GetProductLink() (v string) {
	return p.ProductLink
}

func (p *NewBanner_) GetIndex() (v int8) {
	return p.Index
}
func (p *NewBanner_) SetPicture(val string) {
	p.Picture = val
}
func (p *NewBanner_) SetProductLink(val string) {
	p.ProductLink = val
}
func (p *NewBanner_) SetIndex(val int8) {
	p.Index = val
}

var fieldIDToName_NewBanner_ = map[int16]string{
	2: "Picture",
	3: "ProductLink",
	4: "Index",
}

func (p *NewBanner_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPicture bool = false
	var issetProductLink bool = false
	var issetIndex bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPicture = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetProductLink = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetIndex = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPicture {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetProductLink {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetIndex {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NewBanner_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_NewBanner_[fieldId]))
}

func (p *NewBanner_) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Picture = v
	}
	return nil
}
func (p *NewBanner_) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ProductLink = v
	}
	return nil
}
func (p *NewBanner_) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Index = v
	}
	return nil
}

func (p *NewBanner_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NewBanner"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NewBanner_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Picture", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Picture); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *NewBanner_) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ProductLink", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ProductLink); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *NewBanner_) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Index", thrift.BYTE, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Index); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *NewBanner_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NewBanner_(%+v)", *p)
}

func (p *NewBanner_) DeepEqual(ano *NewBanner_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field2DeepEqual(ano.Picture) {
		return false
	}
	if !p.Field3DeepEqual(ano.ProductLink) {
		return false
	}
	if !p.Field4DeepEqual(ano.Index) {
		return false
	}
	return true
}

func (p *NewBanner_) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Picture, src) != 0 {
		return false
	}
	return true
}
func (p *NewBanner_) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ProductLink, src) != 0 {
		return false
	}
	return true
}
func (p *NewBanner_) Field4DeepEqual(src int8) bool {

	if p.Index != src {
		return false
	}
	return true
}

type CategoryBrandInfo struct {
	Id         int32 `thrift:"Id,1,required" frugal:"1,required,i32" json:"Id"`
	CategoryId int32 `thrift:"CategoryId,2,required" frugal:"2,required,i32" json:"CategoryId"`
	BrandId    int32 `thrift:"BrandId,3,required" frugal:"3,required,i32" json:"BrandId"`
}

func NewCategoryBrandInfo() *CategoryBrandInfo {
	return &CategoryBrandInfo{}
}

func (p *CategoryBrandInfo) InitDefault() {
	*p = CategoryBrandInfo{}
}

func (p *CategoryBrandInfo) GetId() (v int32) {
	return p.Id
}

func (p *CategoryBrandInfo) GetCategoryId() (v int32) {
	return p.CategoryId
}

func (p *CategoryBrandInfo) GetBrandId() (v int32) {
	return p.BrandId
}
func (p *CategoryBrandInfo) SetId(val int32) {
	p.Id = val
}
func (p *CategoryBrandInfo) SetCategoryId(val int32) {
	p.CategoryId = val
}
func (p *CategoryBrandInfo) SetBrandId(val int32) {
	p.BrandId = val
}

var fieldIDToName_CategoryBrandInfo = map[int16]string{
	1: "Id",
	2: "CategoryId",
	3: "BrandId",
}

func (p *CategoryBrandInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetCategoryId bool = false
	var issetBrandId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCategoryId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetBrandId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCategoryId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetBrandId {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryBrandInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CategoryBrandInfo[fieldId]))
}

func (p *CategoryBrandInfo) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}
func (p *CategoryBrandInfo) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.CategoryId = v
	}
	return nil
}
func (p *CategoryBrandInfo) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.BrandId = v
	}
	return nil
}

func (p *CategoryBrandInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CategoryBrandInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryBrandInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CategoryBrandInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CategoryId", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CategoryId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CategoryBrandInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BrandId", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.BrandId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CategoryBrandInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryBrandInfo(%+v)", *p)
}

func (p *CategoryBrandInfo) DeepEqual(ano *CategoryBrandInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CategoryId) {
		return false
	}
	if !p.Field3DeepEqual(ano.BrandId) {
		return false
	}
	return true
}

func (p *CategoryBrandInfo) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *CategoryBrandInfo) Field2DeepEqual(src int32) bool {

	if p.CategoryId != src {
		return false
	}
	return true
}
func (p *CategoryBrandInfo) Field3DeepEqual(src int32) bool {

	if p.BrandId != src {
		return false
	}
	return true
}

type NewCategoryBrand_ struct {
	BrandId    int32   `thrift:"BrandId,1,required" frugal:"1,required,i32" json:"BrandId"`
	CategoryId []int32 `thrift:"CategoryId,2,required" frugal:"2,required,list<i32>" json:"CategoryId"`
}

func NewNewCategoryBrand_() *NewCategoryBrand_ {
	return &NewCategoryBrand_{}
}

func (p *NewCategoryBrand_) InitDefault() {
	*p = NewCategoryBrand_{}
}

func (p *NewCategoryBrand_) GetBrandId() (v int32) {
	return p.BrandId
}

func (p *NewCategoryBrand_) GetCategoryId() (v []int32) {
	return p.CategoryId
}
func (p *NewCategoryBrand_) SetBrandId(val int32) {
	p.BrandId = val
}
func (p *NewCategoryBrand_) SetCategoryId(val []int32) {
	p.CategoryId = val
}

var fieldIDToName_NewCategoryBrand_ = map[int16]string{
	1: "BrandId",
	2: "CategoryId",
}

func (p *NewCategoryBrand_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBrandId bool = false
	var issetCategoryId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBrandId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCategoryId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBrandId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCategoryId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NewCategoryBrand_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_NewCategoryBrand_[fieldId]))
}

func (p *NewCategoryBrand_) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.BrandId = v
	}
	return nil
}
func (p *NewCategoryBrand_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.CategoryId = make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.CategoryId = append(p.CategoryId, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NewCategoryBrand_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NewCategoryBrand"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NewCategoryBrand_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BrandId", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.BrandId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *NewCategoryBrand_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CategoryId", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.CategoryId)); err != nil {
		return err
	}
	for _, v := range p.CategoryId {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *NewCategoryBrand_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NewCategoryBrand_(%+v)", *p)
}

func (p *NewCategoryBrand_) DeepEqual(ano *NewCategoryBrand_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BrandId) {
		return false
	}
	if !p.Field2DeepEqual(ano.CategoryId) {
		return false
	}
	return true
}

func (p *NewCategoryBrand_) Field1DeepEqual(src int32) bool {

	if p.BrandId != src {
		return false
	}
	return true
}
func (p *NewCategoryBrand_) Field2DeepEqual(src []int32) bool {

	if len(p.CategoryId) != len(src) {
		return false
	}
	for i, v := range p.CategoryId {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type ProductService interface {
	GetProductList(ctx context.Context, req *ProductFilter) (r []*ProductBasicInfo, err error)

	GetProductDetail(ctx context.Context, req *common.Req) (r *ProductDetailResp, err error)

	AddNewProduct(ctx context.Context, req *AddProductReq) (r *ProductInfo, err error)

	UpdateProduct(ctx context.Context, req *ProductInfo) (r *ProductInfo, err error)

	RateProduct(ctx context.Context, req *RatingReq) (r *RatingResp, err error)

	DeleteProduct(ctx context.Context, req *common.Req) (r *common.Empty, err error)
}

type ProductServiceClient struct {
	c thrift.TClient
}

func NewProductServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ProductServiceClient {
	return &ProductServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewProductServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ProductServiceClient {
	return &ProductServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewProductServiceClient(c thrift.TClient) *ProductServiceClient {
	return &ProductServiceClient{
		c: c,
	}
}

func (p *ProductServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *ProductServiceClient) GetProductList(ctx context.Context, req *ProductFilter) (r []*ProductBasicInfo, err error) {
	var _args ProductServiceGetProductListArgs
	_args.Req = req
	var _result ProductServiceGetProductListResult
	if err = p.Client_().Call(ctx, "GetProductList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ProductServiceClient) GetProductDetail(ctx context.Context, req *common.Req) (r *ProductDetailResp, err error) {
	var _args ProductServiceGetProductDetailArgs
	_args.Req = req
	var _result ProductServiceGetProductDetailResult
	if err = p.Client_().Call(ctx, "GetProductDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ProductServiceClient) AddNewProduct(ctx context.Context, req *AddProductReq) (r *ProductInfo, err error) {
	var _args ProductServiceAddNewProductArgs
	_args.Req = req
	var _result ProductServiceAddNewProductResult
	if err = p.Client_().Call(ctx, "AddNewProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ProductServiceClient) UpdateProduct(ctx context.Context, req *ProductInfo) (r *ProductInfo, err error) {
	var _args ProductServiceUpdateProductArgs
	_args.Req = req
	var _result ProductServiceUpdateProductResult
	if err = p.Client_().Call(ctx, "UpdateProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ProductServiceClient) RateProduct(ctx context.Context, req *RatingReq) (r *RatingResp, err error) {
	var _args ProductServiceRateProductArgs
	_args.Req = req
	var _result ProductServiceRateProductResult
	if err = p.Client_().Call(ctx, "RateProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ProductServiceClient) DeleteProduct(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args ProductServiceDeleteProductArgs
	_args.Req = req
	var _result ProductServiceDeleteProductResult
	if err = p.Client_().Call(ctx, "DeleteProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type CategoryService interface {
	GetCategoryList(ctx context.Context, req *common.PageFilter) (r []*CategoryInfo, err error)

	GetCategoryDetail(ctx context.Context, req *common.Req) (r *CategoryInfo, err error)

	AddNewCategory(ctx context.Context, req *NewCategory_) (r *CategoryInfo, err error)

	UpdateCategory(ctx context.Context, req *CategoryInfo) (r *CategoryInfo, err error)

	DeleteCategory(ctx context.Context, req *common.Req) (r *common.Empty, err error)
}

type CategoryServiceClient struct {
	c thrift.TClient
}

func NewCategoryServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CategoryServiceClient {
	return &CategoryServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewCategoryServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CategoryServiceClient {
	return &CategoryServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewCategoryServiceClient(c thrift.TClient) *CategoryServiceClient {
	return &CategoryServiceClient{
		c: c,
	}
}

func (p *CategoryServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *CategoryServiceClient) GetCategoryList(ctx context.Context, req *common.PageFilter) (r []*CategoryInfo, err error) {
	var _args CategoryServiceGetCategoryListArgs
	_args.Req = req
	var _result CategoryServiceGetCategoryListResult
	if err = p.Client_().Call(ctx, "GetCategoryList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CategoryServiceClient) GetCategoryDetail(ctx context.Context, req *common.Req) (r *CategoryInfo, err error) {
	var _args CategoryServiceGetCategoryDetailArgs
	_args.Req = req
	var _result CategoryServiceGetCategoryDetailResult
	if err = p.Client_().Call(ctx, "GetCategoryDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CategoryServiceClient) AddNewCategory(ctx context.Context, req *NewCategory_) (r *CategoryInfo, err error) {
	var _args CategoryServiceAddNewCategoryArgs
	_args.Req = req
	var _result CategoryServiceAddNewCategoryResult
	if err = p.Client_().Call(ctx, "AddNewCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CategoryServiceClient) UpdateCategory(ctx context.Context, req *CategoryInfo) (r *CategoryInfo, err error) {
	var _args CategoryServiceUpdateCategoryArgs
	_args.Req = req
	var _result CategoryServiceUpdateCategoryResult
	if err = p.Client_().Call(ctx, "UpdateCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CategoryServiceClient) DeleteCategory(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args CategoryServiceDeleteCategoryArgs
	_args.Req = req
	var _result CategoryServiceDeleteCategoryResult
	if err = p.Client_().Call(ctx, "DeleteCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type BrandService interface {
	GetBrandList(ctx context.Context, req *common.PageFilter) (r []*BrandListResp, err error)

	GetRelatedBrandsByCategoryId(ctx context.Context, req *BrandByCatReq) (r []*BrandInfo, err error)

	GetBrandDetail(ctx context.Context, req *common.Req) (r *BrandInfo, err error)

	AddNewBrand(ctx context.Context, req *NewBrand_) (r *BrandInfo, err error)

	UpdateBrand(ctx context.Context, req *BrandInfo) (r *BrandInfo, err error)

	DeleteBrand(ctx context.Context, req *common.Req) (r *common.Empty, err error)
}

type BrandServiceClient struct {
	c thrift.TClient
}

func NewBrandServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BrandServiceClient {
	return &BrandServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewBrandServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BrandServiceClient {
	return &BrandServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewBrandServiceClient(c thrift.TClient) *BrandServiceClient {
	return &BrandServiceClient{
		c: c,
	}
}

func (p *BrandServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *BrandServiceClient) GetBrandList(ctx context.Context, req *common.PageFilter) (r []*BrandListResp, err error) {
	var _args BrandServiceGetBrandListArgs
	_args.Req = req
	var _result BrandServiceGetBrandListResult
	if err = p.Client_().Call(ctx, "GetBrandList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BrandServiceClient) GetRelatedBrandsByCategoryId(ctx context.Context, req *BrandByCatReq) (r []*BrandInfo, err error) {
	var _args BrandServiceGetRelatedBrandsByCategoryIdArgs
	_args.Req = req
	var _result BrandServiceGetRelatedBrandsByCategoryIdResult
	if err = p.Client_().Call(ctx, "GetRelatedBrandsByCategoryId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BrandServiceClient) GetBrandDetail(ctx context.Context, req *common.Req) (r *BrandInfo, err error) {
	var _args BrandServiceGetBrandDetailArgs
	_args.Req = req
	var _result BrandServiceGetBrandDetailResult
	if err = p.Client_().Call(ctx, "GetBrandDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BrandServiceClient) AddNewBrand(ctx context.Context, req *NewBrand_) (r *BrandInfo, err error) {
	var _args BrandServiceAddNewBrandArgs
	_args.Req = req
	var _result BrandServiceAddNewBrandResult
	if err = p.Client_().Call(ctx, "AddNewBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BrandServiceClient) UpdateBrand(ctx context.Context, req *BrandInfo) (r *BrandInfo, err error) {
	var _args BrandServiceUpdateBrandArgs
	_args.Req = req
	var _result BrandServiceUpdateBrandResult
	if err = p.Client_().Call(ctx, "UpdateBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BrandServiceClient) DeleteBrand(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args BrandServiceDeleteBrandArgs
	_args.Req = req
	var _result BrandServiceDeleteBrandResult
	if err = p.Client_().Call(ctx, "DeleteBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type BannerService interface {
	GetAllBanners(ctx context.Context) (r []*BannerInfo, err error)

	AddNewBanner(ctx context.Context, req *NewBanner_) (r *BannerInfo, err error)

	UpdateBanner(ctx context.Context, req *BannerInfo) (r *BannerInfo, err error)

	DeleteBanner(ctx context.Context, req *common.Req) (r *common.Empty, err error)
}

type BannerServiceClient struct {
	c thrift.TClient
}

func NewBannerServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BannerServiceClient {
	return &BannerServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewBannerServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BannerServiceClient {
	return &BannerServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewBannerServiceClient(c thrift.TClient) *BannerServiceClient {
	return &BannerServiceClient{
		c: c,
	}
}

func (p *BannerServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *BannerServiceClient) GetAllBanners(ctx context.Context) (r []*BannerInfo, err error) {
	var _args BannerServiceGetAllBannersArgs
	var _result BannerServiceGetAllBannersResult
	if err = p.Client_().Call(ctx, "GetAllBanners", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BannerServiceClient) AddNewBanner(ctx context.Context, req *NewBanner_) (r *BannerInfo, err error) {
	var _args BannerServiceAddNewBannerArgs
	_args.Req = req
	var _result BannerServiceAddNewBannerResult
	if err = p.Client_().Call(ctx, "AddNewBanner", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BannerServiceClient) UpdateBanner(ctx context.Context, req *BannerInfo) (r *BannerInfo, err error) {
	var _args BannerServiceUpdateBannerArgs
	_args.Req = req
	var _result BannerServiceUpdateBannerResult
	if err = p.Client_().Call(ctx, "UpdateBanner", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BannerServiceClient) DeleteBanner(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args BannerServiceDeleteBannerArgs
	_args.Req = req
	var _result BannerServiceDeleteBannerResult
	if err = p.Client_().Call(ctx, "DeleteBanner", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type CategoryBrandService interface {
	BatchAddCategoryBrand(ctx context.Context, req *NewCategoryBrand_) (r []*CategoryBrandInfo, err error)

	UpdateCategoryBrand(ctx context.Context, req *NewCategoryBrand_) (r *common.Empty, err error)

	BatchReduceCategoryBrand(ctx context.Context, req *NewCategoryBrand_) (r *common.Empty, err error)

	DeleteBrandByCategory(ctx context.Context, req *common.Req) (r *common.Empty, err error)

	DeleteCategoryByBrand(ctx context.Context, req *common.Req) (r *common.Empty, err error)
}

type CategoryBrandServiceClient struct {
	c thrift.TClient
}

func NewCategoryBrandServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CategoryBrandServiceClient {
	return &CategoryBrandServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewCategoryBrandServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CategoryBrandServiceClient {
	return &CategoryBrandServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewCategoryBrandServiceClient(c thrift.TClient) *CategoryBrandServiceClient {
	return &CategoryBrandServiceClient{
		c: c,
	}
}

func (p *CategoryBrandServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *CategoryBrandServiceClient) BatchAddCategoryBrand(ctx context.Context, req *NewCategoryBrand_) (r []*CategoryBrandInfo, err error) {
	var _args CategoryBrandServiceBatchAddCategoryBrandArgs
	_args.Req = req
	var _result CategoryBrandServiceBatchAddCategoryBrandResult
	if err = p.Client_().Call(ctx, "BatchAddCategoryBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CategoryBrandServiceClient) UpdateCategoryBrand(ctx context.Context, req *NewCategoryBrand_) (r *common.Empty, err error) {
	var _args CategoryBrandServiceUpdateCategoryBrandArgs
	_args.Req = req
	var _result CategoryBrandServiceUpdateCategoryBrandResult
	if err = p.Client_().Call(ctx, "UpdateCategoryBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CategoryBrandServiceClient) BatchReduceCategoryBrand(ctx context.Context, req *NewCategoryBrand_) (r *common.Empty, err error) {
	var _args CategoryBrandServiceBatchReduceCategoryBrandArgs
	_args.Req = req
	var _result CategoryBrandServiceBatchReduceCategoryBrandResult
	if err = p.Client_().Call(ctx, "BatchReduceCategoryBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CategoryBrandServiceClient) DeleteBrandByCategory(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args CategoryBrandServiceDeleteBrandByCategoryArgs
	_args.Req = req
	var _result CategoryBrandServiceDeleteBrandByCategoryResult
	if err = p.Client_().Call(ctx, "DeleteBrandByCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CategoryBrandServiceClient) DeleteCategoryByBrand(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args CategoryBrandServiceDeleteCategoryByBrandArgs
	_args.Req = req
	var _result CategoryBrandServiceDeleteCategoryByBrandResult
	if err = p.Client_().Call(ctx, "DeleteCategoryByBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type ProductServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ProductService
}

func (p *ProductServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ProductServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ProductServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewProductServiceProcessor(handler ProductService) *ProductServiceProcessor {
	self := &ProductServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetProductList", &productServiceProcessorGetProductList{handler: handler})
	self.AddToProcessorMap("GetProductDetail", &productServiceProcessorGetProductDetail{handler: handler})
	self.AddToProcessorMap("AddNewProduct", &productServiceProcessorAddNewProduct{handler: handler})
	self.AddToProcessorMap("UpdateProduct", &productServiceProcessorUpdateProduct{handler: handler})
	self.AddToProcessorMap("RateProduct", &productServiceProcessorRateProduct{handler: handler})
	self.AddToProcessorMap("DeleteProduct", &productServiceProcessorDeleteProduct{handler: handler})
	return self
}
func (p *ProductServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type productServiceProcessorGetProductList struct {
	handler ProductService
}

func (p *productServiceProcessorGetProductList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ProductServiceGetProductListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetProductList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ProductServiceGetProductListResult{}
	var retval []*ProductBasicInfo
	if retval, err2 = p.handler.GetProductList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetProductList: "+err2.Error())
		oprot.WriteMessageBegin("GetProductList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetProductList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type productServiceProcessorGetProductDetail struct {
	handler ProductService
}

func (p *productServiceProcessorGetProductDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ProductServiceGetProductDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetProductDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ProductServiceGetProductDetailResult{}
	var retval *ProductDetailResp
	if retval, err2 = p.handler.GetProductDetail(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetProductDetail: "+err2.Error())
		oprot.WriteMessageBegin("GetProductDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetProductDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type productServiceProcessorAddNewProduct struct {
	handler ProductService
}

func (p *productServiceProcessorAddNewProduct) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ProductServiceAddNewProductArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddNewProduct", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ProductServiceAddNewProductResult{}
	var retval *ProductInfo
	if retval, err2 = p.handler.AddNewProduct(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddNewProduct: "+err2.Error())
		oprot.WriteMessageBegin("AddNewProduct", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddNewProduct", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type productServiceProcessorUpdateProduct struct {
	handler ProductService
}

func (p *productServiceProcessorUpdateProduct) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ProductServiceUpdateProductArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateProduct", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ProductServiceUpdateProductResult{}
	var retval *ProductInfo
	if retval, err2 = p.handler.UpdateProduct(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateProduct: "+err2.Error())
		oprot.WriteMessageBegin("UpdateProduct", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateProduct", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type productServiceProcessorRateProduct struct {
	handler ProductService
}

func (p *productServiceProcessorRateProduct) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ProductServiceRateProductArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RateProduct", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ProductServiceRateProductResult{}
	var retval *RatingResp
	if retval, err2 = p.handler.RateProduct(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RateProduct: "+err2.Error())
		oprot.WriteMessageBegin("RateProduct", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RateProduct", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type productServiceProcessorDeleteProduct struct {
	handler ProductService
}

func (p *productServiceProcessorDeleteProduct) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ProductServiceDeleteProductArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteProduct", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ProductServiceDeleteProductResult{}
	var retval *common.Empty
	if retval, err2 = p.handler.DeleteProduct(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteProduct: "+err2.Error())
		oprot.WriteMessageBegin("DeleteProduct", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteProduct", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type ProductServiceGetProductListArgs struct {
	Req *ProductFilter `thrift:"req,1" frugal:"1,default,ProductFilter" json:"req"`
}

func NewProductServiceGetProductListArgs() *ProductServiceGetProductListArgs {
	return &ProductServiceGetProductListArgs{}
}

func (p *ProductServiceGetProductListArgs) InitDefault() {
	*p = ProductServiceGetProductListArgs{}
}

var ProductServiceGetProductListArgs_Req_DEFAULT *ProductFilter

func (p *ProductServiceGetProductListArgs) GetReq() (v *ProductFilter) {
	if !p.IsSetReq() {
		return ProductServiceGetProductListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProductServiceGetProductListArgs) SetReq(val *ProductFilter) {
	p.Req = val
}

var fieldIDToName_ProductServiceGetProductListArgs = map[int16]string{
	1: "req",
}

func (p *ProductServiceGetProductListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductServiceGetProductListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProductServiceGetProductListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProductServiceGetProductListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewProductFilter()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProductServiceGetProductListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetProductList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProductServiceGetProductListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ProductServiceGetProductListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceGetProductListArgs(%+v)", *p)
}

func (p *ProductServiceGetProductListArgs) DeepEqual(ano *ProductServiceGetProductListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ProductServiceGetProductListArgs) Field1DeepEqual(src *ProductFilter) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ProductServiceGetProductListResult struct {
	Success []*ProductBasicInfo `thrift:"success,0,optional" frugal:"0,optional,list<ProductBasicInfo>" json:"success,omitempty"`
}

func NewProductServiceGetProductListResult() *ProductServiceGetProductListResult {
	return &ProductServiceGetProductListResult{}
}

func (p *ProductServiceGetProductListResult) InitDefault() {
	*p = ProductServiceGetProductListResult{}
}

var ProductServiceGetProductListResult_Success_DEFAULT []*ProductBasicInfo

func (p *ProductServiceGetProductListResult) GetSuccess() (v []*ProductBasicInfo) {
	if !p.IsSetSuccess() {
		return ProductServiceGetProductListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProductServiceGetProductListResult) SetSuccess(x interface{}) {
	p.Success = x.([]*ProductBasicInfo)
}

var fieldIDToName_ProductServiceGetProductListResult = map[int16]string{
	0: "success",
}

func (p *ProductServiceGetProductListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductServiceGetProductListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProductServiceGetProductListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProductServiceGetProductListResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Success = make([]*ProductBasicInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewProductBasicInfo()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Success = append(p.Success, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ProductServiceGetProductListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetProductList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProductServiceGetProductListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return err
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ProductServiceGetProductListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceGetProductListResult(%+v)", *p)
}

func (p *ProductServiceGetProductListResult) DeepEqual(ano *ProductServiceGetProductListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ProductServiceGetProductListResult) Field0DeepEqual(src []*ProductBasicInfo) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for i, v := range p.Success {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ProductServiceGetProductDetailArgs struct {
	Req *common.Req `thrift:"req,1" frugal:"1,default,common.Req" json:"req"`
}

func NewProductServiceGetProductDetailArgs() *ProductServiceGetProductDetailArgs {
	return &ProductServiceGetProductDetailArgs{}
}

func (p *ProductServiceGetProductDetailArgs) InitDefault() {
	*p = ProductServiceGetProductDetailArgs{}
}

var ProductServiceGetProductDetailArgs_Req_DEFAULT *common.Req

func (p *ProductServiceGetProductDetailArgs) GetReq() (v *common.Req) {
	if !p.IsSetReq() {
		return ProductServiceGetProductDetailArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProductServiceGetProductDetailArgs) SetReq(val *common.Req) {
	p.Req = val
}

var fieldIDToName_ProductServiceGetProductDetailArgs = map[int16]string{
	1: "req",
}

func (p *ProductServiceGetProductDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductServiceGetProductDetailArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProductServiceGetProductDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProductServiceGetProductDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common.NewReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProductServiceGetProductDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetProductDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProductServiceGetProductDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ProductServiceGetProductDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceGetProductDetailArgs(%+v)", *p)
}

func (p *ProductServiceGetProductDetailArgs) DeepEqual(ano *ProductServiceGetProductDetailArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ProductServiceGetProductDetailArgs) Field1DeepEqual(src *common.Req) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ProductServiceGetProductDetailResult struct {
	Success *ProductDetailResp `thrift:"success,0,optional" frugal:"0,optional,ProductDetailResp" json:"success,omitempty"`
}

func NewProductServiceGetProductDetailResult() *ProductServiceGetProductDetailResult {
	return &ProductServiceGetProductDetailResult{}
}

func (p *ProductServiceGetProductDetailResult) InitDefault() {
	*p = ProductServiceGetProductDetailResult{}
}

var ProductServiceGetProductDetailResult_Success_DEFAULT *ProductDetailResp

func (p *ProductServiceGetProductDetailResult) GetSuccess() (v *ProductDetailResp) {
	if !p.IsSetSuccess() {
		return ProductServiceGetProductDetailResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProductServiceGetProductDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*ProductDetailResp)
}

var fieldIDToName_ProductServiceGetProductDetailResult = map[int16]string{
	0: "success",
}

func (p *ProductServiceGetProductDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductServiceGetProductDetailResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProductServiceGetProductDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProductServiceGetProductDetailResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewProductDetailResp()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProductServiceGetProductDetailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetProductDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProductServiceGetProductDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ProductServiceGetProductDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceGetProductDetailResult(%+v)", *p)
}

func (p *ProductServiceGetProductDetailResult) DeepEqual(ano *ProductServiceGetProductDetailResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ProductServiceGetProductDetailResult) Field0DeepEqual(src *ProductDetailResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ProductServiceAddNewProductArgs struct {
	Req *AddProductReq `thrift:"req,1" frugal:"1,default,AddProductReq" json:"req"`
}

func NewProductServiceAddNewProductArgs() *ProductServiceAddNewProductArgs {
	return &ProductServiceAddNewProductArgs{}
}

func (p *ProductServiceAddNewProductArgs) InitDefault() {
	*p = ProductServiceAddNewProductArgs{}
}

var ProductServiceAddNewProductArgs_Req_DEFAULT *AddProductReq

func (p *ProductServiceAddNewProductArgs) GetReq() (v *AddProductReq) {
	if !p.IsSetReq() {
		return ProductServiceAddNewProductArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProductServiceAddNewProductArgs) SetReq(val *AddProductReq) {
	p.Req = val
}

var fieldIDToName_ProductServiceAddNewProductArgs = map[int16]string{
	1: "req",
}

func (p *ProductServiceAddNewProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductServiceAddNewProductArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProductServiceAddNewProductArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProductServiceAddNewProductArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewAddProductReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProductServiceAddNewProductArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddNewProduct_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProductServiceAddNewProductArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ProductServiceAddNewProductArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceAddNewProductArgs(%+v)", *p)
}

func (p *ProductServiceAddNewProductArgs) DeepEqual(ano *ProductServiceAddNewProductArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ProductServiceAddNewProductArgs) Field1DeepEqual(src *AddProductReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ProductServiceAddNewProductResult struct {
	Success *ProductInfo `thrift:"success,0,optional" frugal:"0,optional,ProductInfo" json:"success,omitempty"`
}

func NewProductServiceAddNewProductResult() *ProductServiceAddNewProductResult {
	return &ProductServiceAddNewProductResult{}
}

func (p *ProductServiceAddNewProductResult) InitDefault() {
	*p = ProductServiceAddNewProductResult{}
}

var ProductServiceAddNewProductResult_Success_DEFAULT *ProductInfo

func (p *ProductServiceAddNewProductResult) GetSuccess() (v *ProductInfo) {
	if !p.IsSetSuccess() {
		return ProductServiceAddNewProductResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProductServiceAddNewProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*ProductInfo)
}

var fieldIDToName_ProductServiceAddNewProductResult = map[int16]string{
	0: "success",
}

func (p *ProductServiceAddNewProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductServiceAddNewProductResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProductServiceAddNewProductResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProductServiceAddNewProductResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewProductInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProductServiceAddNewProductResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddNewProduct_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProductServiceAddNewProductResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ProductServiceAddNewProductResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceAddNewProductResult(%+v)", *p)
}

func (p *ProductServiceAddNewProductResult) DeepEqual(ano *ProductServiceAddNewProductResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ProductServiceAddNewProductResult) Field0DeepEqual(src *ProductInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ProductServiceUpdateProductArgs struct {
	Req *ProductInfo `thrift:"req,1" frugal:"1,default,ProductInfo" json:"req"`
}

func NewProductServiceUpdateProductArgs() *ProductServiceUpdateProductArgs {
	return &ProductServiceUpdateProductArgs{}
}

func (p *ProductServiceUpdateProductArgs) InitDefault() {
	*p = ProductServiceUpdateProductArgs{}
}

var ProductServiceUpdateProductArgs_Req_DEFAULT *ProductInfo

func (p *ProductServiceUpdateProductArgs) GetReq() (v *ProductInfo) {
	if !p.IsSetReq() {
		return ProductServiceUpdateProductArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProductServiceUpdateProductArgs) SetReq(val *ProductInfo) {
	p.Req = val
}

var fieldIDToName_ProductServiceUpdateProductArgs = map[int16]string{
	1: "req",
}

func (p *ProductServiceUpdateProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductServiceUpdateProductArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProductServiceUpdateProductArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProductServiceUpdateProductArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewProductInfo()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProductServiceUpdateProductArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateProduct_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProductServiceUpdateProductArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ProductServiceUpdateProductArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceUpdateProductArgs(%+v)", *p)
}

func (p *ProductServiceUpdateProductArgs) DeepEqual(ano *ProductServiceUpdateProductArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ProductServiceUpdateProductArgs) Field1DeepEqual(src *ProductInfo) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ProductServiceUpdateProductResult struct {
	Success *ProductInfo `thrift:"success,0,optional" frugal:"0,optional,ProductInfo" json:"success,omitempty"`
}

func NewProductServiceUpdateProductResult() *ProductServiceUpdateProductResult {
	return &ProductServiceUpdateProductResult{}
}

func (p *ProductServiceUpdateProductResult) InitDefault() {
	*p = ProductServiceUpdateProductResult{}
}

var ProductServiceUpdateProductResult_Success_DEFAULT *ProductInfo

func (p *ProductServiceUpdateProductResult) GetSuccess() (v *ProductInfo) {
	if !p.IsSetSuccess() {
		return ProductServiceUpdateProductResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProductServiceUpdateProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*ProductInfo)
}

var fieldIDToName_ProductServiceUpdateProductResult = map[int16]string{
	0: "success",
}

func (p *ProductServiceUpdateProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductServiceUpdateProductResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProductServiceUpdateProductResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProductServiceUpdateProductResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewProductInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProductServiceUpdateProductResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateProduct_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProductServiceUpdateProductResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ProductServiceUpdateProductResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceUpdateProductResult(%+v)", *p)
}

func (p *ProductServiceUpdateProductResult) DeepEqual(ano *ProductServiceUpdateProductResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ProductServiceUpdateProductResult) Field0DeepEqual(src *ProductInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ProductServiceRateProductArgs struct {
	Req *RatingReq `thrift:"req,1" frugal:"1,default,RatingReq" json:"req"`
}

func NewProductServiceRateProductArgs() *ProductServiceRateProductArgs {
	return &ProductServiceRateProductArgs{}
}

func (p *ProductServiceRateProductArgs) InitDefault() {
	*p = ProductServiceRateProductArgs{}
}

var ProductServiceRateProductArgs_Req_DEFAULT *RatingReq

func (p *ProductServiceRateProductArgs) GetReq() (v *RatingReq) {
	if !p.IsSetReq() {
		return ProductServiceRateProductArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProductServiceRateProductArgs) SetReq(val *RatingReq) {
	p.Req = val
}

var fieldIDToName_ProductServiceRateProductArgs = map[int16]string{
	1: "req",
}

func (p *ProductServiceRateProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductServiceRateProductArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProductServiceRateProductArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProductServiceRateProductArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewRatingReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProductServiceRateProductArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RateProduct_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProductServiceRateProductArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ProductServiceRateProductArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceRateProductArgs(%+v)", *p)
}

func (p *ProductServiceRateProductArgs) DeepEqual(ano *ProductServiceRateProductArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ProductServiceRateProductArgs) Field1DeepEqual(src *RatingReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ProductServiceRateProductResult struct {
	Success *RatingResp `thrift:"success,0,optional" frugal:"0,optional,RatingResp" json:"success,omitempty"`
}

func NewProductServiceRateProductResult() *ProductServiceRateProductResult {
	return &ProductServiceRateProductResult{}
}

func (p *ProductServiceRateProductResult) InitDefault() {
	*p = ProductServiceRateProductResult{}
}

var ProductServiceRateProductResult_Success_DEFAULT *RatingResp

func (p *ProductServiceRateProductResult) GetSuccess() (v *RatingResp) {
	if !p.IsSetSuccess() {
		return ProductServiceRateProductResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProductServiceRateProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*RatingResp)
}

var fieldIDToName_ProductServiceRateProductResult = map[int16]string{
	0: "success",
}

func (p *ProductServiceRateProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductServiceRateProductResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProductServiceRateProductResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProductServiceRateProductResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewRatingResp()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProductServiceRateProductResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RateProduct_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProductServiceRateProductResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ProductServiceRateProductResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceRateProductResult(%+v)", *p)
}

func (p *ProductServiceRateProductResult) DeepEqual(ano *ProductServiceRateProductResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ProductServiceRateProductResult) Field0DeepEqual(src *RatingResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ProductServiceDeleteProductArgs struct {
	Req *common.Req `thrift:"req,1" frugal:"1,default,common.Req" json:"req"`
}

func NewProductServiceDeleteProductArgs() *ProductServiceDeleteProductArgs {
	return &ProductServiceDeleteProductArgs{}
}

func (p *ProductServiceDeleteProductArgs) InitDefault() {
	*p = ProductServiceDeleteProductArgs{}
}

var ProductServiceDeleteProductArgs_Req_DEFAULT *common.Req

func (p *ProductServiceDeleteProductArgs) GetReq() (v *common.Req) {
	if !p.IsSetReq() {
		return ProductServiceDeleteProductArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProductServiceDeleteProductArgs) SetReq(val *common.Req) {
	p.Req = val
}

var fieldIDToName_ProductServiceDeleteProductArgs = map[int16]string{
	1: "req",
}

func (p *ProductServiceDeleteProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductServiceDeleteProductArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProductServiceDeleteProductArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProductServiceDeleteProductArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common.NewReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProductServiceDeleteProductArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteProduct_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProductServiceDeleteProductArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ProductServiceDeleteProductArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceDeleteProductArgs(%+v)", *p)
}

func (p *ProductServiceDeleteProductArgs) DeepEqual(ano *ProductServiceDeleteProductArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ProductServiceDeleteProductArgs) Field1DeepEqual(src *common.Req) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ProductServiceDeleteProductResult struct {
	Success *common.Empty `thrift:"success,0,optional" frugal:"0,optional,common.Empty" json:"success,omitempty"`
}

func NewProductServiceDeleteProductResult() *ProductServiceDeleteProductResult {
	return &ProductServiceDeleteProductResult{}
}

func (p *ProductServiceDeleteProductResult) InitDefault() {
	*p = ProductServiceDeleteProductResult{}
}

var ProductServiceDeleteProductResult_Success_DEFAULT *common.Empty

func (p *ProductServiceDeleteProductResult) GetSuccess() (v *common.Empty) {
	if !p.IsSetSuccess() {
		return ProductServiceDeleteProductResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProductServiceDeleteProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.Empty)
}

var fieldIDToName_ProductServiceDeleteProductResult = map[int16]string{
	0: "success",
}

func (p *ProductServiceDeleteProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductServiceDeleteProductResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProductServiceDeleteProductResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProductServiceDeleteProductResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmpty()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProductServiceDeleteProductResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteProduct_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProductServiceDeleteProductResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ProductServiceDeleteProductResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceDeleteProductResult(%+v)", *p)
}

func (p *ProductServiceDeleteProductResult) DeepEqual(ano *ProductServiceDeleteProductResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ProductServiceDeleteProductResult) Field0DeepEqual(src *common.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      CategoryService
}

func (p *CategoryServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CategoryServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *CategoryServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCategoryServiceProcessor(handler CategoryService) *CategoryServiceProcessor {
	self := &CategoryServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetCategoryList", &categoryServiceProcessorGetCategoryList{handler: handler})
	self.AddToProcessorMap("GetCategoryDetail", &categoryServiceProcessorGetCategoryDetail{handler: handler})
	self.AddToProcessorMap("AddNewCategory", &categoryServiceProcessorAddNewCategory{handler: handler})
	self.AddToProcessorMap("UpdateCategory", &categoryServiceProcessorUpdateCategory{handler: handler})
	self.AddToProcessorMap("DeleteCategory", &categoryServiceProcessorDeleteCategory{handler: handler})
	return self
}
func (p *CategoryServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type categoryServiceProcessorGetCategoryList struct {
	handler CategoryService
}

func (p *categoryServiceProcessorGetCategoryList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CategoryServiceGetCategoryListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetCategoryList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CategoryServiceGetCategoryListResult{}
	var retval []*CategoryInfo
	if retval, err2 = p.handler.GetCategoryList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCategoryList: "+err2.Error())
		oprot.WriteMessageBegin("GetCategoryList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetCategoryList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type categoryServiceProcessorGetCategoryDetail struct {
	handler CategoryService
}

func (p *categoryServiceProcessorGetCategoryDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CategoryServiceGetCategoryDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetCategoryDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CategoryServiceGetCategoryDetailResult{}
	var retval *CategoryInfo
	if retval, err2 = p.handler.GetCategoryDetail(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCategoryDetail: "+err2.Error())
		oprot.WriteMessageBegin("GetCategoryDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetCategoryDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type categoryServiceProcessorAddNewCategory struct {
	handler CategoryService
}

func (p *categoryServiceProcessorAddNewCategory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CategoryServiceAddNewCategoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddNewCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CategoryServiceAddNewCategoryResult{}
	var retval *CategoryInfo
	if retval, err2 = p.handler.AddNewCategory(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddNewCategory: "+err2.Error())
		oprot.WriteMessageBegin("AddNewCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddNewCategory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type categoryServiceProcessorUpdateCategory struct {
	handler CategoryService
}

func (p *categoryServiceProcessorUpdateCategory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CategoryServiceUpdateCategoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CategoryServiceUpdateCategoryResult{}
	var retval *CategoryInfo
	if retval, err2 = p.handler.UpdateCategory(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateCategory: "+err2.Error())
		oprot.WriteMessageBegin("UpdateCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateCategory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type categoryServiceProcessorDeleteCategory struct {
	handler CategoryService
}

func (p *categoryServiceProcessorDeleteCategory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CategoryServiceDeleteCategoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CategoryServiceDeleteCategoryResult{}
	var retval *common.Empty
	if retval, err2 = p.handler.DeleteCategory(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteCategory: "+err2.Error())
		oprot.WriteMessageBegin("DeleteCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteCategory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type CategoryServiceGetCategoryListArgs struct {
	Req *common.PageFilter `thrift:"req,1" frugal:"1,default,common.PageFilter" json:"req"`
}

func NewCategoryServiceGetCategoryListArgs() *CategoryServiceGetCategoryListArgs {
	return &CategoryServiceGetCategoryListArgs{}
}

func (p *CategoryServiceGetCategoryListArgs) InitDefault() {
	*p = CategoryServiceGetCategoryListArgs{}
}

var CategoryServiceGetCategoryListArgs_Req_DEFAULT *common.PageFilter

func (p *CategoryServiceGetCategoryListArgs) GetReq() (v *common.PageFilter) {
	if !p.IsSetReq() {
		return CategoryServiceGetCategoryListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CategoryServiceGetCategoryListArgs) SetReq(val *common.PageFilter) {
	p.Req = val
}

var fieldIDToName_CategoryServiceGetCategoryListArgs = map[int16]string{
	1: "req",
}

func (p *CategoryServiceGetCategoryListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CategoryServiceGetCategoryListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryServiceGetCategoryListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryServiceGetCategoryListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common.NewPageFilter()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryServiceGetCategoryListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCategoryList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryServiceGetCategoryListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CategoryServiceGetCategoryListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryServiceGetCategoryListArgs(%+v)", *p)
}

func (p *CategoryServiceGetCategoryListArgs) DeepEqual(ano *CategoryServiceGetCategoryListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CategoryServiceGetCategoryListArgs) Field1DeepEqual(src *common.PageFilter) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryServiceGetCategoryListResult struct {
	Success []*CategoryInfo `thrift:"success,0,optional" frugal:"0,optional,list<CategoryInfo>" json:"success,omitempty"`
}

func NewCategoryServiceGetCategoryListResult() *CategoryServiceGetCategoryListResult {
	return &CategoryServiceGetCategoryListResult{}
}

func (p *CategoryServiceGetCategoryListResult) InitDefault() {
	*p = CategoryServiceGetCategoryListResult{}
}

var CategoryServiceGetCategoryListResult_Success_DEFAULT []*CategoryInfo

func (p *CategoryServiceGetCategoryListResult) GetSuccess() (v []*CategoryInfo) {
	if !p.IsSetSuccess() {
		return CategoryServiceGetCategoryListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CategoryServiceGetCategoryListResult) SetSuccess(x interface{}) {
	p.Success = x.([]*CategoryInfo)
}

var fieldIDToName_CategoryServiceGetCategoryListResult = map[int16]string{
	0: "success",
}

func (p *CategoryServiceGetCategoryListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CategoryServiceGetCategoryListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryServiceGetCategoryListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryServiceGetCategoryListResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Success = make([]*CategoryInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewCategoryInfo()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Success = append(p.Success, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CategoryServiceGetCategoryListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCategoryList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryServiceGetCategoryListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return err
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CategoryServiceGetCategoryListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryServiceGetCategoryListResult(%+v)", *p)
}

func (p *CategoryServiceGetCategoryListResult) DeepEqual(ano *CategoryServiceGetCategoryListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CategoryServiceGetCategoryListResult) Field0DeepEqual(src []*CategoryInfo) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for i, v := range p.Success {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CategoryServiceGetCategoryDetailArgs struct {
	Req *common.Req `thrift:"req,1" frugal:"1,default,common.Req" json:"req"`
}

func NewCategoryServiceGetCategoryDetailArgs() *CategoryServiceGetCategoryDetailArgs {
	return &CategoryServiceGetCategoryDetailArgs{}
}

func (p *CategoryServiceGetCategoryDetailArgs) InitDefault() {
	*p = CategoryServiceGetCategoryDetailArgs{}
}

var CategoryServiceGetCategoryDetailArgs_Req_DEFAULT *common.Req

func (p *CategoryServiceGetCategoryDetailArgs) GetReq() (v *common.Req) {
	if !p.IsSetReq() {
		return CategoryServiceGetCategoryDetailArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CategoryServiceGetCategoryDetailArgs) SetReq(val *common.Req) {
	p.Req = val
}

var fieldIDToName_CategoryServiceGetCategoryDetailArgs = map[int16]string{
	1: "req",
}

func (p *CategoryServiceGetCategoryDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CategoryServiceGetCategoryDetailArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryServiceGetCategoryDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryServiceGetCategoryDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common.NewReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryServiceGetCategoryDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCategoryDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryServiceGetCategoryDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CategoryServiceGetCategoryDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryServiceGetCategoryDetailArgs(%+v)", *p)
}

func (p *CategoryServiceGetCategoryDetailArgs) DeepEqual(ano *CategoryServiceGetCategoryDetailArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CategoryServiceGetCategoryDetailArgs) Field1DeepEqual(src *common.Req) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryServiceGetCategoryDetailResult struct {
	Success *CategoryInfo `thrift:"success,0,optional" frugal:"0,optional,CategoryInfo" json:"success,omitempty"`
}

func NewCategoryServiceGetCategoryDetailResult() *CategoryServiceGetCategoryDetailResult {
	return &CategoryServiceGetCategoryDetailResult{}
}

func (p *CategoryServiceGetCategoryDetailResult) InitDefault() {
	*p = CategoryServiceGetCategoryDetailResult{}
}

var CategoryServiceGetCategoryDetailResult_Success_DEFAULT *CategoryInfo

func (p *CategoryServiceGetCategoryDetailResult) GetSuccess() (v *CategoryInfo) {
	if !p.IsSetSuccess() {
		return CategoryServiceGetCategoryDetailResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CategoryServiceGetCategoryDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*CategoryInfo)
}

var fieldIDToName_CategoryServiceGetCategoryDetailResult = map[int16]string{
	0: "success",
}

func (p *CategoryServiceGetCategoryDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CategoryServiceGetCategoryDetailResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryServiceGetCategoryDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryServiceGetCategoryDetailResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCategoryInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryServiceGetCategoryDetailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCategoryDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryServiceGetCategoryDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CategoryServiceGetCategoryDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryServiceGetCategoryDetailResult(%+v)", *p)
}

func (p *CategoryServiceGetCategoryDetailResult) DeepEqual(ano *CategoryServiceGetCategoryDetailResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CategoryServiceGetCategoryDetailResult) Field0DeepEqual(src *CategoryInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryServiceAddNewCategoryArgs struct {
	Req *NewCategory_ `thrift:"req,1" frugal:"1,default,NewCategory_" json:"req"`
}

func NewCategoryServiceAddNewCategoryArgs() *CategoryServiceAddNewCategoryArgs {
	return &CategoryServiceAddNewCategoryArgs{}
}

func (p *CategoryServiceAddNewCategoryArgs) InitDefault() {
	*p = CategoryServiceAddNewCategoryArgs{}
}

var CategoryServiceAddNewCategoryArgs_Req_DEFAULT *NewCategory_

func (p *CategoryServiceAddNewCategoryArgs) GetReq() (v *NewCategory_) {
	if !p.IsSetReq() {
		return CategoryServiceAddNewCategoryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CategoryServiceAddNewCategoryArgs) SetReq(val *NewCategory_) {
	p.Req = val
}

var fieldIDToName_CategoryServiceAddNewCategoryArgs = map[int16]string{
	1: "req",
}

func (p *CategoryServiceAddNewCategoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CategoryServiceAddNewCategoryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryServiceAddNewCategoryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryServiceAddNewCategoryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewNewCategory_()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryServiceAddNewCategoryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddNewCategory_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryServiceAddNewCategoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CategoryServiceAddNewCategoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryServiceAddNewCategoryArgs(%+v)", *p)
}

func (p *CategoryServiceAddNewCategoryArgs) DeepEqual(ano *CategoryServiceAddNewCategoryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CategoryServiceAddNewCategoryArgs) Field1DeepEqual(src *NewCategory_) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryServiceAddNewCategoryResult struct {
	Success *CategoryInfo `thrift:"success,0,optional" frugal:"0,optional,CategoryInfo" json:"success,omitempty"`
}

func NewCategoryServiceAddNewCategoryResult() *CategoryServiceAddNewCategoryResult {
	return &CategoryServiceAddNewCategoryResult{}
}

func (p *CategoryServiceAddNewCategoryResult) InitDefault() {
	*p = CategoryServiceAddNewCategoryResult{}
}

var CategoryServiceAddNewCategoryResult_Success_DEFAULT *CategoryInfo

func (p *CategoryServiceAddNewCategoryResult) GetSuccess() (v *CategoryInfo) {
	if !p.IsSetSuccess() {
		return CategoryServiceAddNewCategoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CategoryServiceAddNewCategoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*CategoryInfo)
}

var fieldIDToName_CategoryServiceAddNewCategoryResult = map[int16]string{
	0: "success",
}

func (p *CategoryServiceAddNewCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CategoryServiceAddNewCategoryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryServiceAddNewCategoryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryServiceAddNewCategoryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCategoryInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryServiceAddNewCategoryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddNewCategory_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryServiceAddNewCategoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CategoryServiceAddNewCategoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryServiceAddNewCategoryResult(%+v)", *p)
}

func (p *CategoryServiceAddNewCategoryResult) DeepEqual(ano *CategoryServiceAddNewCategoryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CategoryServiceAddNewCategoryResult) Field0DeepEqual(src *CategoryInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryServiceUpdateCategoryArgs struct {
	Req *CategoryInfo `thrift:"req,1" frugal:"1,default,CategoryInfo" json:"req"`
}

func NewCategoryServiceUpdateCategoryArgs() *CategoryServiceUpdateCategoryArgs {
	return &CategoryServiceUpdateCategoryArgs{}
}

func (p *CategoryServiceUpdateCategoryArgs) InitDefault() {
	*p = CategoryServiceUpdateCategoryArgs{}
}

var CategoryServiceUpdateCategoryArgs_Req_DEFAULT *CategoryInfo

func (p *CategoryServiceUpdateCategoryArgs) GetReq() (v *CategoryInfo) {
	if !p.IsSetReq() {
		return CategoryServiceUpdateCategoryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CategoryServiceUpdateCategoryArgs) SetReq(val *CategoryInfo) {
	p.Req = val
}

var fieldIDToName_CategoryServiceUpdateCategoryArgs = map[int16]string{
	1: "req",
}

func (p *CategoryServiceUpdateCategoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CategoryServiceUpdateCategoryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryServiceUpdateCategoryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryServiceUpdateCategoryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCategoryInfo()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryServiceUpdateCategoryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCategory_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryServiceUpdateCategoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CategoryServiceUpdateCategoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryServiceUpdateCategoryArgs(%+v)", *p)
}

func (p *CategoryServiceUpdateCategoryArgs) DeepEqual(ano *CategoryServiceUpdateCategoryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CategoryServiceUpdateCategoryArgs) Field1DeepEqual(src *CategoryInfo) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryServiceUpdateCategoryResult struct {
	Success *CategoryInfo `thrift:"success,0,optional" frugal:"0,optional,CategoryInfo" json:"success,omitempty"`
}

func NewCategoryServiceUpdateCategoryResult() *CategoryServiceUpdateCategoryResult {
	return &CategoryServiceUpdateCategoryResult{}
}

func (p *CategoryServiceUpdateCategoryResult) InitDefault() {
	*p = CategoryServiceUpdateCategoryResult{}
}

var CategoryServiceUpdateCategoryResult_Success_DEFAULT *CategoryInfo

func (p *CategoryServiceUpdateCategoryResult) GetSuccess() (v *CategoryInfo) {
	if !p.IsSetSuccess() {
		return CategoryServiceUpdateCategoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CategoryServiceUpdateCategoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*CategoryInfo)
}

var fieldIDToName_CategoryServiceUpdateCategoryResult = map[int16]string{
	0: "success",
}

func (p *CategoryServiceUpdateCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CategoryServiceUpdateCategoryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryServiceUpdateCategoryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryServiceUpdateCategoryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCategoryInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryServiceUpdateCategoryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCategory_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryServiceUpdateCategoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CategoryServiceUpdateCategoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryServiceUpdateCategoryResult(%+v)", *p)
}

func (p *CategoryServiceUpdateCategoryResult) DeepEqual(ano *CategoryServiceUpdateCategoryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CategoryServiceUpdateCategoryResult) Field0DeepEqual(src *CategoryInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryServiceDeleteCategoryArgs struct {
	Req *common.Req `thrift:"req,1" frugal:"1,default,common.Req" json:"req"`
}

func NewCategoryServiceDeleteCategoryArgs() *CategoryServiceDeleteCategoryArgs {
	return &CategoryServiceDeleteCategoryArgs{}
}

func (p *CategoryServiceDeleteCategoryArgs) InitDefault() {
	*p = CategoryServiceDeleteCategoryArgs{}
}

var CategoryServiceDeleteCategoryArgs_Req_DEFAULT *common.Req

func (p *CategoryServiceDeleteCategoryArgs) GetReq() (v *common.Req) {
	if !p.IsSetReq() {
		return CategoryServiceDeleteCategoryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CategoryServiceDeleteCategoryArgs) SetReq(val *common.Req) {
	p.Req = val
}

var fieldIDToName_CategoryServiceDeleteCategoryArgs = map[int16]string{
	1: "req",
}

func (p *CategoryServiceDeleteCategoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CategoryServiceDeleteCategoryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryServiceDeleteCategoryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryServiceDeleteCategoryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common.NewReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryServiceDeleteCategoryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCategory_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryServiceDeleteCategoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CategoryServiceDeleteCategoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryServiceDeleteCategoryArgs(%+v)", *p)
}

func (p *CategoryServiceDeleteCategoryArgs) DeepEqual(ano *CategoryServiceDeleteCategoryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CategoryServiceDeleteCategoryArgs) Field1DeepEqual(src *common.Req) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryServiceDeleteCategoryResult struct {
	Success *common.Empty `thrift:"success,0,optional" frugal:"0,optional,common.Empty" json:"success,omitempty"`
}

func NewCategoryServiceDeleteCategoryResult() *CategoryServiceDeleteCategoryResult {
	return &CategoryServiceDeleteCategoryResult{}
}

func (p *CategoryServiceDeleteCategoryResult) InitDefault() {
	*p = CategoryServiceDeleteCategoryResult{}
}

var CategoryServiceDeleteCategoryResult_Success_DEFAULT *common.Empty

func (p *CategoryServiceDeleteCategoryResult) GetSuccess() (v *common.Empty) {
	if !p.IsSetSuccess() {
		return CategoryServiceDeleteCategoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CategoryServiceDeleteCategoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.Empty)
}

var fieldIDToName_CategoryServiceDeleteCategoryResult = map[int16]string{
	0: "success",
}

func (p *CategoryServiceDeleteCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CategoryServiceDeleteCategoryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryServiceDeleteCategoryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryServiceDeleteCategoryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmpty()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryServiceDeleteCategoryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCategory_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryServiceDeleteCategoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CategoryServiceDeleteCategoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryServiceDeleteCategoryResult(%+v)", *p)
}

func (p *CategoryServiceDeleteCategoryResult) DeepEqual(ano *CategoryServiceDeleteCategoryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CategoryServiceDeleteCategoryResult) Field0DeepEqual(src *common.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BrandServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      BrandService
}

func (p *BrandServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *BrandServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *BrandServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewBrandServiceProcessor(handler BrandService) *BrandServiceProcessor {
	self := &BrandServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetBrandList", &brandServiceProcessorGetBrandList{handler: handler})
	self.AddToProcessorMap("GetRelatedBrandsByCategoryId", &brandServiceProcessorGetRelatedBrandsByCategoryId{handler: handler})
	self.AddToProcessorMap("GetBrandDetail", &brandServiceProcessorGetBrandDetail{handler: handler})
	self.AddToProcessorMap("AddNewBrand", &brandServiceProcessorAddNewBrand{handler: handler})
	self.AddToProcessorMap("UpdateBrand", &brandServiceProcessorUpdateBrand{handler: handler})
	self.AddToProcessorMap("DeleteBrand", &brandServiceProcessorDeleteBrand{handler: handler})
	return self
}
func (p *BrandServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type brandServiceProcessorGetBrandList struct {
	handler BrandService
}

func (p *brandServiceProcessorGetBrandList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BrandServiceGetBrandListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetBrandList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BrandServiceGetBrandListResult{}
	var retval []*BrandListResp
	if retval, err2 = p.handler.GetBrandList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetBrandList: "+err2.Error())
		oprot.WriteMessageBegin("GetBrandList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetBrandList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type brandServiceProcessorGetRelatedBrandsByCategoryId struct {
	handler BrandService
}

func (p *brandServiceProcessorGetRelatedBrandsByCategoryId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BrandServiceGetRelatedBrandsByCategoryIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetRelatedBrandsByCategoryId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BrandServiceGetRelatedBrandsByCategoryIdResult{}
	var retval []*BrandInfo
	if retval, err2 = p.handler.GetRelatedBrandsByCategoryId(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetRelatedBrandsByCategoryId: "+err2.Error())
		oprot.WriteMessageBegin("GetRelatedBrandsByCategoryId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetRelatedBrandsByCategoryId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type brandServiceProcessorGetBrandDetail struct {
	handler BrandService
}

func (p *brandServiceProcessorGetBrandDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BrandServiceGetBrandDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetBrandDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BrandServiceGetBrandDetailResult{}
	var retval *BrandInfo
	if retval, err2 = p.handler.GetBrandDetail(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetBrandDetail: "+err2.Error())
		oprot.WriteMessageBegin("GetBrandDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetBrandDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type brandServiceProcessorAddNewBrand struct {
	handler BrandService
}

func (p *brandServiceProcessorAddNewBrand) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BrandServiceAddNewBrandArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddNewBrand", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BrandServiceAddNewBrandResult{}
	var retval *BrandInfo
	if retval, err2 = p.handler.AddNewBrand(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddNewBrand: "+err2.Error())
		oprot.WriteMessageBegin("AddNewBrand", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddNewBrand", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type brandServiceProcessorUpdateBrand struct {
	handler BrandService
}

func (p *brandServiceProcessorUpdateBrand) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BrandServiceUpdateBrandArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateBrand", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BrandServiceUpdateBrandResult{}
	var retval *BrandInfo
	if retval, err2 = p.handler.UpdateBrand(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateBrand: "+err2.Error())
		oprot.WriteMessageBegin("UpdateBrand", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateBrand", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type brandServiceProcessorDeleteBrand struct {
	handler BrandService
}

func (p *brandServiceProcessorDeleteBrand) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BrandServiceDeleteBrandArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteBrand", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BrandServiceDeleteBrandResult{}
	var retval *common.Empty
	if retval, err2 = p.handler.DeleteBrand(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteBrand: "+err2.Error())
		oprot.WriteMessageBegin("DeleteBrand", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteBrand", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type BrandServiceGetBrandListArgs struct {
	Req *common.PageFilter `thrift:"req,1" frugal:"1,default,common.PageFilter" json:"req"`
}

func NewBrandServiceGetBrandListArgs() *BrandServiceGetBrandListArgs {
	return &BrandServiceGetBrandListArgs{}
}

func (p *BrandServiceGetBrandListArgs) InitDefault() {
	*p = BrandServiceGetBrandListArgs{}
}

var BrandServiceGetBrandListArgs_Req_DEFAULT *common.PageFilter

func (p *BrandServiceGetBrandListArgs) GetReq() (v *common.PageFilter) {
	if !p.IsSetReq() {
		return BrandServiceGetBrandListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BrandServiceGetBrandListArgs) SetReq(val *common.PageFilter) {
	p.Req = val
}

var fieldIDToName_BrandServiceGetBrandListArgs = map[int16]string{
	1: "req",
}

func (p *BrandServiceGetBrandListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BrandServiceGetBrandListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BrandServiceGetBrandListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BrandServiceGetBrandListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common.NewPageFilter()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BrandServiceGetBrandListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetBrandList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BrandServiceGetBrandListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BrandServiceGetBrandListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BrandServiceGetBrandListArgs(%+v)", *p)
}

func (p *BrandServiceGetBrandListArgs) DeepEqual(ano *BrandServiceGetBrandListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BrandServiceGetBrandListArgs) Field1DeepEqual(src *common.PageFilter) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BrandServiceGetBrandListResult struct {
	Success []*BrandListResp `thrift:"success,0,optional" frugal:"0,optional,list<BrandListResp>" json:"success,omitempty"`
}

func NewBrandServiceGetBrandListResult() *BrandServiceGetBrandListResult {
	return &BrandServiceGetBrandListResult{}
}

func (p *BrandServiceGetBrandListResult) InitDefault() {
	*p = BrandServiceGetBrandListResult{}
}

var BrandServiceGetBrandListResult_Success_DEFAULT []*BrandListResp

func (p *BrandServiceGetBrandListResult) GetSuccess() (v []*BrandListResp) {
	if !p.IsSetSuccess() {
		return BrandServiceGetBrandListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BrandServiceGetBrandListResult) SetSuccess(x interface{}) {
	p.Success = x.([]*BrandListResp)
}

var fieldIDToName_BrandServiceGetBrandListResult = map[int16]string{
	0: "success",
}

func (p *BrandServiceGetBrandListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BrandServiceGetBrandListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BrandServiceGetBrandListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BrandServiceGetBrandListResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Success = make([]*BrandListResp, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewBrandListResp()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Success = append(p.Success, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BrandServiceGetBrandListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetBrandList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BrandServiceGetBrandListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return err
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BrandServiceGetBrandListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BrandServiceGetBrandListResult(%+v)", *p)
}

func (p *BrandServiceGetBrandListResult) DeepEqual(ano *BrandServiceGetBrandListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BrandServiceGetBrandListResult) Field0DeepEqual(src []*BrandListResp) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for i, v := range p.Success {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type BrandServiceGetRelatedBrandsByCategoryIdArgs struct {
	Req *BrandByCatReq `thrift:"req,1" frugal:"1,default,BrandByCatReq" json:"req"`
}

func NewBrandServiceGetRelatedBrandsByCategoryIdArgs() *BrandServiceGetRelatedBrandsByCategoryIdArgs {
	return &BrandServiceGetRelatedBrandsByCategoryIdArgs{}
}

func (p *BrandServiceGetRelatedBrandsByCategoryIdArgs) InitDefault() {
	*p = BrandServiceGetRelatedBrandsByCategoryIdArgs{}
}

var BrandServiceGetRelatedBrandsByCategoryIdArgs_Req_DEFAULT *BrandByCatReq

func (p *BrandServiceGetRelatedBrandsByCategoryIdArgs) GetReq() (v *BrandByCatReq) {
	if !p.IsSetReq() {
		return BrandServiceGetRelatedBrandsByCategoryIdArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BrandServiceGetRelatedBrandsByCategoryIdArgs) SetReq(val *BrandByCatReq) {
	p.Req = val
}

var fieldIDToName_BrandServiceGetRelatedBrandsByCategoryIdArgs = map[int16]string{
	1: "req",
}

func (p *BrandServiceGetRelatedBrandsByCategoryIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BrandServiceGetRelatedBrandsByCategoryIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BrandServiceGetRelatedBrandsByCategoryIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BrandServiceGetRelatedBrandsByCategoryIdArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewBrandByCatReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BrandServiceGetRelatedBrandsByCategoryIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRelatedBrandsByCategoryId_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BrandServiceGetRelatedBrandsByCategoryIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BrandServiceGetRelatedBrandsByCategoryIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BrandServiceGetRelatedBrandsByCategoryIdArgs(%+v)", *p)
}

func (p *BrandServiceGetRelatedBrandsByCategoryIdArgs) DeepEqual(ano *BrandServiceGetRelatedBrandsByCategoryIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BrandServiceGetRelatedBrandsByCategoryIdArgs) Field1DeepEqual(src *BrandByCatReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BrandServiceGetRelatedBrandsByCategoryIdResult struct {
	Success []*BrandInfo `thrift:"success,0,optional" frugal:"0,optional,list<BrandInfo>" json:"success,omitempty"`
}

func NewBrandServiceGetRelatedBrandsByCategoryIdResult() *BrandServiceGetRelatedBrandsByCategoryIdResult {
	return &BrandServiceGetRelatedBrandsByCategoryIdResult{}
}

func (p *BrandServiceGetRelatedBrandsByCategoryIdResult) InitDefault() {
	*p = BrandServiceGetRelatedBrandsByCategoryIdResult{}
}

var BrandServiceGetRelatedBrandsByCategoryIdResult_Success_DEFAULT []*BrandInfo

func (p *BrandServiceGetRelatedBrandsByCategoryIdResult) GetSuccess() (v []*BrandInfo) {
	if !p.IsSetSuccess() {
		return BrandServiceGetRelatedBrandsByCategoryIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BrandServiceGetRelatedBrandsByCategoryIdResult) SetSuccess(x interface{}) {
	p.Success = x.([]*BrandInfo)
}

var fieldIDToName_BrandServiceGetRelatedBrandsByCategoryIdResult = map[int16]string{
	0: "success",
}

func (p *BrandServiceGetRelatedBrandsByCategoryIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BrandServiceGetRelatedBrandsByCategoryIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BrandServiceGetRelatedBrandsByCategoryIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BrandServiceGetRelatedBrandsByCategoryIdResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Success = make([]*BrandInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewBrandInfo()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Success = append(p.Success, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BrandServiceGetRelatedBrandsByCategoryIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRelatedBrandsByCategoryId_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BrandServiceGetRelatedBrandsByCategoryIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return err
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BrandServiceGetRelatedBrandsByCategoryIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BrandServiceGetRelatedBrandsByCategoryIdResult(%+v)", *p)
}

func (p *BrandServiceGetRelatedBrandsByCategoryIdResult) DeepEqual(ano *BrandServiceGetRelatedBrandsByCategoryIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BrandServiceGetRelatedBrandsByCategoryIdResult) Field0DeepEqual(src []*BrandInfo) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for i, v := range p.Success {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type BrandServiceGetBrandDetailArgs struct {
	Req *common.Req `thrift:"req,1" frugal:"1,default,common.Req" json:"req"`
}

func NewBrandServiceGetBrandDetailArgs() *BrandServiceGetBrandDetailArgs {
	return &BrandServiceGetBrandDetailArgs{}
}

func (p *BrandServiceGetBrandDetailArgs) InitDefault() {
	*p = BrandServiceGetBrandDetailArgs{}
}

var BrandServiceGetBrandDetailArgs_Req_DEFAULT *common.Req

func (p *BrandServiceGetBrandDetailArgs) GetReq() (v *common.Req) {
	if !p.IsSetReq() {
		return BrandServiceGetBrandDetailArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BrandServiceGetBrandDetailArgs) SetReq(val *common.Req) {
	p.Req = val
}

var fieldIDToName_BrandServiceGetBrandDetailArgs = map[int16]string{
	1: "req",
}

func (p *BrandServiceGetBrandDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BrandServiceGetBrandDetailArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BrandServiceGetBrandDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BrandServiceGetBrandDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common.NewReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BrandServiceGetBrandDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetBrandDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BrandServiceGetBrandDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BrandServiceGetBrandDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BrandServiceGetBrandDetailArgs(%+v)", *p)
}

func (p *BrandServiceGetBrandDetailArgs) DeepEqual(ano *BrandServiceGetBrandDetailArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BrandServiceGetBrandDetailArgs) Field1DeepEqual(src *common.Req) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BrandServiceGetBrandDetailResult struct {
	Success *BrandInfo `thrift:"success,0,optional" frugal:"0,optional,BrandInfo" json:"success,omitempty"`
}

func NewBrandServiceGetBrandDetailResult() *BrandServiceGetBrandDetailResult {
	return &BrandServiceGetBrandDetailResult{}
}

func (p *BrandServiceGetBrandDetailResult) InitDefault() {
	*p = BrandServiceGetBrandDetailResult{}
}

var BrandServiceGetBrandDetailResult_Success_DEFAULT *BrandInfo

func (p *BrandServiceGetBrandDetailResult) GetSuccess() (v *BrandInfo) {
	if !p.IsSetSuccess() {
		return BrandServiceGetBrandDetailResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BrandServiceGetBrandDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*BrandInfo)
}

var fieldIDToName_BrandServiceGetBrandDetailResult = map[int16]string{
	0: "success",
}

func (p *BrandServiceGetBrandDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BrandServiceGetBrandDetailResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BrandServiceGetBrandDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BrandServiceGetBrandDetailResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBrandInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BrandServiceGetBrandDetailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetBrandDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BrandServiceGetBrandDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BrandServiceGetBrandDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BrandServiceGetBrandDetailResult(%+v)", *p)
}

func (p *BrandServiceGetBrandDetailResult) DeepEqual(ano *BrandServiceGetBrandDetailResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BrandServiceGetBrandDetailResult) Field0DeepEqual(src *BrandInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BrandServiceAddNewBrandArgs struct {
	Req *NewBrand_ `thrift:"req,1" frugal:"1,default,NewBrand_" json:"req"`
}

func NewBrandServiceAddNewBrandArgs() *BrandServiceAddNewBrandArgs {
	return &BrandServiceAddNewBrandArgs{}
}

func (p *BrandServiceAddNewBrandArgs) InitDefault() {
	*p = BrandServiceAddNewBrandArgs{}
}

var BrandServiceAddNewBrandArgs_Req_DEFAULT *NewBrand_

func (p *BrandServiceAddNewBrandArgs) GetReq() (v *NewBrand_) {
	if !p.IsSetReq() {
		return BrandServiceAddNewBrandArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BrandServiceAddNewBrandArgs) SetReq(val *NewBrand_) {
	p.Req = val
}

var fieldIDToName_BrandServiceAddNewBrandArgs = map[int16]string{
	1: "req",
}

func (p *BrandServiceAddNewBrandArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BrandServiceAddNewBrandArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BrandServiceAddNewBrandArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BrandServiceAddNewBrandArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewNewBrand_()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BrandServiceAddNewBrandArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddNewBrand_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BrandServiceAddNewBrandArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BrandServiceAddNewBrandArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BrandServiceAddNewBrandArgs(%+v)", *p)
}

func (p *BrandServiceAddNewBrandArgs) DeepEqual(ano *BrandServiceAddNewBrandArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BrandServiceAddNewBrandArgs) Field1DeepEqual(src *NewBrand_) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BrandServiceAddNewBrandResult struct {
	Success *BrandInfo `thrift:"success,0,optional" frugal:"0,optional,BrandInfo" json:"success,omitempty"`
}

func NewBrandServiceAddNewBrandResult() *BrandServiceAddNewBrandResult {
	return &BrandServiceAddNewBrandResult{}
}

func (p *BrandServiceAddNewBrandResult) InitDefault() {
	*p = BrandServiceAddNewBrandResult{}
}

var BrandServiceAddNewBrandResult_Success_DEFAULT *BrandInfo

func (p *BrandServiceAddNewBrandResult) GetSuccess() (v *BrandInfo) {
	if !p.IsSetSuccess() {
		return BrandServiceAddNewBrandResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BrandServiceAddNewBrandResult) SetSuccess(x interface{}) {
	p.Success = x.(*BrandInfo)
}

var fieldIDToName_BrandServiceAddNewBrandResult = map[int16]string{
	0: "success",
}

func (p *BrandServiceAddNewBrandResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BrandServiceAddNewBrandResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BrandServiceAddNewBrandResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BrandServiceAddNewBrandResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBrandInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BrandServiceAddNewBrandResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddNewBrand_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BrandServiceAddNewBrandResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BrandServiceAddNewBrandResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BrandServiceAddNewBrandResult(%+v)", *p)
}

func (p *BrandServiceAddNewBrandResult) DeepEqual(ano *BrandServiceAddNewBrandResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BrandServiceAddNewBrandResult) Field0DeepEqual(src *BrandInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BrandServiceUpdateBrandArgs struct {
	Req *BrandInfo `thrift:"req,1" frugal:"1,default,BrandInfo" json:"req"`
}

func NewBrandServiceUpdateBrandArgs() *BrandServiceUpdateBrandArgs {
	return &BrandServiceUpdateBrandArgs{}
}

func (p *BrandServiceUpdateBrandArgs) InitDefault() {
	*p = BrandServiceUpdateBrandArgs{}
}

var BrandServiceUpdateBrandArgs_Req_DEFAULT *BrandInfo

func (p *BrandServiceUpdateBrandArgs) GetReq() (v *BrandInfo) {
	if !p.IsSetReq() {
		return BrandServiceUpdateBrandArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BrandServiceUpdateBrandArgs) SetReq(val *BrandInfo) {
	p.Req = val
}

var fieldIDToName_BrandServiceUpdateBrandArgs = map[int16]string{
	1: "req",
}

func (p *BrandServiceUpdateBrandArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BrandServiceUpdateBrandArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BrandServiceUpdateBrandArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BrandServiceUpdateBrandArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewBrandInfo()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BrandServiceUpdateBrandArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateBrand_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BrandServiceUpdateBrandArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BrandServiceUpdateBrandArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BrandServiceUpdateBrandArgs(%+v)", *p)
}

func (p *BrandServiceUpdateBrandArgs) DeepEqual(ano *BrandServiceUpdateBrandArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BrandServiceUpdateBrandArgs) Field1DeepEqual(src *BrandInfo) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BrandServiceUpdateBrandResult struct {
	Success *BrandInfo `thrift:"success,0,optional" frugal:"0,optional,BrandInfo" json:"success,omitempty"`
}

func NewBrandServiceUpdateBrandResult() *BrandServiceUpdateBrandResult {
	return &BrandServiceUpdateBrandResult{}
}

func (p *BrandServiceUpdateBrandResult) InitDefault() {
	*p = BrandServiceUpdateBrandResult{}
}

var BrandServiceUpdateBrandResult_Success_DEFAULT *BrandInfo

func (p *BrandServiceUpdateBrandResult) GetSuccess() (v *BrandInfo) {
	if !p.IsSetSuccess() {
		return BrandServiceUpdateBrandResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BrandServiceUpdateBrandResult) SetSuccess(x interface{}) {
	p.Success = x.(*BrandInfo)
}

var fieldIDToName_BrandServiceUpdateBrandResult = map[int16]string{
	0: "success",
}

func (p *BrandServiceUpdateBrandResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BrandServiceUpdateBrandResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BrandServiceUpdateBrandResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BrandServiceUpdateBrandResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBrandInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BrandServiceUpdateBrandResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateBrand_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BrandServiceUpdateBrandResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BrandServiceUpdateBrandResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BrandServiceUpdateBrandResult(%+v)", *p)
}

func (p *BrandServiceUpdateBrandResult) DeepEqual(ano *BrandServiceUpdateBrandResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BrandServiceUpdateBrandResult) Field0DeepEqual(src *BrandInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BrandServiceDeleteBrandArgs struct {
	Req *common.Req `thrift:"req,1" frugal:"1,default,common.Req" json:"req"`
}

func NewBrandServiceDeleteBrandArgs() *BrandServiceDeleteBrandArgs {
	return &BrandServiceDeleteBrandArgs{}
}

func (p *BrandServiceDeleteBrandArgs) InitDefault() {
	*p = BrandServiceDeleteBrandArgs{}
}

var BrandServiceDeleteBrandArgs_Req_DEFAULT *common.Req

func (p *BrandServiceDeleteBrandArgs) GetReq() (v *common.Req) {
	if !p.IsSetReq() {
		return BrandServiceDeleteBrandArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BrandServiceDeleteBrandArgs) SetReq(val *common.Req) {
	p.Req = val
}

var fieldIDToName_BrandServiceDeleteBrandArgs = map[int16]string{
	1: "req",
}

func (p *BrandServiceDeleteBrandArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BrandServiceDeleteBrandArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BrandServiceDeleteBrandArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BrandServiceDeleteBrandArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common.NewReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BrandServiceDeleteBrandArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteBrand_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BrandServiceDeleteBrandArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BrandServiceDeleteBrandArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BrandServiceDeleteBrandArgs(%+v)", *p)
}

func (p *BrandServiceDeleteBrandArgs) DeepEqual(ano *BrandServiceDeleteBrandArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BrandServiceDeleteBrandArgs) Field1DeepEqual(src *common.Req) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BrandServiceDeleteBrandResult struct {
	Success *common.Empty `thrift:"success,0,optional" frugal:"0,optional,common.Empty" json:"success,omitempty"`
}

func NewBrandServiceDeleteBrandResult() *BrandServiceDeleteBrandResult {
	return &BrandServiceDeleteBrandResult{}
}

func (p *BrandServiceDeleteBrandResult) InitDefault() {
	*p = BrandServiceDeleteBrandResult{}
}

var BrandServiceDeleteBrandResult_Success_DEFAULT *common.Empty

func (p *BrandServiceDeleteBrandResult) GetSuccess() (v *common.Empty) {
	if !p.IsSetSuccess() {
		return BrandServiceDeleteBrandResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BrandServiceDeleteBrandResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.Empty)
}

var fieldIDToName_BrandServiceDeleteBrandResult = map[int16]string{
	0: "success",
}

func (p *BrandServiceDeleteBrandResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BrandServiceDeleteBrandResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BrandServiceDeleteBrandResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BrandServiceDeleteBrandResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmpty()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BrandServiceDeleteBrandResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteBrand_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BrandServiceDeleteBrandResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BrandServiceDeleteBrandResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BrandServiceDeleteBrandResult(%+v)", *p)
}

func (p *BrandServiceDeleteBrandResult) DeepEqual(ano *BrandServiceDeleteBrandResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BrandServiceDeleteBrandResult) Field0DeepEqual(src *common.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BannerServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      BannerService
}

func (p *BannerServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *BannerServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *BannerServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewBannerServiceProcessor(handler BannerService) *BannerServiceProcessor {
	self := &BannerServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetAllBanners", &bannerServiceProcessorGetAllBanners{handler: handler})
	self.AddToProcessorMap("AddNewBanner", &bannerServiceProcessorAddNewBanner{handler: handler})
	self.AddToProcessorMap("UpdateBanner", &bannerServiceProcessorUpdateBanner{handler: handler})
	self.AddToProcessorMap("DeleteBanner", &bannerServiceProcessorDeleteBanner{handler: handler})
	return self
}
func (p *BannerServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type bannerServiceProcessorGetAllBanners struct {
	handler BannerService
}

func (p *bannerServiceProcessorGetAllBanners) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BannerServiceGetAllBannersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetAllBanners", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BannerServiceGetAllBannersResult{}
	var retval []*BannerInfo
	if retval, err2 = p.handler.GetAllBanners(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAllBanners: "+err2.Error())
		oprot.WriteMessageBegin("GetAllBanners", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetAllBanners", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bannerServiceProcessorAddNewBanner struct {
	handler BannerService
}

func (p *bannerServiceProcessorAddNewBanner) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BannerServiceAddNewBannerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddNewBanner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BannerServiceAddNewBannerResult{}
	var retval *BannerInfo
	if retval, err2 = p.handler.AddNewBanner(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddNewBanner: "+err2.Error())
		oprot.WriteMessageBegin("AddNewBanner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddNewBanner", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bannerServiceProcessorUpdateBanner struct {
	handler BannerService
}

func (p *bannerServiceProcessorUpdateBanner) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BannerServiceUpdateBannerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateBanner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BannerServiceUpdateBannerResult{}
	var retval *BannerInfo
	if retval, err2 = p.handler.UpdateBanner(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateBanner: "+err2.Error())
		oprot.WriteMessageBegin("UpdateBanner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateBanner", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bannerServiceProcessorDeleteBanner struct {
	handler BannerService
}

func (p *bannerServiceProcessorDeleteBanner) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BannerServiceDeleteBannerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteBanner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BannerServiceDeleteBannerResult{}
	var retval *common.Empty
	if retval, err2 = p.handler.DeleteBanner(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteBanner: "+err2.Error())
		oprot.WriteMessageBegin("DeleteBanner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteBanner", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type BannerServiceGetAllBannersArgs struct {
}

func NewBannerServiceGetAllBannersArgs() *BannerServiceGetAllBannersArgs {
	return &BannerServiceGetAllBannersArgs{}
}

func (p *BannerServiceGetAllBannersArgs) InitDefault() {
	*p = BannerServiceGetAllBannersArgs{}
}

var fieldIDToName_BannerServiceGetAllBannersArgs = map[int16]string{}

func (p *BannerServiceGetAllBannersArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BannerServiceGetAllBannersArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("GetAllBanners_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BannerServiceGetAllBannersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BannerServiceGetAllBannersArgs(%+v)", *p)
}

func (p *BannerServiceGetAllBannersArgs) DeepEqual(ano *BannerServiceGetAllBannersArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BannerServiceGetAllBannersResult struct {
	Success []*BannerInfo `thrift:"success,0,optional" frugal:"0,optional,list<BannerInfo>" json:"success,omitempty"`
}

func NewBannerServiceGetAllBannersResult() *BannerServiceGetAllBannersResult {
	return &BannerServiceGetAllBannersResult{}
}

func (p *BannerServiceGetAllBannersResult) InitDefault() {
	*p = BannerServiceGetAllBannersResult{}
}

var BannerServiceGetAllBannersResult_Success_DEFAULT []*BannerInfo

func (p *BannerServiceGetAllBannersResult) GetSuccess() (v []*BannerInfo) {
	if !p.IsSetSuccess() {
		return BannerServiceGetAllBannersResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BannerServiceGetAllBannersResult) SetSuccess(x interface{}) {
	p.Success = x.([]*BannerInfo)
}

var fieldIDToName_BannerServiceGetAllBannersResult = map[int16]string{
	0: "success",
}

func (p *BannerServiceGetAllBannersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BannerServiceGetAllBannersResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BannerServiceGetAllBannersResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BannerServiceGetAllBannersResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Success = make([]*BannerInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewBannerInfo()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Success = append(p.Success, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BannerServiceGetAllBannersResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAllBanners_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BannerServiceGetAllBannersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return err
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BannerServiceGetAllBannersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BannerServiceGetAllBannersResult(%+v)", *p)
}

func (p *BannerServiceGetAllBannersResult) DeepEqual(ano *BannerServiceGetAllBannersResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BannerServiceGetAllBannersResult) Field0DeepEqual(src []*BannerInfo) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for i, v := range p.Success {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type BannerServiceAddNewBannerArgs struct {
	Req *NewBanner_ `thrift:"req,1" frugal:"1,default,NewBanner_" json:"req"`
}

func NewBannerServiceAddNewBannerArgs() *BannerServiceAddNewBannerArgs {
	return &BannerServiceAddNewBannerArgs{}
}

func (p *BannerServiceAddNewBannerArgs) InitDefault() {
	*p = BannerServiceAddNewBannerArgs{}
}

var BannerServiceAddNewBannerArgs_Req_DEFAULT *NewBanner_

func (p *BannerServiceAddNewBannerArgs) GetReq() (v *NewBanner_) {
	if !p.IsSetReq() {
		return BannerServiceAddNewBannerArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BannerServiceAddNewBannerArgs) SetReq(val *NewBanner_) {
	p.Req = val
}

var fieldIDToName_BannerServiceAddNewBannerArgs = map[int16]string{
	1: "req",
}

func (p *BannerServiceAddNewBannerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BannerServiceAddNewBannerArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BannerServiceAddNewBannerArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BannerServiceAddNewBannerArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewNewBanner_()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BannerServiceAddNewBannerArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddNewBanner_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BannerServiceAddNewBannerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BannerServiceAddNewBannerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BannerServiceAddNewBannerArgs(%+v)", *p)
}

func (p *BannerServiceAddNewBannerArgs) DeepEqual(ano *BannerServiceAddNewBannerArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BannerServiceAddNewBannerArgs) Field1DeepEqual(src *NewBanner_) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BannerServiceAddNewBannerResult struct {
	Success *BannerInfo `thrift:"success,0,optional" frugal:"0,optional,BannerInfo" json:"success,omitempty"`
}

func NewBannerServiceAddNewBannerResult() *BannerServiceAddNewBannerResult {
	return &BannerServiceAddNewBannerResult{}
}

func (p *BannerServiceAddNewBannerResult) InitDefault() {
	*p = BannerServiceAddNewBannerResult{}
}

var BannerServiceAddNewBannerResult_Success_DEFAULT *BannerInfo

func (p *BannerServiceAddNewBannerResult) GetSuccess() (v *BannerInfo) {
	if !p.IsSetSuccess() {
		return BannerServiceAddNewBannerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BannerServiceAddNewBannerResult) SetSuccess(x interface{}) {
	p.Success = x.(*BannerInfo)
}

var fieldIDToName_BannerServiceAddNewBannerResult = map[int16]string{
	0: "success",
}

func (p *BannerServiceAddNewBannerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BannerServiceAddNewBannerResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BannerServiceAddNewBannerResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BannerServiceAddNewBannerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBannerInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BannerServiceAddNewBannerResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddNewBanner_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BannerServiceAddNewBannerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BannerServiceAddNewBannerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BannerServiceAddNewBannerResult(%+v)", *p)
}

func (p *BannerServiceAddNewBannerResult) DeepEqual(ano *BannerServiceAddNewBannerResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BannerServiceAddNewBannerResult) Field0DeepEqual(src *BannerInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BannerServiceUpdateBannerArgs struct {
	Req *BannerInfo `thrift:"req,1" frugal:"1,default,BannerInfo" json:"req"`
}

func NewBannerServiceUpdateBannerArgs() *BannerServiceUpdateBannerArgs {
	return &BannerServiceUpdateBannerArgs{}
}

func (p *BannerServiceUpdateBannerArgs) InitDefault() {
	*p = BannerServiceUpdateBannerArgs{}
}

var BannerServiceUpdateBannerArgs_Req_DEFAULT *BannerInfo

func (p *BannerServiceUpdateBannerArgs) GetReq() (v *BannerInfo) {
	if !p.IsSetReq() {
		return BannerServiceUpdateBannerArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BannerServiceUpdateBannerArgs) SetReq(val *BannerInfo) {
	p.Req = val
}

var fieldIDToName_BannerServiceUpdateBannerArgs = map[int16]string{
	1: "req",
}

func (p *BannerServiceUpdateBannerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BannerServiceUpdateBannerArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BannerServiceUpdateBannerArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BannerServiceUpdateBannerArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewBannerInfo()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BannerServiceUpdateBannerArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateBanner_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BannerServiceUpdateBannerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BannerServiceUpdateBannerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BannerServiceUpdateBannerArgs(%+v)", *p)
}

func (p *BannerServiceUpdateBannerArgs) DeepEqual(ano *BannerServiceUpdateBannerArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BannerServiceUpdateBannerArgs) Field1DeepEqual(src *BannerInfo) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BannerServiceUpdateBannerResult struct {
	Success *BannerInfo `thrift:"success,0,optional" frugal:"0,optional,BannerInfo" json:"success,omitempty"`
}

func NewBannerServiceUpdateBannerResult() *BannerServiceUpdateBannerResult {
	return &BannerServiceUpdateBannerResult{}
}

func (p *BannerServiceUpdateBannerResult) InitDefault() {
	*p = BannerServiceUpdateBannerResult{}
}

var BannerServiceUpdateBannerResult_Success_DEFAULT *BannerInfo

func (p *BannerServiceUpdateBannerResult) GetSuccess() (v *BannerInfo) {
	if !p.IsSetSuccess() {
		return BannerServiceUpdateBannerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BannerServiceUpdateBannerResult) SetSuccess(x interface{}) {
	p.Success = x.(*BannerInfo)
}

var fieldIDToName_BannerServiceUpdateBannerResult = map[int16]string{
	0: "success",
}

func (p *BannerServiceUpdateBannerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BannerServiceUpdateBannerResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BannerServiceUpdateBannerResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BannerServiceUpdateBannerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBannerInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BannerServiceUpdateBannerResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateBanner_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BannerServiceUpdateBannerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BannerServiceUpdateBannerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BannerServiceUpdateBannerResult(%+v)", *p)
}

func (p *BannerServiceUpdateBannerResult) DeepEqual(ano *BannerServiceUpdateBannerResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BannerServiceUpdateBannerResult) Field0DeepEqual(src *BannerInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BannerServiceDeleteBannerArgs struct {
	Req *common.Req `thrift:"req,1" frugal:"1,default,common.Req" json:"req"`
}

func NewBannerServiceDeleteBannerArgs() *BannerServiceDeleteBannerArgs {
	return &BannerServiceDeleteBannerArgs{}
}

func (p *BannerServiceDeleteBannerArgs) InitDefault() {
	*p = BannerServiceDeleteBannerArgs{}
}

var BannerServiceDeleteBannerArgs_Req_DEFAULT *common.Req

func (p *BannerServiceDeleteBannerArgs) GetReq() (v *common.Req) {
	if !p.IsSetReq() {
		return BannerServiceDeleteBannerArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BannerServiceDeleteBannerArgs) SetReq(val *common.Req) {
	p.Req = val
}

var fieldIDToName_BannerServiceDeleteBannerArgs = map[int16]string{
	1: "req",
}

func (p *BannerServiceDeleteBannerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BannerServiceDeleteBannerArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BannerServiceDeleteBannerArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BannerServiceDeleteBannerArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common.NewReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BannerServiceDeleteBannerArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteBanner_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BannerServiceDeleteBannerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BannerServiceDeleteBannerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BannerServiceDeleteBannerArgs(%+v)", *p)
}

func (p *BannerServiceDeleteBannerArgs) DeepEqual(ano *BannerServiceDeleteBannerArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BannerServiceDeleteBannerArgs) Field1DeepEqual(src *common.Req) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BannerServiceDeleteBannerResult struct {
	Success *common.Empty `thrift:"success,0,optional" frugal:"0,optional,common.Empty" json:"success,omitempty"`
}

func NewBannerServiceDeleteBannerResult() *BannerServiceDeleteBannerResult {
	return &BannerServiceDeleteBannerResult{}
}

func (p *BannerServiceDeleteBannerResult) InitDefault() {
	*p = BannerServiceDeleteBannerResult{}
}

var BannerServiceDeleteBannerResult_Success_DEFAULT *common.Empty

func (p *BannerServiceDeleteBannerResult) GetSuccess() (v *common.Empty) {
	if !p.IsSetSuccess() {
		return BannerServiceDeleteBannerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BannerServiceDeleteBannerResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.Empty)
}

var fieldIDToName_BannerServiceDeleteBannerResult = map[int16]string{
	0: "success",
}

func (p *BannerServiceDeleteBannerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BannerServiceDeleteBannerResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BannerServiceDeleteBannerResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BannerServiceDeleteBannerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmpty()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BannerServiceDeleteBannerResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteBanner_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BannerServiceDeleteBannerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BannerServiceDeleteBannerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BannerServiceDeleteBannerResult(%+v)", *p)
}

func (p *BannerServiceDeleteBannerResult) DeepEqual(ano *BannerServiceDeleteBannerResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BannerServiceDeleteBannerResult) Field0DeepEqual(src *common.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryBrandServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      CategoryBrandService
}

func (p *CategoryBrandServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CategoryBrandServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *CategoryBrandServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCategoryBrandServiceProcessor(handler CategoryBrandService) *CategoryBrandServiceProcessor {
	self := &CategoryBrandServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("BatchAddCategoryBrand", &categoryBrandServiceProcessorBatchAddCategoryBrand{handler: handler})
	self.AddToProcessorMap("UpdateCategoryBrand", &categoryBrandServiceProcessorUpdateCategoryBrand{handler: handler})
	self.AddToProcessorMap("BatchReduceCategoryBrand", &categoryBrandServiceProcessorBatchReduceCategoryBrand{handler: handler})
	self.AddToProcessorMap("DeleteBrandByCategory", &categoryBrandServiceProcessorDeleteBrandByCategory{handler: handler})
	self.AddToProcessorMap("DeleteCategoryByBrand", &categoryBrandServiceProcessorDeleteCategoryByBrand{handler: handler})
	return self
}
func (p *CategoryBrandServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type categoryBrandServiceProcessorBatchAddCategoryBrand struct {
	handler CategoryBrandService
}

func (p *categoryBrandServiceProcessorBatchAddCategoryBrand) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CategoryBrandServiceBatchAddCategoryBrandArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchAddCategoryBrand", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CategoryBrandServiceBatchAddCategoryBrandResult{}
	var retval []*CategoryBrandInfo
	if retval, err2 = p.handler.BatchAddCategoryBrand(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchAddCategoryBrand: "+err2.Error())
		oprot.WriteMessageBegin("BatchAddCategoryBrand", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchAddCategoryBrand", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type categoryBrandServiceProcessorUpdateCategoryBrand struct {
	handler CategoryBrandService
}

func (p *categoryBrandServiceProcessorUpdateCategoryBrand) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CategoryBrandServiceUpdateCategoryBrandArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateCategoryBrand", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CategoryBrandServiceUpdateCategoryBrandResult{}
	var retval *common.Empty
	if retval, err2 = p.handler.UpdateCategoryBrand(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateCategoryBrand: "+err2.Error())
		oprot.WriteMessageBegin("UpdateCategoryBrand", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateCategoryBrand", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type categoryBrandServiceProcessorBatchReduceCategoryBrand struct {
	handler CategoryBrandService
}

func (p *categoryBrandServiceProcessorBatchReduceCategoryBrand) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CategoryBrandServiceBatchReduceCategoryBrandArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchReduceCategoryBrand", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CategoryBrandServiceBatchReduceCategoryBrandResult{}
	var retval *common.Empty
	if retval, err2 = p.handler.BatchReduceCategoryBrand(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchReduceCategoryBrand: "+err2.Error())
		oprot.WriteMessageBegin("BatchReduceCategoryBrand", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchReduceCategoryBrand", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type categoryBrandServiceProcessorDeleteBrandByCategory struct {
	handler CategoryBrandService
}

func (p *categoryBrandServiceProcessorDeleteBrandByCategory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CategoryBrandServiceDeleteBrandByCategoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteBrandByCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CategoryBrandServiceDeleteBrandByCategoryResult{}
	var retval *common.Empty
	if retval, err2 = p.handler.DeleteBrandByCategory(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteBrandByCategory: "+err2.Error())
		oprot.WriteMessageBegin("DeleteBrandByCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteBrandByCategory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type categoryBrandServiceProcessorDeleteCategoryByBrand struct {
	handler CategoryBrandService
}

func (p *categoryBrandServiceProcessorDeleteCategoryByBrand) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CategoryBrandServiceDeleteCategoryByBrandArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteCategoryByBrand", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CategoryBrandServiceDeleteCategoryByBrandResult{}
	var retval *common.Empty
	if retval, err2 = p.handler.DeleteCategoryByBrand(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteCategoryByBrand: "+err2.Error())
		oprot.WriteMessageBegin("DeleteCategoryByBrand", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteCategoryByBrand", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type CategoryBrandServiceBatchAddCategoryBrandArgs struct {
	Req *NewCategoryBrand_ `thrift:"req,1" frugal:"1,default,NewCategoryBrand_" json:"req"`
}

func NewCategoryBrandServiceBatchAddCategoryBrandArgs() *CategoryBrandServiceBatchAddCategoryBrandArgs {
	return &CategoryBrandServiceBatchAddCategoryBrandArgs{}
}

func (p *CategoryBrandServiceBatchAddCategoryBrandArgs) InitDefault() {
	*p = CategoryBrandServiceBatchAddCategoryBrandArgs{}
}

var CategoryBrandServiceBatchAddCategoryBrandArgs_Req_DEFAULT *NewCategoryBrand_

func (p *CategoryBrandServiceBatchAddCategoryBrandArgs) GetReq() (v *NewCategoryBrand_) {
	if !p.IsSetReq() {
		return CategoryBrandServiceBatchAddCategoryBrandArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CategoryBrandServiceBatchAddCategoryBrandArgs) SetReq(val *NewCategoryBrand_) {
	p.Req = val
}

var fieldIDToName_CategoryBrandServiceBatchAddCategoryBrandArgs = map[int16]string{
	1: "req",
}

func (p *CategoryBrandServiceBatchAddCategoryBrandArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CategoryBrandServiceBatchAddCategoryBrandArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryBrandServiceBatchAddCategoryBrandArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryBrandServiceBatchAddCategoryBrandArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewNewCategoryBrand_()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryBrandServiceBatchAddCategoryBrandArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchAddCategoryBrand_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryBrandServiceBatchAddCategoryBrandArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CategoryBrandServiceBatchAddCategoryBrandArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryBrandServiceBatchAddCategoryBrandArgs(%+v)", *p)
}

func (p *CategoryBrandServiceBatchAddCategoryBrandArgs) DeepEqual(ano *CategoryBrandServiceBatchAddCategoryBrandArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CategoryBrandServiceBatchAddCategoryBrandArgs) Field1DeepEqual(src *NewCategoryBrand_) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryBrandServiceBatchAddCategoryBrandResult struct {
	Success []*CategoryBrandInfo `thrift:"success,0,optional" frugal:"0,optional,list<CategoryBrandInfo>" json:"success,omitempty"`
}

func NewCategoryBrandServiceBatchAddCategoryBrandResult() *CategoryBrandServiceBatchAddCategoryBrandResult {
	return &CategoryBrandServiceBatchAddCategoryBrandResult{}
}

func (p *CategoryBrandServiceBatchAddCategoryBrandResult) InitDefault() {
	*p = CategoryBrandServiceBatchAddCategoryBrandResult{}
}

var CategoryBrandServiceBatchAddCategoryBrandResult_Success_DEFAULT []*CategoryBrandInfo

func (p *CategoryBrandServiceBatchAddCategoryBrandResult) GetSuccess() (v []*CategoryBrandInfo) {
	if !p.IsSetSuccess() {
		return CategoryBrandServiceBatchAddCategoryBrandResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CategoryBrandServiceBatchAddCategoryBrandResult) SetSuccess(x interface{}) {
	p.Success = x.([]*CategoryBrandInfo)
}

var fieldIDToName_CategoryBrandServiceBatchAddCategoryBrandResult = map[int16]string{
	0: "success",
}

func (p *CategoryBrandServiceBatchAddCategoryBrandResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CategoryBrandServiceBatchAddCategoryBrandResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryBrandServiceBatchAddCategoryBrandResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryBrandServiceBatchAddCategoryBrandResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Success = make([]*CategoryBrandInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewCategoryBrandInfo()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Success = append(p.Success, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CategoryBrandServiceBatchAddCategoryBrandResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchAddCategoryBrand_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryBrandServiceBatchAddCategoryBrandResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return err
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CategoryBrandServiceBatchAddCategoryBrandResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryBrandServiceBatchAddCategoryBrandResult(%+v)", *p)
}

func (p *CategoryBrandServiceBatchAddCategoryBrandResult) DeepEqual(ano *CategoryBrandServiceBatchAddCategoryBrandResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CategoryBrandServiceBatchAddCategoryBrandResult) Field0DeepEqual(src []*CategoryBrandInfo) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for i, v := range p.Success {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CategoryBrandServiceUpdateCategoryBrandArgs struct {
	Req *NewCategoryBrand_ `thrift:"req,1" frugal:"1,default,NewCategoryBrand_" json:"req"`
}

func NewCategoryBrandServiceUpdateCategoryBrandArgs() *CategoryBrandServiceUpdateCategoryBrandArgs {
	return &CategoryBrandServiceUpdateCategoryBrandArgs{}
}

func (p *CategoryBrandServiceUpdateCategoryBrandArgs) InitDefault() {
	*p = CategoryBrandServiceUpdateCategoryBrandArgs{}
}

var CategoryBrandServiceUpdateCategoryBrandArgs_Req_DEFAULT *NewCategoryBrand_

func (p *CategoryBrandServiceUpdateCategoryBrandArgs) GetReq() (v *NewCategoryBrand_) {
	if !p.IsSetReq() {
		return CategoryBrandServiceUpdateCategoryBrandArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CategoryBrandServiceUpdateCategoryBrandArgs) SetReq(val *NewCategoryBrand_) {
	p.Req = val
}

var fieldIDToName_CategoryBrandServiceUpdateCategoryBrandArgs = map[int16]string{
	1: "req",
}

func (p *CategoryBrandServiceUpdateCategoryBrandArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CategoryBrandServiceUpdateCategoryBrandArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryBrandServiceUpdateCategoryBrandArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryBrandServiceUpdateCategoryBrandArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewNewCategoryBrand_()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryBrandServiceUpdateCategoryBrandArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCategoryBrand_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryBrandServiceUpdateCategoryBrandArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CategoryBrandServiceUpdateCategoryBrandArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryBrandServiceUpdateCategoryBrandArgs(%+v)", *p)
}

func (p *CategoryBrandServiceUpdateCategoryBrandArgs) DeepEqual(ano *CategoryBrandServiceUpdateCategoryBrandArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CategoryBrandServiceUpdateCategoryBrandArgs) Field1DeepEqual(src *NewCategoryBrand_) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryBrandServiceUpdateCategoryBrandResult struct {
	Success *common.Empty `thrift:"success,0,optional" frugal:"0,optional,common.Empty" json:"success,omitempty"`
}

func NewCategoryBrandServiceUpdateCategoryBrandResult() *CategoryBrandServiceUpdateCategoryBrandResult {
	return &CategoryBrandServiceUpdateCategoryBrandResult{}
}

func (p *CategoryBrandServiceUpdateCategoryBrandResult) InitDefault() {
	*p = CategoryBrandServiceUpdateCategoryBrandResult{}
}

var CategoryBrandServiceUpdateCategoryBrandResult_Success_DEFAULT *common.Empty

func (p *CategoryBrandServiceUpdateCategoryBrandResult) GetSuccess() (v *common.Empty) {
	if !p.IsSetSuccess() {
		return CategoryBrandServiceUpdateCategoryBrandResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CategoryBrandServiceUpdateCategoryBrandResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.Empty)
}

var fieldIDToName_CategoryBrandServiceUpdateCategoryBrandResult = map[int16]string{
	0: "success",
}

func (p *CategoryBrandServiceUpdateCategoryBrandResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CategoryBrandServiceUpdateCategoryBrandResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryBrandServiceUpdateCategoryBrandResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryBrandServiceUpdateCategoryBrandResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmpty()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryBrandServiceUpdateCategoryBrandResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCategoryBrand_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryBrandServiceUpdateCategoryBrandResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CategoryBrandServiceUpdateCategoryBrandResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryBrandServiceUpdateCategoryBrandResult(%+v)", *p)
}

func (p *CategoryBrandServiceUpdateCategoryBrandResult) DeepEqual(ano *CategoryBrandServiceUpdateCategoryBrandResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CategoryBrandServiceUpdateCategoryBrandResult) Field0DeepEqual(src *common.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryBrandServiceBatchReduceCategoryBrandArgs struct {
	Req *NewCategoryBrand_ `thrift:"req,1" frugal:"1,default,NewCategoryBrand_" json:"req"`
}

func NewCategoryBrandServiceBatchReduceCategoryBrandArgs() *CategoryBrandServiceBatchReduceCategoryBrandArgs {
	return &CategoryBrandServiceBatchReduceCategoryBrandArgs{}
}

func (p *CategoryBrandServiceBatchReduceCategoryBrandArgs) InitDefault() {
	*p = CategoryBrandServiceBatchReduceCategoryBrandArgs{}
}

var CategoryBrandServiceBatchReduceCategoryBrandArgs_Req_DEFAULT *NewCategoryBrand_

func (p *CategoryBrandServiceBatchReduceCategoryBrandArgs) GetReq() (v *NewCategoryBrand_) {
	if !p.IsSetReq() {
		return CategoryBrandServiceBatchReduceCategoryBrandArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CategoryBrandServiceBatchReduceCategoryBrandArgs) SetReq(val *NewCategoryBrand_) {
	p.Req = val
}

var fieldIDToName_CategoryBrandServiceBatchReduceCategoryBrandArgs = map[int16]string{
	1: "req",
}

func (p *CategoryBrandServiceBatchReduceCategoryBrandArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CategoryBrandServiceBatchReduceCategoryBrandArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryBrandServiceBatchReduceCategoryBrandArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryBrandServiceBatchReduceCategoryBrandArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewNewCategoryBrand_()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryBrandServiceBatchReduceCategoryBrandArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchReduceCategoryBrand_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryBrandServiceBatchReduceCategoryBrandArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CategoryBrandServiceBatchReduceCategoryBrandArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryBrandServiceBatchReduceCategoryBrandArgs(%+v)", *p)
}

func (p *CategoryBrandServiceBatchReduceCategoryBrandArgs) DeepEqual(ano *CategoryBrandServiceBatchReduceCategoryBrandArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CategoryBrandServiceBatchReduceCategoryBrandArgs) Field1DeepEqual(src *NewCategoryBrand_) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryBrandServiceBatchReduceCategoryBrandResult struct {
	Success *common.Empty `thrift:"success,0,optional" frugal:"0,optional,common.Empty" json:"success,omitempty"`
}

func NewCategoryBrandServiceBatchReduceCategoryBrandResult() *CategoryBrandServiceBatchReduceCategoryBrandResult {
	return &CategoryBrandServiceBatchReduceCategoryBrandResult{}
}

func (p *CategoryBrandServiceBatchReduceCategoryBrandResult) InitDefault() {
	*p = CategoryBrandServiceBatchReduceCategoryBrandResult{}
}

var CategoryBrandServiceBatchReduceCategoryBrandResult_Success_DEFAULT *common.Empty

func (p *CategoryBrandServiceBatchReduceCategoryBrandResult) GetSuccess() (v *common.Empty) {
	if !p.IsSetSuccess() {
		return CategoryBrandServiceBatchReduceCategoryBrandResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CategoryBrandServiceBatchReduceCategoryBrandResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.Empty)
}

var fieldIDToName_CategoryBrandServiceBatchReduceCategoryBrandResult = map[int16]string{
	0: "success",
}

func (p *CategoryBrandServiceBatchReduceCategoryBrandResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CategoryBrandServiceBatchReduceCategoryBrandResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryBrandServiceBatchReduceCategoryBrandResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryBrandServiceBatchReduceCategoryBrandResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmpty()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryBrandServiceBatchReduceCategoryBrandResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchReduceCategoryBrand_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryBrandServiceBatchReduceCategoryBrandResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CategoryBrandServiceBatchReduceCategoryBrandResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryBrandServiceBatchReduceCategoryBrandResult(%+v)", *p)
}

func (p *CategoryBrandServiceBatchReduceCategoryBrandResult) DeepEqual(ano *CategoryBrandServiceBatchReduceCategoryBrandResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CategoryBrandServiceBatchReduceCategoryBrandResult) Field0DeepEqual(src *common.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryBrandServiceDeleteBrandByCategoryArgs struct {
	Req *common.Req `thrift:"req,1" frugal:"1,default,common.Req" json:"req"`
}

func NewCategoryBrandServiceDeleteBrandByCategoryArgs() *CategoryBrandServiceDeleteBrandByCategoryArgs {
	return &CategoryBrandServiceDeleteBrandByCategoryArgs{}
}

func (p *CategoryBrandServiceDeleteBrandByCategoryArgs) InitDefault() {
	*p = CategoryBrandServiceDeleteBrandByCategoryArgs{}
}

var CategoryBrandServiceDeleteBrandByCategoryArgs_Req_DEFAULT *common.Req

func (p *CategoryBrandServiceDeleteBrandByCategoryArgs) GetReq() (v *common.Req) {
	if !p.IsSetReq() {
		return CategoryBrandServiceDeleteBrandByCategoryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CategoryBrandServiceDeleteBrandByCategoryArgs) SetReq(val *common.Req) {
	p.Req = val
}

var fieldIDToName_CategoryBrandServiceDeleteBrandByCategoryArgs = map[int16]string{
	1: "req",
}

func (p *CategoryBrandServiceDeleteBrandByCategoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CategoryBrandServiceDeleteBrandByCategoryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryBrandServiceDeleteBrandByCategoryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryBrandServiceDeleteBrandByCategoryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common.NewReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryBrandServiceDeleteBrandByCategoryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteBrandByCategory_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryBrandServiceDeleteBrandByCategoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CategoryBrandServiceDeleteBrandByCategoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryBrandServiceDeleteBrandByCategoryArgs(%+v)", *p)
}

func (p *CategoryBrandServiceDeleteBrandByCategoryArgs) DeepEqual(ano *CategoryBrandServiceDeleteBrandByCategoryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CategoryBrandServiceDeleteBrandByCategoryArgs) Field1DeepEqual(src *common.Req) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryBrandServiceDeleteBrandByCategoryResult struct {
	Success *common.Empty `thrift:"success,0,optional" frugal:"0,optional,common.Empty" json:"success,omitempty"`
}

func NewCategoryBrandServiceDeleteBrandByCategoryResult() *CategoryBrandServiceDeleteBrandByCategoryResult {
	return &CategoryBrandServiceDeleteBrandByCategoryResult{}
}

func (p *CategoryBrandServiceDeleteBrandByCategoryResult) InitDefault() {
	*p = CategoryBrandServiceDeleteBrandByCategoryResult{}
}

var CategoryBrandServiceDeleteBrandByCategoryResult_Success_DEFAULT *common.Empty

func (p *CategoryBrandServiceDeleteBrandByCategoryResult) GetSuccess() (v *common.Empty) {
	if !p.IsSetSuccess() {
		return CategoryBrandServiceDeleteBrandByCategoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CategoryBrandServiceDeleteBrandByCategoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.Empty)
}

var fieldIDToName_CategoryBrandServiceDeleteBrandByCategoryResult = map[int16]string{
	0: "success",
}

func (p *CategoryBrandServiceDeleteBrandByCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CategoryBrandServiceDeleteBrandByCategoryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryBrandServiceDeleteBrandByCategoryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryBrandServiceDeleteBrandByCategoryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmpty()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryBrandServiceDeleteBrandByCategoryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteBrandByCategory_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryBrandServiceDeleteBrandByCategoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CategoryBrandServiceDeleteBrandByCategoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryBrandServiceDeleteBrandByCategoryResult(%+v)", *p)
}

func (p *CategoryBrandServiceDeleteBrandByCategoryResult) DeepEqual(ano *CategoryBrandServiceDeleteBrandByCategoryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CategoryBrandServiceDeleteBrandByCategoryResult) Field0DeepEqual(src *common.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryBrandServiceDeleteCategoryByBrandArgs struct {
	Req *common.Req `thrift:"req,1" frugal:"1,default,common.Req" json:"req"`
}

func NewCategoryBrandServiceDeleteCategoryByBrandArgs() *CategoryBrandServiceDeleteCategoryByBrandArgs {
	return &CategoryBrandServiceDeleteCategoryByBrandArgs{}
}

func (p *CategoryBrandServiceDeleteCategoryByBrandArgs) InitDefault() {
	*p = CategoryBrandServiceDeleteCategoryByBrandArgs{}
}

var CategoryBrandServiceDeleteCategoryByBrandArgs_Req_DEFAULT *common.Req

func (p *CategoryBrandServiceDeleteCategoryByBrandArgs) GetReq() (v *common.Req) {
	if !p.IsSetReq() {
		return CategoryBrandServiceDeleteCategoryByBrandArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CategoryBrandServiceDeleteCategoryByBrandArgs) SetReq(val *common.Req) {
	p.Req = val
}

var fieldIDToName_CategoryBrandServiceDeleteCategoryByBrandArgs = map[int16]string{
	1: "req",
}

func (p *CategoryBrandServiceDeleteCategoryByBrandArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CategoryBrandServiceDeleteCategoryByBrandArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryBrandServiceDeleteCategoryByBrandArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryBrandServiceDeleteCategoryByBrandArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common.NewReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryBrandServiceDeleteCategoryByBrandArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCategoryByBrand_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryBrandServiceDeleteCategoryByBrandArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CategoryBrandServiceDeleteCategoryByBrandArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryBrandServiceDeleteCategoryByBrandArgs(%+v)", *p)
}

func (p *CategoryBrandServiceDeleteCategoryByBrandArgs) DeepEqual(ano *CategoryBrandServiceDeleteCategoryByBrandArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CategoryBrandServiceDeleteCategoryByBrandArgs) Field1DeepEqual(src *common.Req) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CategoryBrandServiceDeleteCategoryByBrandResult struct {
	Success *common.Empty `thrift:"success,0,optional" frugal:"0,optional,common.Empty" json:"success,omitempty"`
}

func NewCategoryBrandServiceDeleteCategoryByBrandResult() *CategoryBrandServiceDeleteCategoryByBrandResult {
	return &CategoryBrandServiceDeleteCategoryByBrandResult{}
}

func (p *CategoryBrandServiceDeleteCategoryByBrandResult) InitDefault() {
	*p = CategoryBrandServiceDeleteCategoryByBrandResult{}
}

var CategoryBrandServiceDeleteCategoryByBrandResult_Success_DEFAULT *common.Empty

func (p *CategoryBrandServiceDeleteCategoryByBrandResult) GetSuccess() (v *common.Empty) {
	if !p.IsSetSuccess() {
		return CategoryBrandServiceDeleteCategoryByBrandResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CategoryBrandServiceDeleteCategoryByBrandResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.Empty)
}

var fieldIDToName_CategoryBrandServiceDeleteCategoryByBrandResult = map[int16]string{
	0: "success",
}

func (p *CategoryBrandServiceDeleteCategoryByBrandResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CategoryBrandServiceDeleteCategoryByBrandResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryBrandServiceDeleteCategoryByBrandResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryBrandServiceDeleteCategoryByBrandResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmpty()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryBrandServiceDeleteCategoryByBrandResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCategoryByBrand_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryBrandServiceDeleteCategoryByBrandResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CategoryBrandServiceDeleteCategoryByBrandResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryBrandServiceDeleteCategoryByBrandResult(%+v)", *p)
}

func (p *CategoryBrandServiceDeleteCategoryByBrandResult) DeepEqual(ano *CategoryBrandServiceDeleteCategoryByBrandResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CategoryBrandServiceDeleteCategoryByBrandResult) Field0DeepEqual(src *common.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
