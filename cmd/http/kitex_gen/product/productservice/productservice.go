// Code generated by Kitex v0.6.1. DO NOT EDIT.

package productservice

import (
	"context"
	common "git.zqbjj.top/pet/services/cmd/http/kitex_gen/common"
	product "git.zqbjj.top/pet/services/cmd/http/kitex_gen/product"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return productServiceServiceInfo
}

var productServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ProductService"
	handlerType := (*product.ProductService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetProductList":         kitex.NewMethodInfo(getProductListHandler, newProductServiceGetProductListArgs, newProductServiceGetProductListResult, false),
		"GetProductDetail":       kitex.NewMethodInfo(getProductDetailHandler, newProductServiceGetProductDetailArgs, newProductServiceGetProductDetailResult, false),
		"AddNewProduct":          kitex.NewMethodInfo(addNewProductHandler, newProductServiceAddNewProductArgs, newProductServiceAddNewProductResult, false),
		"UpdateProductBasicInfo": kitex.NewMethodInfo(updateProductBasicInfoHandler, newProductServiceUpdateProductBasicInfoArgs, newProductServiceUpdateProductBasicInfoResult, false),
		"UpdateProdShowcase":     kitex.NewMethodInfo(updateProdShowcaseHandler, newProductServiceUpdateProdShowcaseArgs, newProductServiceUpdateProdShowcaseResult, false),
		"UpdateRating":           kitex.NewMethodInfo(updateRatingHandler, newProductServiceUpdateRatingArgs, newProductServiceUpdateRatingResult, false),
		"DeleteProduct":          kitex.NewMethodInfo(deleteProductHandler, newProductServiceDeleteProductArgs, newProductServiceDeleteProductResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "product",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func getProductListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceGetProductListArgs)
	realResult := result.(*product.ProductServiceGetProductListResult)
	success, err := handler.(product.ProductService).GetProductList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceGetProductListArgs() interface{} {
	return product.NewProductServiceGetProductListArgs()
}

func newProductServiceGetProductListResult() interface{} {
	return product.NewProductServiceGetProductListResult()
}

func getProductDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceGetProductDetailArgs)
	realResult := result.(*product.ProductServiceGetProductDetailResult)
	success, err := handler.(product.ProductService).GetProductDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceGetProductDetailArgs() interface{} {
	return product.NewProductServiceGetProductDetailArgs()
}

func newProductServiceGetProductDetailResult() interface{} {
	return product.NewProductServiceGetProductDetailResult()
}

func addNewProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceAddNewProductArgs)
	realResult := result.(*product.ProductServiceAddNewProductResult)
	success, err := handler.(product.ProductService).AddNewProduct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceAddNewProductArgs() interface{} {
	return product.NewProductServiceAddNewProductArgs()
}

func newProductServiceAddNewProductResult() interface{} {
	return product.NewProductServiceAddNewProductResult()
}

func updateProductBasicInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceUpdateProductBasicInfoArgs)
	realResult := result.(*product.ProductServiceUpdateProductBasicInfoResult)
	success, err := handler.(product.ProductService).UpdateProductBasicInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceUpdateProductBasicInfoArgs() interface{} {
	return product.NewProductServiceUpdateProductBasicInfoArgs()
}

func newProductServiceUpdateProductBasicInfoResult() interface{} {
	return product.NewProductServiceUpdateProductBasicInfoResult()
}

func updateProdShowcaseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceUpdateProdShowcaseArgs)
	realResult := result.(*product.ProductServiceUpdateProdShowcaseResult)
	success, err := handler.(product.ProductService).UpdateProdShowcase(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceUpdateProdShowcaseArgs() interface{} {
	return product.NewProductServiceUpdateProdShowcaseArgs()
}

func newProductServiceUpdateProdShowcaseResult() interface{} {
	return product.NewProductServiceUpdateProdShowcaseResult()
}

func updateRatingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceUpdateRatingArgs)
	realResult := result.(*product.ProductServiceUpdateRatingResult)
	success, err := handler.(product.ProductService).UpdateRating(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceUpdateRatingArgs() interface{} {
	return product.NewProductServiceUpdateRatingArgs()
}

func newProductServiceUpdateRatingResult() interface{} {
	return product.NewProductServiceUpdateRatingResult()
}

func deleteProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceDeleteProductArgs)
	realResult := result.(*product.ProductServiceDeleteProductResult)
	success, err := handler.(product.ProductService).DeleteProduct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceDeleteProductArgs() interface{} {
	return product.NewProductServiceDeleteProductArgs()
}

func newProductServiceDeleteProductResult() interface{} {
	return product.NewProductServiceDeleteProductResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetProductList(ctx context.Context, req *product.ProductFilter) (r []*product.BasicProdInfo, err error) {
	var _args product.ProductServiceGetProductListArgs
	_args.Req = req
	var _result product.ProductServiceGetProductListResult
	if err = p.c.Call(ctx, "GetProductList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetProductDetail(ctx context.Context, req *common.Req) (r *product.ProductInfo, err error) {
	var _args product.ProductServiceGetProductDetailArgs
	_args.Req = req
	var _result product.ProductServiceGetProductDetailResult
	if err = p.c.Call(ctx, "GetProductDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddNewProduct(ctx context.Context, req *product.NewProduct_) (r *product.ProductInfo, err error) {
	var _args product.ProductServiceAddNewProductArgs
	_args.Req = req
	var _result product.ProductServiceAddNewProductResult
	if err = p.c.Call(ctx, "AddNewProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateProductBasicInfo(ctx context.Context, req *product.BasicProdInfo) (r *product.BasicProdInfo, err error) {
	var _args product.ProductServiceUpdateProductBasicInfoArgs
	_args.Req = req
	var _result product.ProductServiceUpdateProductBasicInfoResult
	if err = p.c.Call(ctx, "UpdateProductBasicInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateProdShowcase(ctx context.Context, req *product.ProductShowcase) (r *product.ProductShowcase, err error) {
	var _args product.ProductServiceUpdateProdShowcaseArgs
	_args.Req = req
	var _result product.ProductServiceUpdateProdShowcaseResult
	if err = p.c.Call(ctx, "UpdateProdShowcase", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateRating(ctx context.Context, req *product.RatingReq) (r *product.RatingResp, err error) {
	var _args product.ProductServiceUpdateRatingArgs
	_args.Req = req
	var _result product.ProductServiceUpdateRatingResult
	if err = p.c.Call(ctx, "UpdateRating", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteProduct(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args product.ProductServiceDeleteProductArgs
	_args.Req = req
	var _result product.ProductServiceDeleteProductResult
	if err = p.c.Call(ctx, "DeleteProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
