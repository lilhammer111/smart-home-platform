// Code generated by Kitex v0.8.0. DO NOT EDIT.

package brandservice

import (
	"context"
	common "git.zqbjj.top/pet/services/cmd/http/kitex_gen/common"
	product "git.zqbjj.top/pet/services/cmd/http/kitex_gen/product"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return brandServiceServiceInfo
}

var brandServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "BrandService"
	handlerType := (*product.BrandService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetBrandList":                 kitex.NewMethodInfo(getBrandListHandler, newBrandServiceGetBrandListArgs, newBrandServiceGetBrandListResult, false),
		"GetRelatedBrandsByCategoryId": kitex.NewMethodInfo(getRelatedBrandsByCategoryIdHandler, newBrandServiceGetRelatedBrandsByCategoryIdArgs, newBrandServiceGetRelatedBrandsByCategoryIdResult, false),
		"GetBrandDetail":               kitex.NewMethodInfo(getBrandDetailHandler, newBrandServiceGetBrandDetailArgs, newBrandServiceGetBrandDetailResult, false),
		"AddNewBrand":                  kitex.NewMethodInfo(addNewBrandHandler, newBrandServiceAddNewBrandArgs, newBrandServiceAddNewBrandResult, false),
		"UpdateBrand":                  kitex.NewMethodInfo(updateBrandHandler, newBrandServiceUpdateBrandArgs, newBrandServiceUpdateBrandResult, false),
		"DeleteBrand":                  kitex.NewMethodInfo(deleteBrandHandler, newBrandServiceDeleteBrandArgs, newBrandServiceDeleteBrandResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "product",
		"ServiceFilePath": `../../static/idl/rpc/product.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func getBrandListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.BrandServiceGetBrandListArgs)
	realResult := result.(*product.BrandServiceGetBrandListResult)
	success, err := handler.(product.BrandService).GetBrandList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBrandServiceGetBrandListArgs() interface{} {
	return product.NewBrandServiceGetBrandListArgs()
}

func newBrandServiceGetBrandListResult() interface{} {
	return product.NewBrandServiceGetBrandListResult()
}

func getRelatedBrandsByCategoryIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.BrandServiceGetRelatedBrandsByCategoryIdArgs)
	realResult := result.(*product.BrandServiceGetRelatedBrandsByCategoryIdResult)
	success, err := handler.(product.BrandService).GetRelatedBrandsByCategoryId(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBrandServiceGetRelatedBrandsByCategoryIdArgs() interface{} {
	return product.NewBrandServiceGetRelatedBrandsByCategoryIdArgs()
}

func newBrandServiceGetRelatedBrandsByCategoryIdResult() interface{} {
	return product.NewBrandServiceGetRelatedBrandsByCategoryIdResult()
}

func getBrandDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.BrandServiceGetBrandDetailArgs)
	realResult := result.(*product.BrandServiceGetBrandDetailResult)
	success, err := handler.(product.BrandService).GetBrandDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBrandServiceGetBrandDetailArgs() interface{} {
	return product.NewBrandServiceGetBrandDetailArgs()
}

func newBrandServiceGetBrandDetailResult() interface{} {
	return product.NewBrandServiceGetBrandDetailResult()
}

func addNewBrandHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.BrandServiceAddNewBrandArgs)
	realResult := result.(*product.BrandServiceAddNewBrandResult)
	success, err := handler.(product.BrandService).AddNewBrand(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBrandServiceAddNewBrandArgs() interface{} {
	return product.NewBrandServiceAddNewBrandArgs()
}

func newBrandServiceAddNewBrandResult() interface{} {
	return product.NewBrandServiceAddNewBrandResult()
}

func updateBrandHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.BrandServiceUpdateBrandArgs)
	realResult := result.(*product.BrandServiceUpdateBrandResult)
	success, err := handler.(product.BrandService).UpdateBrand(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBrandServiceUpdateBrandArgs() interface{} {
	return product.NewBrandServiceUpdateBrandArgs()
}

func newBrandServiceUpdateBrandResult() interface{} {
	return product.NewBrandServiceUpdateBrandResult()
}

func deleteBrandHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.BrandServiceDeleteBrandArgs)
	realResult := result.(*product.BrandServiceDeleteBrandResult)
	success, err := handler.(product.BrandService).DeleteBrand(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBrandServiceDeleteBrandArgs() interface{} {
	return product.NewBrandServiceDeleteBrandArgs()
}

func newBrandServiceDeleteBrandResult() interface{} {
	return product.NewBrandServiceDeleteBrandResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetBrandList(ctx context.Context, req *common.PageFilter) (r []*product.BrandInfo, err error) {
	var _args product.BrandServiceGetBrandListArgs
	_args.Req = req
	var _result product.BrandServiceGetBrandListResult
	if err = p.c.Call(ctx, "GetBrandList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRelatedBrandsByCategoryId(ctx context.Context, req *product.BrandByCatReq) (r []*product.BrandInfo, err error) {
	var _args product.BrandServiceGetRelatedBrandsByCategoryIdArgs
	_args.Req = req
	var _result product.BrandServiceGetRelatedBrandsByCategoryIdResult
	if err = p.c.Call(ctx, "GetRelatedBrandsByCategoryId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBrandDetail(ctx context.Context, req *common.Req) (r *product.BrandInfo, err error) {
	var _args product.BrandServiceGetBrandDetailArgs
	_args.Req = req
	var _result product.BrandServiceGetBrandDetailResult
	if err = p.c.Call(ctx, "GetBrandDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddNewBrand(ctx context.Context, req *product.NewBrand_) (r *product.BrandInfo, err error) {
	var _args product.BrandServiceAddNewBrandArgs
	_args.Req = req
	var _result product.BrandServiceAddNewBrandResult
	if err = p.c.Call(ctx, "AddNewBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateBrand(ctx context.Context, req *product.BrandInfo) (r *product.BrandInfo, err error) {
	var _args product.BrandServiceUpdateBrandArgs
	_args.Req = req
	var _result product.BrandServiceUpdateBrandResult
	if err = p.c.Call(ctx, "UpdateBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteBrand(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args product.BrandServiceDeleteBrandArgs
	_args.Req = req
	var _result product.BrandServiceDeleteBrandResult
	if err = p.c.Call(ctx, "DeleteBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
