// Code generated by Kitex v0.8.0. DO NOT EDIT.

package combineservice

import (
	"context"
	common "git.zqbjj.top/pet/services/cmd/http/kitex_gen/common"
	product "git.zqbjj.top/pet/services/cmd/http/kitex_gen/product"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

type CombineService interface {
	product.ProductService
	product.CategoryService
	product.ModelService
	product.BrandService
	product.BannerService
	product.CategoryBrandService
}

func serviceInfo() *kitex.ServiceInfo {
	return combineServiceServiceInfo
}

var combineServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CombineService"
	handlerType := (*CombineService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetProductList":               kitex.NewMethodInfo(getProductListHandler, newProductServiceGetProductListArgs, newProductServiceGetProductListResult, false),
		"GetProductDetail":             kitex.NewMethodInfo(getProductDetailHandler, newProductServiceGetProductDetailArgs, newProductServiceGetProductDetailResult, false),
		"AddNewProduct":                kitex.NewMethodInfo(addNewProductHandler, newProductServiceAddNewProductArgs, newProductServiceAddNewProductResult, false),
		"UpdateProduct":                kitex.NewMethodInfo(updateProductHandler, newProductServiceUpdateProductArgs, newProductServiceUpdateProductResult, false),
		"UpdateRating":                 kitex.NewMethodInfo(updateRatingHandler, newProductServiceUpdateRatingArgs, newProductServiceUpdateRatingResult, false),
		"DeleteProduct":                kitex.NewMethodInfo(deleteProductHandler, newProductServiceDeleteProductArgs, newProductServiceDeleteProductResult, false),
		"GetCategoryList":              kitex.NewMethodInfo(getCategoryListHandler, newCategoryServiceGetCategoryListArgs, newCategoryServiceGetCategoryListResult, false),
		"GetCategoryDetail":            kitex.NewMethodInfo(getCategoryDetailHandler, newCategoryServiceGetCategoryDetailArgs, newCategoryServiceGetCategoryDetailResult, false),
		"AddNewCategory":               kitex.NewMethodInfo(addNewCategoryHandler, newCategoryServiceAddNewCategoryArgs, newCategoryServiceAddNewCategoryResult, false),
		"UpdateCategory":               kitex.NewMethodInfo(updateCategoryHandler, newCategoryServiceUpdateCategoryArgs, newCategoryServiceUpdateCategoryResult, false),
		"DeleteCategory":               kitex.NewMethodInfo(deleteCategoryHandler, newCategoryServiceDeleteCategoryArgs, newCategoryServiceDeleteCategoryResult, false),
		"GetAllModels":                 kitex.NewMethodInfo(getAllModelsHandler, newModelServiceGetAllModelsArgs, newModelServiceGetAllModelsResult, false),
		"GetModelDetail":               kitex.NewMethodInfo(getModelDetailHandler, newModelServiceGetModelDetailArgs, newModelServiceGetModelDetailResult, false),
		"AddNewModel":                  kitex.NewMethodInfo(addNewModelHandler, newModelServiceAddNewModelArgs, newModelServiceAddNewModelResult, false),
		"DeleteModel":                  kitex.NewMethodInfo(deleteModelHandler, newModelServiceDeleteModelArgs, newModelServiceDeleteModelResult, false),
		"GetBrandList":                 kitex.NewMethodInfo(getBrandListHandler, newBrandServiceGetBrandListArgs, newBrandServiceGetBrandListResult, false),
		"GetRelatedBrandsByCategoryId": kitex.NewMethodInfo(getRelatedBrandsByCategoryIdHandler, newBrandServiceGetRelatedBrandsByCategoryIdArgs, newBrandServiceGetRelatedBrandsByCategoryIdResult, false),
		"GetBrandDetail":               kitex.NewMethodInfo(getBrandDetailHandler, newBrandServiceGetBrandDetailArgs, newBrandServiceGetBrandDetailResult, false),
		"AddNewBrand":                  kitex.NewMethodInfo(addNewBrandHandler, newBrandServiceAddNewBrandArgs, newBrandServiceAddNewBrandResult, false),
		"UpdateBrand":                  kitex.NewMethodInfo(updateBrandHandler, newBrandServiceUpdateBrandArgs, newBrandServiceUpdateBrandResult, false),
		"DeleteBrand":                  kitex.NewMethodInfo(deleteBrandHandler, newBrandServiceDeleteBrandArgs, newBrandServiceDeleteBrandResult, false),
		"GetAllBanners":                kitex.NewMethodInfo(getAllBannersHandler, newBannerServiceGetAllBannersArgs, newBannerServiceGetAllBannersResult, false),
		"AddNewBanner":                 kitex.NewMethodInfo(addNewBannerHandler, newBannerServiceAddNewBannerArgs, newBannerServiceAddNewBannerResult, false),
		"UpdateBanner":                 kitex.NewMethodInfo(updateBannerHandler, newBannerServiceUpdateBannerArgs, newBannerServiceUpdateBannerResult, false),
		"DeleteBanner":                 kitex.NewMethodInfo(deleteBannerHandler, newBannerServiceDeleteBannerArgs, newBannerServiceDeleteBannerResult, false),
		"BatchAddCategoryBrand":        kitex.NewMethodInfo(batchAddCategoryBrandHandler, newCategoryBrandServiceBatchAddCategoryBrandArgs, newCategoryBrandServiceBatchAddCategoryBrandResult, false),
		"BatchReduceCategoryBrand":     kitex.NewMethodInfo(batchReduceCategoryBrandHandler, newCategoryBrandServiceBatchReduceCategoryBrandArgs, newCategoryBrandServiceBatchReduceCategoryBrandResult, false),
		"DeleteBrandByCategory":        kitex.NewMethodInfo(deleteBrandByCategoryHandler, newCategoryBrandServiceDeleteBrandByCategoryArgs, newCategoryBrandServiceDeleteBrandByCategoryResult, false),
		"DeleteCategoryByBrand":        kitex.NewMethodInfo(deleteCategoryByBrandHandler, newCategoryBrandServiceDeleteCategoryByBrandArgs, newCategoryBrandServiceDeleteCategoryByBrandResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "product",
		"ServiceFilePath": `../../static/idl/rpc/product.thrift`,
	}
	extra["combine_service"] = true
	extra["combined_service_list"] = []string{"ProductService", "CategoryService", "ModelService", "BrandService", "BannerService", "CategoryBrandService"}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func getProductListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceGetProductListArgs)
	realResult := result.(*product.ProductServiceGetProductListResult)
	success, err := handler.(product.ProductService).GetProductList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceGetProductListArgs() interface{} {
	return product.NewProductServiceGetProductListArgs()
}

func newProductServiceGetProductListResult() interface{} {
	return product.NewProductServiceGetProductListResult()
}

func getProductDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceGetProductDetailArgs)
	realResult := result.(*product.ProductServiceGetProductDetailResult)
	success, err := handler.(product.ProductService).GetProductDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceGetProductDetailArgs() interface{} {
	return product.NewProductServiceGetProductDetailArgs()
}

func newProductServiceGetProductDetailResult() interface{} {
	return product.NewProductServiceGetProductDetailResult()
}

func addNewProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceAddNewProductArgs)
	realResult := result.(*product.ProductServiceAddNewProductResult)
	success, err := handler.(product.ProductService).AddNewProduct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceAddNewProductArgs() interface{} {
	return product.NewProductServiceAddNewProductArgs()
}

func newProductServiceAddNewProductResult() interface{} {
	return product.NewProductServiceAddNewProductResult()
}

func updateProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceUpdateProductArgs)
	realResult := result.(*product.ProductServiceUpdateProductResult)
	success, err := handler.(product.ProductService).UpdateProduct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceUpdateProductArgs() interface{} {
	return product.NewProductServiceUpdateProductArgs()
}

func newProductServiceUpdateProductResult() interface{} {
	return product.NewProductServiceUpdateProductResult()
}

func updateRatingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceUpdateRatingArgs)
	realResult := result.(*product.ProductServiceUpdateRatingResult)
	success, err := handler.(product.ProductService).UpdateRating(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceUpdateRatingArgs() interface{} {
	return product.NewProductServiceUpdateRatingArgs()
}

func newProductServiceUpdateRatingResult() interface{} {
	return product.NewProductServiceUpdateRatingResult()
}

func deleteProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceDeleteProductArgs)
	realResult := result.(*product.ProductServiceDeleteProductResult)
	success, err := handler.(product.ProductService).DeleteProduct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceDeleteProductArgs() interface{} {
	return product.NewProductServiceDeleteProductArgs()
}

func newProductServiceDeleteProductResult() interface{} {
	return product.NewProductServiceDeleteProductResult()
}

func getCategoryListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.CategoryServiceGetCategoryListArgs)
	realResult := result.(*product.CategoryServiceGetCategoryListResult)
	success, err := handler.(product.CategoryService).GetCategoryList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryServiceGetCategoryListArgs() interface{} {
	return product.NewCategoryServiceGetCategoryListArgs()
}

func newCategoryServiceGetCategoryListResult() interface{} {
	return product.NewCategoryServiceGetCategoryListResult()
}

func getCategoryDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.CategoryServiceGetCategoryDetailArgs)
	realResult := result.(*product.CategoryServiceGetCategoryDetailResult)
	success, err := handler.(product.CategoryService).GetCategoryDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryServiceGetCategoryDetailArgs() interface{} {
	return product.NewCategoryServiceGetCategoryDetailArgs()
}

func newCategoryServiceGetCategoryDetailResult() interface{} {
	return product.NewCategoryServiceGetCategoryDetailResult()
}

func addNewCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.CategoryServiceAddNewCategoryArgs)
	realResult := result.(*product.CategoryServiceAddNewCategoryResult)
	success, err := handler.(product.CategoryService).AddNewCategory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryServiceAddNewCategoryArgs() interface{} {
	return product.NewCategoryServiceAddNewCategoryArgs()
}

func newCategoryServiceAddNewCategoryResult() interface{} {
	return product.NewCategoryServiceAddNewCategoryResult()
}

func updateCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.CategoryServiceUpdateCategoryArgs)
	realResult := result.(*product.CategoryServiceUpdateCategoryResult)
	success, err := handler.(product.CategoryService).UpdateCategory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryServiceUpdateCategoryArgs() interface{} {
	return product.NewCategoryServiceUpdateCategoryArgs()
}

func newCategoryServiceUpdateCategoryResult() interface{} {
	return product.NewCategoryServiceUpdateCategoryResult()
}

func deleteCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.CategoryServiceDeleteCategoryArgs)
	realResult := result.(*product.CategoryServiceDeleteCategoryResult)
	success, err := handler.(product.CategoryService).DeleteCategory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryServiceDeleteCategoryArgs() interface{} {
	return product.NewCategoryServiceDeleteCategoryArgs()
}

func newCategoryServiceDeleteCategoryResult() interface{} {
	return product.NewCategoryServiceDeleteCategoryResult()
}

func getAllModelsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*product.ModelServiceGetAllModelsResult)
	success, err := handler.(product.ModelService).GetAllModels(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newModelServiceGetAllModelsArgs() interface{} {
	return product.NewModelServiceGetAllModelsArgs()
}

func newModelServiceGetAllModelsResult() interface{} {
	return product.NewModelServiceGetAllModelsResult()
}

func getModelDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ModelServiceGetModelDetailArgs)
	realResult := result.(*product.ModelServiceGetModelDetailResult)
	success, err := handler.(product.ModelService).GetModelDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newModelServiceGetModelDetailArgs() interface{} {
	return product.NewModelServiceGetModelDetailArgs()
}

func newModelServiceGetModelDetailResult() interface{} {
	return product.NewModelServiceGetModelDetailResult()
}

func addNewModelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ModelServiceAddNewModelArgs)
	realResult := result.(*product.ModelServiceAddNewModelResult)
	success, err := handler.(product.ModelService).AddNewModel(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newModelServiceAddNewModelArgs() interface{} {
	return product.NewModelServiceAddNewModelArgs()
}

func newModelServiceAddNewModelResult() interface{} {
	return product.NewModelServiceAddNewModelResult()
}

func deleteModelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ModelServiceDeleteModelArgs)
	realResult := result.(*product.ModelServiceDeleteModelResult)
	success, err := handler.(product.ModelService).DeleteModel(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newModelServiceDeleteModelArgs() interface{} {
	return product.NewModelServiceDeleteModelArgs()
}

func newModelServiceDeleteModelResult() interface{} {
	return product.NewModelServiceDeleteModelResult()
}

func getBrandListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.BrandServiceGetBrandListArgs)
	realResult := result.(*product.BrandServiceGetBrandListResult)
	success, err := handler.(product.BrandService).GetBrandList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBrandServiceGetBrandListArgs() interface{} {
	return product.NewBrandServiceGetBrandListArgs()
}

func newBrandServiceGetBrandListResult() interface{} {
	return product.NewBrandServiceGetBrandListResult()
}

func getRelatedBrandsByCategoryIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.BrandServiceGetRelatedBrandsByCategoryIdArgs)
	realResult := result.(*product.BrandServiceGetRelatedBrandsByCategoryIdResult)
	success, err := handler.(product.BrandService).GetRelatedBrandsByCategoryId(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBrandServiceGetRelatedBrandsByCategoryIdArgs() interface{} {
	return product.NewBrandServiceGetRelatedBrandsByCategoryIdArgs()
}

func newBrandServiceGetRelatedBrandsByCategoryIdResult() interface{} {
	return product.NewBrandServiceGetRelatedBrandsByCategoryIdResult()
}

func getBrandDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.BrandServiceGetBrandDetailArgs)
	realResult := result.(*product.BrandServiceGetBrandDetailResult)
	success, err := handler.(product.BrandService).GetBrandDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBrandServiceGetBrandDetailArgs() interface{} {
	return product.NewBrandServiceGetBrandDetailArgs()
}

func newBrandServiceGetBrandDetailResult() interface{} {
	return product.NewBrandServiceGetBrandDetailResult()
}

func addNewBrandHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.BrandServiceAddNewBrandArgs)
	realResult := result.(*product.BrandServiceAddNewBrandResult)
	success, err := handler.(product.BrandService).AddNewBrand(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBrandServiceAddNewBrandArgs() interface{} {
	return product.NewBrandServiceAddNewBrandArgs()
}

func newBrandServiceAddNewBrandResult() interface{} {
	return product.NewBrandServiceAddNewBrandResult()
}

func updateBrandHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.BrandServiceUpdateBrandArgs)
	realResult := result.(*product.BrandServiceUpdateBrandResult)
	success, err := handler.(product.BrandService).UpdateBrand(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBrandServiceUpdateBrandArgs() interface{} {
	return product.NewBrandServiceUpdateBrandArgs()
}

func newBrandServiceUpdateBrandResult() interface{} {
	return product.NewBrandServiceUpdateBrandResult()
}

func deleteBrandHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.BrandServiceDeleteBrandArgs)
	realResult := result.(*product.BrandServiceDeleteBrandResult)
	success, err := handler.(product.BrandService).DeleteBrand(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBrandServiceDeleteBrandArgs() interface{} {
	return product.NewBrandServiceDeleteBrandArgs()
}

func newBrandServiceDeleteBrandResult() interface{} {
	return product.NewBrandServiceDeleteBrandResult()
}

func getAllBannersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*product.BannerServiceGetAllBannersResult)
	success, err := handler.(product.BannerService).GetAllBanners(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBannerServiceGetAllBannersArgs() interface{} {
	return product.NewBannerServiceGetAllBannersArgs()
}

func newBannerServiceGetAllBannersResult() interface{} {
	return product.NewBannerServiceGetAllBannersResult()
}

func addNewBannerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.BannerServiceAddNewBannerArgs)
	realResult := result.(*product.BannerServiceAddNewBannerResult)
	success, err := handler.(product.BannerService).AddNewBanner(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBannerServiceAddNewBannerArgs() interface{} {
	return product.NewBannerServiceAddNewBannerArgs()
}

func newBannerServiceAddNewBannerResult() interface{} {
	return product.NewBannerServiceAddNewBannerResult()
}

func updateBannerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.BannerServiceUpdateBannerArgs)
	realResult := result.(*product.BannerServiceUpdateBannerResult)
	success, err := handler.(product.BannerService).UpdateBanner(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBannerServiceUpdateBannerArgs() interface{} {
	return product.NewBannerServiceUpdateBannerArgs()
}

func newBannerServiceUpdateBannerResult() interface{} {
	return product.NewBannerServiceUpdateBannerResult()
}

func deleteBannerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.BannerServiceDeleteBannerArgs)
	realResult := result.(*product.BannerServiceDeleteBannerResult)
	success, err := handler.(product.BannerService).DeleteBanner(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBannerServiceDeleteBannerArgs() interface{} {
	return product.NewBannerServiceDeleteBannerArgs()
}

func newBannerServiceDeleteBannerResult() interface{} {
	return product.NewBannerServiceDeleteBannerResult()
}

func batchAddCategoryBrandHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.CategoryBrandServiceBatchAddCategoryBrandArgs)
	realResult := result.(*product.CategoryBrandServiceBatchAddCategoryBrandResult)
	success, err := handler.(product.CategoryBrandService).BatchAddCategoryBrand(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryBrandServiceBatchAddCategoryBrandArgs() interface{} {
	return product.NewCategoryBrandServiceBatchAddCategoryBrandArgs()
}

func newCategoryBrandServiceBatchAddCategoryBrandResult() interface{} {
	return product.NewCategoryBrandServiceBatchAddCategoryBrandResult()
}

func batchReduceCategoryBrandHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.CategoryBrandServiceBatchReduceCategoryBrandArgs)
	realResult := result.(*product.CategoryBrandServiceBatchReduceCategoryBrandResult)
	success, err := handler.(product.CategoryBrandService).BatchReduceCategoryBrand(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryBrandServiceBatchReduceCategoryBrandArgs() interface{} {
	return product.NewCategoryBrandServiceBatchReduceCategoryBrandArgs()
}

func newCategoryBrandServiceBatchReduceCategoryBrandResult() interface{} {
	return product.NewCategoryBrandServiceBatchReduceCategoryBrandResult()
}

func deleteBrandByCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.CategoryBrandServiceDeleteBrandByCategoryArgs)
	realResult := result.(*product.CategoryBrandServiceDeleteBrandByCategoryResult)
	success, err := handler.(product.CategoryBrandService).DeleteBrandByCategory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryBrandServiceDeleteBrandByCategoryArgs() interface{} {
	return product.NewCategoryBrandServiceDeleteBrandByCategoryArgs()
}

func newCategoryBrandServiceDeleteBrandByCategoryResult() interface{} {
	return product.NewCategoryBrandServiceDeleteBrandByCategoryResult()
}

func deleteCategoryByBrandHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.CategoryBrandServiceDeleteCategoryByBrandArgs)
	realResult := result.(*product.CategoryBrandServiceDeleteCategoryByBrandResult)
	success, err := handler.(product.CategoryBrandService).DeleteCategoryByBrand(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryBrandServiceDeleteCategoryByBrandArgs() interface{} {
	return product.NewCategoryBrandServiceDeleteCategoryByBrandArgs()
}

func newCategoryBrandServiceDeleteCategoryByBrandResult() interface{} {
	return product.NewCategoryBrandServiceDeleteCategoryByBrandResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetProductList(ctx context.Context, req *product.ProductFilter) (r []*product.ProductDetail, err error) {
	var _args product.ProductServiceGetProductListArgs
	_args.Req = req
	var _result product.ProductServiceGetProductListResult
	if err = p.c.Call(ctx, "GetProductList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetProductDetail(ctx context.Context, req *common.Req) (r *product.ProductDetail, err error) {
	var _args product.ProductServiceGetProductDetailArgs
	_args.Req = req
	var _result product.ProductServiceGetProductDetailResult
	if err = p.c.Call(ctx, "GetProductDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddNewProduct(ctx context.Context, req *product.NewProduct_) (r *product.ProductInfo, err error) {
	var _args product.ProductServiceAddNewProductArgs
	_args.Req = req
	var _result product.ProductServiceAddNewProductResult
	if err = p.c.Call(ctx, "AddNewProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateProduct(ctx context.Context, req *product.ProductInfo) (r *product.ProductInfo, err error) {
	var _args product.ProductServiceUpdateProductArgs
	_args.Req = req
	var _result product.ProductServiceUpdateProductResult
	if err = p.c.Call(ctx, "UpdateProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateRating(ctx context.Context, req *product.RatingReq) (r *product.RatingInfo, err error) {
	var _args product.ProductServiceUpdateRatingArgs
	_args.Req = req
	var _result product.ProductServiceUpdateRatingResult
	if err = p.c.Call(ctx, "UpdateRating", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteProduct(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args product.ProductServiceDeleteProductArgs
	_args.Req = req
	var _result product.ProductServiceDeleteProductResult
	if err = p.c.Call(ctx, "DeleteProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCategoryList(ctx context.Context, req *product.PageFilter) (r []*product.CategoryInfo, err error) {
	var _args product.CategoryServiceGetCategoryListArgs
	_args.Req = req
	var _result product.CategoryServiceGetCategoryListResult
	if err = p.c.Call(ctx, "GetCategoryList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCategoryDetail(ctx context.Context, req *common.Req) (r *product.CategoryInfo, err error) {
	var _args product.CategoryServiceGetCategoryDetailArgs
	_args.Req = req
	var _result product.CategoryServiceGetCategoryDetailResult
	if err = p.c.Call(ctx, "GetCategoryDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddNewCategory(ctx context.Context, req *product.NewCategory_) (r *product.CategoryInfo, err error) {
	var _args product.CategoryServiceAddNewCategoryArgs
	_args.Req = req
	var _result product.CategoryServiceAddNewCategoryResult
	if err = p.c.Call(ctx, "AddNewCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCategory(ctx context.Context, req *product.CategoryInfo) (r *product.CategoryInfo, err error) {
	var _args product.CategoryServiceUpdateCategoryArgs
	_args.Req = req
	var _result product.CategoryServiceUpdateCategoryResult
	if err = p.c.Call(ctx, "UpdateCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCategory(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args product.CategoryServiceDeleteCategoryArgs
	_args.Req = req
	var _result product.CategoryServiceDeleteCategoryResult
	if err = p.c.Call(ctx, "DeleteCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAllModels(ctx context.Context) (r []*product.ModelInfo, err error) {
	var _args product.ModelServiceGetAllModelsArgs
	var _result product.ModelServiceGetAllModelsResult
	if err = p.c.Call(ctx, "GetAllModels", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetModelDetail(ctx context.Context, req *common.Req) (r *product.ModelInfo, err error) {
	var _args product.ModelServiceGetModelDetailArgs
	_args.Req = req
	var _result product.ModelServiceGetModelDetailResult
	if err = p.c.Call(ctx, "GetModelDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddNewModel(ctx context.Context, req *product.NewModel_) (r *product.ModelInfo, err error) {
	var _args product.ModelServiceAddNewModelArgs
	_args.Req = req
	var _result product.ModelServiceAddNewModelResult
	if err = p.c.Call(ctx, "AddNewModel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteModel(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args product.ModelServiceDeleteModelArgs
	_args.Req = req
	var _result product.ModelServiceDeleteModelResult
	if err = p.c.Call(ctx, "DeleteModel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBrandList(ctx context.Context, req *product.PageFilter) (r []*product.BrandInfo, err error) {
	var _args product.BrandServiceGetBrandListArgs
	_args.Req = req
	var _result product.BrandServiceGetBrandListResult
	if err = p.c.Call(ctx, "GetBrandList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRelatedBrandsByCategoryId(ctx context.Context, req *product.BrandByCatReq) (r []*product.BrandInfo, err error) {
	var _args product.BrandServiceGetRelatedBrandsByCategoryIdArgs
	_args.Req = req
	var _result product.BrandServiceGetRelatedBrandsByCategoryIdResult
	if err = p.c.Call(ctx, "GetRelatedBrandsByCategoryId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBrandDetail(ctx context.Context, req *common.Req) (r *product.BrandInfo, err error) {
	var _args product.BrandServiceGetBrandDetailArgs
	_args.Req = req
	var _result product.BrandServiceGetBrandDetailResult
	if err = p.c.Call(ctx, "GetBrandDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddNewBrand(ctx context.Context, req *product.NewBrand_) (r *product.BrandInfo, err error) {
	var _args product.BrandServiceAddNewBrandArgs
	_args.Req = req
	var _result product.BrandServiceAddNewBrandResult
	if err = p.c.Call(ctx, "AddNewBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateBrand(ctx context.Context, req *product.BrandInfo) (r *product.BrandInfo, err error) {
	var _args product.BrandServiceUpdateBrandArgs
	_args.Req = req
	var _result product.BrandServiceUpdateBrandResult
	if err = p.c.Call(ctx, "UpdateBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteBrand(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args product.BrandServiceDeleteBrandArgs
	_args.Req = req
	var _result product.BrandServiceDeleteBrandResult
	if err = p.c.Call(ctx, "DeleteBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAllBanners(ctx context.Context) (r []*product.BannerInfo, err error) {
	var _args product.BannerServiceGetAllBannersArgs
	var _result product.BannerServiceGetAllBannersResult
	if err = p.c.Call(ctx, "GetAllBanners", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddNewBanner(ctx context.Context, req *product.NewBanner_) (r *product.BannerInfo, err error) {
	var _args product.BannerServiceAddNewBannerArgs
	_args.Req = req
	var _result product.BannerServiceAddNewBannerResult
	if err = p.c.Call(ctx, "AddNewBanner", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateBanner(ctx context.Context, req *product.BannerInfo) (r *product.BannerInfo, err error) {
	var _args product.BannerServiceUpdateBannerArgs
	_args.Req = req
	var _result product.BannerServiceUpdateBannerResult
	if err = p.c.Call(ctx, "UpdateBanner", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteBanner(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args product.BannerServiceDeleteBannerArgs
	_args.Req = req
	var _result product.BannerServiceDeleteBannerResult
	if err = p.c.Call(ctx, "DeleteBanner", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchAddCategoryBrand(ctx context.Context, req *product.NewCategoryBrand_) (r []*product.CategoryBrandInfo, err error) {
	var _args product.CategoryBrandServiceBatchAddCategoryBrandArgs
	_args.Req = req
	var _result product.CategoryBrandServiceBatchAddCategoryBrandResult
	if err = p.c.Call(ctx, "BatchAddCategoryBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchReduceCategoryBrand(ctx context.Context, req *product.NewCategoryBrand_) (r *common.Empty, err error) {
	var _args product.CategoryBrandServiceBatchReduceCategoryBrandArgs
	_args.Req = req
	var _result product.CategoryBrandServiceBatchReduceCategoryBrandResult
	if err = p.c.Call(ctx, "BatchReduceCategoryBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteBrandByCategory(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args product.CategoryBrandServiceDeleteBrandByCategoryArgs
	_args.Req = req
	var _result product.CategoryBrandServiceDeleteBrandByCategoryResult
	if err = p.c.Call(ctx, "DeleteBrandByCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCategoryByBrand(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args product.CategoryBrandServiceDeleteCategoryByBrandArgs
	_args.Req = req
	var _result product.CategoryBrandServiceDeleteCategoryByBrandResult
	if err = p.c.Call(ctx, "DeleteCategoryByBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
