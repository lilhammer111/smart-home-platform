// Code generated by Kitex v0.8.0. DO NOT EDIT.

package categoryservice

import (
	"context"
	common "git.zqbjj.top/pet/services/cmd/http/kitex_gen/common"
	product "git.zqbjj.top/pet/services/cmd/http/kitex_gen/product"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return categoryServiceServiceInfo
}

var categoryServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CategoryService"
	handlerType := (*product.CategoryService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetCategoryList":   kitex.NewMethodInfo(getCategoryListHandler, newCategoryServiceGetCategoryListArgs, newCategoryServiceGetCategoryListResult, false),
		"GetCategoryDetail": kitex.NewMethodInfo(getCategoryDetailHandler, newCategoryServiceGetCategoryDetailArgs, newCategoryServiceGetCategoryDetailResult, false),
		"AddNewCategory":    kitex.NewMethodInfo(addNewCategoryHandler, newCategoryServiceAddNewCategoryArgs, newCategoryServiceAddNewCategoryResult, false),
		"UpdateCategory":    kitex.NewMethodInfo(updateCategoryHandler, newCategoryServiceUpdateCategoryArgs, newCategoryServiceUpdateCategoryResult, false),
		"DeleteCategory":    kitex.NewMethodInfo(deleteCategoryHandler, newCategoryServiceDeleteCategoryArgs, newCategoryServiceDeleteCategoryResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "product",
		"ServiceFilePath": `../../static/idl/rpc/product.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func getCategoryListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.CategoryServiceGetCategoryListArgs)
	realResult := result.(*product.CategoryServiceGetCategoryListResult)
	success, err := handler.(product.CategoryService).GetCategoryList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryServiceGetCategoryListArgs() interface{} {
	return product.NewCategoryServiceGetCategoryListArgs()
}

func newCategoryServiceGetCategoryListResult() interface{} {
	return product.NewCategoryServiceGetCategoryListResult()
}

func getCategoryDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.CategoryServiceGetCategoryDetailArgs)
	realResult := result.(*product.CategoryServiceGetCategoryDetailResult)
	success, err := handler.(product.CategoryService).GetCategoryDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryServiceGetCategoryDetailArgs() interface{} {
	return product.NewCategoryServiceGetCategoryDetailArgs()
}

func newCategoryServiceGetCategoryDetailResult() interface{} {
	return product.NewCategoryServiceGetCategoryDetailResult()
}

func addNewCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.CategoryServiceAddNewCategoryArgs)
	realResult := result.(*product.CategoryServiceAddNewCategoryResult)
	success, err := handler.(product.CategoryService).AddNewCategory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryServiceAddNewCategoryArgs() interface{} {
	return product.NewCategoryServiceAddNewCategoryArgs()
}

func newCategoryServiceAddNewCategoryResult() interface{} {
	return product.NewCategoryServiceAddNewCategoryResult()
}

func updateCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.CategoryServiceUpdateCategoryArgs)
	realResult := result.(*product.CategoryServiceUpdateCategoryResult)
	success, err := handler.(product.CategoryService).UpdateCategory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryServiceUpdateCategoryArgs() interface{} {
	return product.NewCategoryServiceUpdateCategoryArgs()
}

func newCategoryServiceUpdateCategoryResult() interface{} {
	return product.NewCategoryServiceUpdateCategoryResult()
}

func deleteCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.CategoryServiceDeleteCategoryArgs)
	realResult := result.(*product.CategoryServiceDeleteCategoryResult)
	success, err := handler.(product.CategoryService).DeleteCategory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryServiceDeleteCategoryArgs() interface{} {
	return product.NewCategoryServiceDeleteCategoryArgs()
}

func newCategoryServiceDeleteCategoryResult() interface{} {
	return product.NewCategoryServiceDeleteCategoryResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetCategoryList(ctx context.Context, req *product.PageFilter) (r []*product.CategoryBasicInfo, err error) {
	var _args product.CategoryServiceGetCategoryListArgs
	_args.Req = req
	var _result product.CategoryServiceGetCategoryListResult
	if err = p.c.Call(ctx, "GetCategoryList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCategoryDetail(ctx context.Context, req *common.Req) (r *product.CategoryDetail, err error) {
	var _args product.CategoryServiceGetCategoryDetailArgs
	_args.Req = req
	var _result product.CategoryServiceGetCategoryDetailResult
	if err = p.c.Call(ctx, "GetCategoryDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddNewCategory(ctx context.Context, req *product.AddCategoryReq) (r *product.CategoryInfo, err error) {
	var _args product.CategoryServiceAddNewCategoryArgs
	_args.Req = req
	var _result product.CategoryServiceAddNewCategoryResult
	if err = p.c.Call(ctx, "AddNewCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCategory(ctx context.Context, req *product.CategoryInfo) (r *product.CategoryInfo, err error) {
	var _args product.CategoryServiceUpdateCategoryArgs
	_args.Req = req
	var _result product.CategoryServiceUpdateCategoryResult
	if err = p.c.Call(ctx, "UpdateCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCategory(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args product.CategoryServiceDeleteCategoryArgs
	_args.Req = req
	var _result product.CategoryServiceDeleteCategoryResult
	if err = p.c.Call(ctx, "DeleteCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
