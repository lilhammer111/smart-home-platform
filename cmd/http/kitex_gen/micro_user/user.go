// Code generated by thriftgo (0.3.3). DO NOT EDIT.

package micro_user

import (
	"context"
	"fmt"
	"git.zqbjj.top/pet/services/cmd/http/kitex_gen/common"
	"git.zqbjj.top/pet/services/cmd/http/kitex_gen/user"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type CredentialRpcReq struct {
	SmsCode  string  `thrift:"SmsCode,1,required" frugal:"1,required,string" json:"SmsCode"`
	Mobile   string  `thrift:"Mobile,2,required" frugal:"2,required,string" json:"Mobile"`
	Password *string `thrift:"Password,3,optional" frugal:"3,optional,string" json:"Password,omitempty"`
	Username *string `thrift:"Username,4,optional" frugal:"4,optional,string" json:"Username,omitempty"`
}

func NewCredentialRpcReq() *CredentialRpcReq {
	return &CredentialRpcReq{}
}

func (p *CredentialRpcReq) InitDefault() {
	*p = CredentialRpcReq{}
}

func (p *CredentialRpcReq) GetSmsCode() (v string) {
	return p.SmsCode
}

func (p *CredentialRpcReq) GetMobile() (v string) {
	return p.Mobile
}

var CredentialRpcReq_Password_DEFAULT string

func (p *CredentialRpcReq) GetPassword() (v string) {
	if !p.IsSetPassword() {
		return CredentialRpcReq_Password_DEFAULT
	}
	return *p.Password
}

var CredentialRpcReq_Username_DEFAULT string

func (p *CredentialRpcReq) GetUsername() (v string) {
	if !p.IsSetUsername() {
		return CredentialRpcReq_Username_DEFAULT
	}
	return *p.Username
}
func (p *CredentialRpcReq) SetSmsCode(val string) {
	p.SmsCode = val
}
func (p *CredentialRpcReq) SetMobile(val string) {
	p.Mobile = val
}
func (p *CredentialRpcReq) SetPassword(val *string) {
	p.Password = val
}
func (p *CredentialRpcReq) SetUsername(val *string) {
	p.Username = val
}

var fieldIDToName_CredentialRpcReq = map[int16]string{
	1: "SmsCode",
	2: "Mobile",
	3: "Password",
	4: "Username",
}

func (p *CredentialRpcReq) IsSetPassword() bool {
	return p.Password != nil
}

func (p *CredentialRpcReq) IsSetUsername() bool {
	return p.Username != nil
}

func (p *CredentialRpcReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetSmsCode bool = false
	var issetMobile bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetSmsCode = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetMobile = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetSmsCode {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetMobile {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CredentialRpcReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CredentialRpcReq[fieldId]))
}

func (p *CredentialRpcReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SmsCode = v
	}
	return nil
}
func (p *CredentialRpcReq) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Mobile = v
	}
	return nil
}
func (p *CredentialRpcReq) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Password = &v
	}
	return nil
}
func (p *CredentialRpcReq) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Username = &v
	}
	return nil
}

func (p *CredentialRpcReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CredentialRpcReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CredentialRpcReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SmsCode", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SmsCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CredentialRpcReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Mobile", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Mobile); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CredentialRpcReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPassword() {
		if err = oprot.WriteFieldBegin("Password", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Password); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CredentialRpcReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err = oprot.WriteFieldBegin("Username", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Username); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CredentialRpcReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CredentialRpcReq(%+v)", *p)
}

func (p *CredentialRpcReq) DeepEqual(ano *CredentialRpcReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SmsCode) {
		return false
	}
	if !p.Field2DeepEqual(ano.Mobile) {
		return false
	}
	if !p.Field3DeepEqual(ano.Password) {
		return false
	}
	if !p.Field4DeepEqual(ano.Username) {
		return false
	}
	return true
}

func (p *CredentialRpcReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.SmsCode, src) != 0 {
		return false
	}
	return true
}
func (p *CredentialRpcReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Mobile, src) != 0 {
		return false
	}
	return true
}
func (p *CredentialRpcReq) Field3DeepEqual(src *string) bool {

	if p.Password == src {
		return true
	} else if p.Password == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Password, *src) != 0 {
		return false
	}
	return true
}
func (p *CredentialRpcReq) Field4DeepEqual(src *string) bool {

	if p.Username == src {
		return true
	} else if p.Username == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Username, *src) != 0 {
		return false
	}
	return true
}

type FreezeRpcReq struct {
	Username *string `thrift:"Username,1,optional" frugal:"1,optional,string" json:"Username,omitempty"`
	Mobile   *string `thrift:"Mobile,2,optional" frugal:"2,optional,string" json:"Mobile,omitempty"`
	Email    *string `thrift:"Email,3,optional" frugal:"3,optional,string" json:"Email,omitempty"`
}

func NewFreezeRpcReq() *FreezeRpcReq {
	return &FreezeRpcReq{}
}

func (p *FreezeRpcReq) InitDefault() {
	*p = FreezeRpcReq{}
}

var FreezeRpcReq_Username_DEFAULT string

func (p *FreezeRpcReq) GetUsername() (v string) {
	if !p.IsSetUsername() {
		return FreezeRpcReq_Username_DEFAULT
	}
	return *p.Username
}

var FreezeRpcReq_Mobile_DEFAULT string

func (p *FreezeRpcReq) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return FreezeRpcReq_Mobile_DEFAULT
	}
	return *p.Mobile
}

var FreezeRpcReq_Email_DEFAULT string

func (p *FreezeRpcReq) GetEmail() (v string) {
	if !p.IsSetEmail() {
		return FreezeRpcReq_Email_DEFAULT
	}
	return *p.Email
}
func (p *FreezeRpcReq) SetUsername(val *string) {
	p.Username = val
}
func (p *FreezeRpcReq) SetMobile(val *string) {
	p.Mobile = val
}
func (p *FreezeRpcReq) SetEmail(val *string) {
	p.Email = val
}

var fieldIDToName_FreezeRpcReq = map[int16]string{
	1: "Username",
	2: "Mobile",
	3: "Email",
}

func (p *FreezeRpcReq) IsSetUsername() bool {
	return p.Username != nil
}

func (p *FreezeRpcReq) IsSetMobile() bool {
	return p.Mobile != nil
}

func (p *FreezeRpcReq) IsSetEmail() bool {
	return p.Email != nil
}

func (p *FreezeRpcReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FreezeRpcReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FreezeRpcReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Username = &v
	}
	return nil
}
func (p *FreezeRpcReq) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Mobile = &v
	}
	return nil
}
func (p *FreezeRpcReq) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Email = &v
	}
	return nil
}

func (p *FreezeRpcReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FreezeRpcReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FreezeRpcReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err = oprot.WriteFieldBegin("Username", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Username); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *FreezeRpcReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMobile() {
		if err = oprot.WriteFieldBegin("Mobile", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Mobile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *FreezeRpcReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmail() {
		if err = oprot.WriteFieldBegin("Email", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Email); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *FreezeRpcReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FreezeRpcReq(%+v)", *p)
}

func (p *FreezeRpcReq) DeepEqual(ano *FreezeRpcReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Username) {
		return false
	}
	if !p.Field2DeepEqual(ano.Mobile) {
		return false
	}
	if !p.Field3DeepEqual(ano.Email) {
		return false
	}
	return true
}

func (p *FreezeRpcReq) Field1DeepEqual(src *string) bool {

	if p.Username == src {
		return true
	} else if p.Username == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Username, *src) != 0 {
		return false
	}
	return true
}
func (p *FreezeRpcReq) Field2DeepEqual(src *string) bool {

	if p.Mobile == src {
		return true
	} else if p.Mobile == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Mobile, *src) != 0 {
		return false
	}
	return true
}
func (p *FreezeRpcReq) Field3DeepEqual(src *string) bool {

	if p.Email == src {
		return true
	} else if p.Email == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Email, *src) != 0 {
		return false
	}
	return true
}

type FreezeRpcResp struct {
	IsFrozen bool    `thrift:"IsFrozen,9,required" frugal:"9,required,bool" json:"IsFrozen"`
	ThawedAt *string `thrift:"ThawedAt,10,optional" frugal:"10,optional,string" json:"ThawedAt,omitempty"`
}

func NewFreezeRpcResp() *FreezeRpcResp {
	return &FreezeRpcResp{}
}

func (p *FreezeRpcResp) InitDefault() {
	*p = FreezeRpcResp{}
}

func (p *FreezeRpcResp) GetIsFrozen() (v bool) {
	return p.IsFrozen
}

var FreezeRpcResp_ThawedAt_DEFAULT string

func (p *FreezeRpcResp) GetThawedAt() (v string) {
	if !p.IsSetThawedAt() {
		return FreezeRpcResp_ThawedAt_DEFAULT
	}
	return *p.ThawedAt
}
func (p *FreezeRpcResp) SetIsFrozen(val bool) {
	p.IsFrozen = val
}
func (p *FreezeRpcResp) SetThawedAt(val *string) {
	p.ThawedAt = val
}

var fieldIDToName_FreezeRpcResp = map[int16]string{
	9:  "IsFrozen",
	10: "ThawedAt",
}

func (p *FreezeRpcResp) IsSetThawedAt() bool {
	return p.ThawedAt != nil
}

func (p *FreezeRpcResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetIsFrozen bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 9:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsFrozen = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetIsFrozen {
		fieldId = 9
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FreezeRpcResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_FreezeRpcResp[fieldId]))
}

func (p *FreezeRpcResp) ReadField9(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsFrozen = v
	}
	return nil
}
func (p *FreezeRpcResp) ReadField10(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ThawedAt = &v
	}
	return nil
}

func (p *FreezeRpcResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FreezeRpcResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FreezeRpcResp) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IsFrozen", thrift.BOOL, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsFrozen); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}
func (p *FreezeRpcResp) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetThawedAt() {
		if err = oprot.WriteFieldBegin("ThawedAt", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ThawedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *FreezeRpcResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FreezeRpcResp(%+v)", *p)
}

func (p *FreezeRpcResp) DeepEqual(ano *FreezeRpcResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field9DeepEqual(ano.IsFrozen) {
		return false
	}
	if !p.Field10DeepEqual(ano.ThawedAt) {
		return false
	}
	return true
}

func (p *FreezeRpcResp) Field9DeepEqual(src bool) bool {

	if p.IsFrozen != src {
		return false
	}
	return true
}
func (p *FreezeRpcResp) Field10DeepEqual(src *string) bool {

	if p.ThawedAt == src {
		return true
	} else if p.ThawedAt == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ThawedAt, *src) != 0 {
		return false
	}
	return true
}

type MicroUser interface {
	FreezePatrolBeforeAuth(ctx context.Context, req *FreezeRpcReq) (r *FreezeRpcResp, err error)

	FreezePatrolAfterAuth(ctx context.Context, req *common.IdRpcReq) (r *FreezeRpcResp, err error)

	VerifyCredentials(ctx context.Context, req *CredentialRpcReq) (r *common.EmptyRpcResp, err error)

	FindUser(ctx context.Context, req *common.IdRpcReq) (r *user.UserInfo, err error)

	QueryUsersWithFilter(ctx context.Context, req *user.UsersFilter) (r []*user.UserInfo, err error)

	UpsertUser(ctx context.Context, req *user.UserInfo) (r *user.UserInfo, err error)

	DeleteUser(ctx context.Context, req *common.IdRpcReq) (r *common.EmptyRpcResp, err error)
}

type MicroUserClient struct {
	c thrift.TClient
}

func NewMicroUserClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MicroUserClient {
	return &MicroUserClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewMicroUserClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MicroUserClient {
	return &MicroUserClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewMicroUserClient(c thrift.TClient) *MicroUserClient {
	return &MicroUserClient{
		c: c,
	}
}

func (p *MicroUserClient) Client_() thrift.TClient {
	return p.c
}

func (p *MicroUserClient) FreezePatrolBeforeAuth(ctx context.Context, req *FreezeRpcReq) (r *FreezeRpcResp, err error) {
	var _args MicroUserFreezePatrolBeforeAuthArgs
	_args.Req = req
	var _result MicroUserFreezePatrolBeforeAuthResult
	if err = p.Client_().Call(ctx, "FreezePatrolBeforeAuth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroUserClient) FreezePatrolAfterAuth(ctx context.Context, req *common.IdRpcReq) (r *FreezeRpcResp, err error) {
	var _args MicroUserFreezePatrolAfterAuthArgs
	_args.Req = req
	var _result MicroUserFreezePatrolAfterAuthResult
	if err = p.Client_().Call(ctx, "FreezePatrolAfterAuth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroUserClient) VerifyCredentials(ctx context.Context, req *CredentialRpcReq) (r *common.EmptyRpcResp, err error) {
	var _args MicroUserVerifyCredentialsArgs
	_args.Req = req
	var _result MicroUserVerifyCredentialsResult
	if err = p.Client_().Call(ctx, "VerifyCredentials", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroUserClient) FindUser(ctx context.Context, req *common.IdRpcReq) (r *user.UserInfo, err error) {
	var _args MicroUserFindUserArgs
	_args.Req = req
	var _result MicroUserFindUserResult
	if err = p.Client_().Call(ctx, "FindUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroUserClient) QueryUsersWithFilter(ctx context.Context, req *user.UsersFilter) (r []*user.UserInfo, err error) {
	var _args MicroUserQueryUsersWithFilterArgs
	_args.Req = req
	var _result MicroUserQueryUsersWithFilterResult
	if err = p.Client_().Call(ctx, "QueryUsersWithFilter", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroUserClient) UpsertUser(ctx context.Context, req *user.UserInfo) (r *user.UserInfo, err error) {
	var _args MicroUserUpsertUserArgs
	_args.Req = req
	var _result MicroUserUpsertUserResult
	if err = p.Client_().Call(ctx, "UpsertUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MicroUserClient) DeleteUser(ctx context.Context, req *common.IdRpcReq) (r *common.EmptyRpcResp, err error) {
	var _args MicroUserDeleteUserArgs
	_args.Req = req
	var _result MicroUserDeleteUserResult
	if err = p.Client_().Call(ctx, "DeleteUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type MicroUserProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MicroUser
}

func (p *MicroUserProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MicroUserProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MicroUserProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMicroUserProcessor(handler MicroUser) *MicroUserProcessor {
	self := &MicroUserProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("FreezePatrolBeforeAuth", &microUserProcessorFreezePatrolBeforeAuth{handler: handler})
	self.AddToProcessorMap("FreezePatrolAfterAuth", &microUserProcessorFreezePatrolAfterAuth{handler: handler})
	self.AddToProcessorMap("VerifyCredentials", &microUserProcessorVerifyCredentials{handler: handler})
	self.AddToProcessorMap("FindUser", &microUserProcessorFindUser{handler: handler})
	self.AddToProcessorMap("QueryUsersWithFilter", &microUserProcessorQueryUsersWithFilter{handler: handler})
	self.AddToProcessorMap("UpsertUser", &microUserProcessorUpsertUser{handler: handler})
	self.AddToProcessorMap("DeleteUser", &microUserProcessorDeleteUser{handler: handler})
	return self
}
func (p *MicroUserProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type microUserProcessorFreezePatrolBeforeAuth struct {
	handler MicroUser
}

func (p *microUserProcessorFreezePatrolBeforeAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroUserFreezePatrolBeforeAuthArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("FreezePatrolBeforeAuth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroUserFreezePatrolBeforeAuthResult{}
	var retval *FreezeRpcResp
	if retval, err2 = p.handler.FreezePatrolBeforeAuth(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FreezePatrolBeforeAuth: "+err2.Error())
		oprot.WriteMessageBegin("FreezePatrolBeforeAuth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("FreezePatrolBeforeAuth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microUserProcessorFreezePatrolAfterAuth struct {
	handler MicroUser
}

func (p *microUserProcessorFreezePatrolAfterAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroUserFreezePatrolAfterAuthArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("FreezePatrolAfterAuth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroUserFreezePatrolAfterAuthResult{}
	var retval *FreezeRpcResp
	if retval, err2 = p.handler.FreezePatrolAfterAuth(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FreezePatrolAfterAuth: "+err2.Error())
		oprot.WriteMessageBegin("FreezePatrolAfterAuth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("FreezePatrolAfterAuth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microUserProcessorVerifyCredentials struct {
	handler MicroUser
}

func (p *microUserProcessorVerifyCredentials) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroUserVerifyCredentialsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("VerifyCredentials", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroUserVerifyCredentialsResult{}
	var retval *common.EmptyRpcResp
	if retval, err2 = p.handler.VerifyCredentials(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing VerifyCredentials: "+err2.Error())
		oprot.WriteMessageBegin("VerifyCredentials", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("VerifyCredentials", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microUserProcessorFindUser struct {
	handler MicroUser
}

func (p *microUserProcessorFindUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroUserFindUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("FindUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroUserFindUserResult{}
	var retval *user.UserInfo
	if retval, err2 = p.handler.FindUser(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FindUser: "+err2.Error())
		oprot.WriteMessageBegin("FindUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("FindUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microUserProcessorQueryUsersWithFilter struct {
	handler MicroUser
}

func (p *microUserProcessorQueryUsersWithFilter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroUserQueryUsersWithFilterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryUsersWithFilter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroUserQueryUsersWithFilterResult{}
	var retval []*user.UserInfo
	if retval, err2 = p.handler.QueryUsersWithFilter(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryUsersWithFilter: "+err2.Error())
		oprot.WriteMessageBegin("QueryUsersWithFilter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryUsersWithFilter", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microUserProcessorUpsertUser struct {
	handler MicroUser
}

func (p *microUserProcessorUpsertUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroUserUpsertUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpsertUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroUserUpsertUserResult{}
	var retval *user.UserInfo
	if retval, err2 = p.handler.UpsertUser(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpsertUser: "+err2.Error())
		oprot.WriteMessageBegin("UpsertUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpsertUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type microUserProcessorDeleteUser struct {
	handler MicroUser
}

func (p *microUserProcessorDeleteUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MicroUserDeleteUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MicroUserDeleteUserResult{}
	var retval *common.EmptyRpcResp
	if retval, err2 = p.handler.DeleteUser(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteUser: "+err2.Error())
		oprot.WriteMessageBegin("DeleteUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type MicroUserFreezePatrolBeforeAuthArgs struct {
	Req *FreezeRpcReq `thrift:"req,1" frugal:"1,default,FreezeRpcReq" json:"req"`
}

func NewMicroUserFreezePatrolBeforeAuthArgs() *MicroUserFreezePatrolBeforeAuthArgs {
	return &MicroUserFreezePatrolBeforeAuthArgs{}
}

func (p *MicroUserFreezePatrolBeforeAuthArgs) InitDefault() {
	*p = MicroUserFreezePatrolBeforeAuthArgs{}
}

var MicroUserFreezePatrolBeforeAuthArgs_Req_DEFAULT *FreezeRpcReq

func (p *MicroUserFreezePatrolBeforeAuthArgs) GetReq() (v *FreezeRpcReq) {
	if !p.IsSetReq() {
		return MicroUserFreezePatrolBeforeAuthArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroUserFreezePatrolBeforeAuthArgs) SetReq(val *FreezeRpcReq) {
	p.Req = val
}

var fieldIDToName_MicroUserFreezePatrolBeforeAuthArgs = map[int16]string{
	1: "req",
}

func (p *MicroUserFreezePatrolBeforeAuthArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroUserFreezePatrolBeforeAuthArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserFreezePatrolBeforeAuthArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserFreezePatrolBeforeAuthArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewFreezeRpcReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserFreezePatrolBeforeAuthArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FreezePatrolBeforeAuth_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserFreezePatrolBeforeAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroUserFreezePatrolBeforeAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserFreezePatrolBeforeAuthArgs(%+v)", *p)
}

func (p *MicroUserFreezePatrolBeforeAuthArgs) DeepEqual(ano *MicroUserFreezePatrolBeforeAuthArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroUserFreezePatrolBeforeAuthArgs) Field1DeepEqual(src *FreezeRpcReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserFreezePatrolBeforeAuthResult struct {
	Success *FreezeRpcResp `thrift:"success,0,optional" frugal:"0,optional,FreezeRpcResp" json:"success,omitempty"`
}

func NewMicroUserFreezePatrolBeforeAuthResult() *MicroUserFreezePatrolBeforeAuthResult {
	return &MicroUserFreezePatrolBeforeAuthResult{}
}

func (p *MicroUserFreezePatrolBeforeAuthResult) InitDefault() {
	*p = MicroUserFreezePatrolBeforeAuthResult{}
}

var MicroUserFreezePatrolBeforeAuthResult_Success_DEFAULT *FreezeRpcResp

func (p *MicroUserFreezePatrolBeforeAuthResult) GetSuccess() (v *FreezeRpcResp) {
	if !p.IsSetSuccess() {
		return MicroUserFreezePatrolBeforeAuthResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroUserFreezePatrolBeforeAuthResult) SetSuccess(x interface{}) {
	p.Success = x.(*FreezeRpcResp)
}

var fieldIDToName_MicroUserFreezePatrolBeforeAuthResult = map[int16]string{
	0: "success",
}

func (p *MicroUserFreezePatrolBeforeAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroUserFreezePatrolBeforeAuthResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserFreezePatrolBeforeAuthResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserFreezePatrolBeforeAuthResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewFreezeRpcResp()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserFreezePatrolBeforeAuthResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FreezePatrolBeforeAuth_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserFreezePatrolBeforeAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroUserFreezePatrolBeforeAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserFreezePatrolBeforeAuthResult(%+v)", *p)
}

func (p *MicroUserFreezePatrolBeforeAuthResult) DeepEqual(ano *MicroUserFreezePatrolBeforeAuthResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroUserFreezePatrolBeforeAuthResult) Field0DeepEqual(src *FreezeRpcResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserFreezePatrolAfterAuthArgs struct {
	Req *common.IdRpcReq `thrift:"req,1" frugal:"1,default,common.IdRpcReq" json:"req"`
}

func NewMicroUserFreezePatrolAfterAuthArgs() *MicroUserFreezePatrolAfterAuthArgs {
	return &MicroUserFreezePatrolAfterAuthArgs{}
}

func (p *MicroUserFreezePatrolAfterAuthArgs) InitDefault() {
	*p = MicroUserFreezePatrolAfterAuthArgs{}
}

var MicroUserFreezePatrolAfterAuthArgs_Req_DEFAULT *common.IdRpcReq

func (p *MicroUserFreezePatrolAfterAuthArgs) GetReq() (v *common.IdRpcReq) {
	if !p.IsSetReq() {
		return MicroUserFreezePatrolAfterAuthArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroUserFreezePatrolAfterAuthArgs) SetReq(val *common.IdRpcReq) {
	p.Req = val
}

var fieldIDToName_MicroUserFreezePatrolAfterAuthArgs = map[int16]string{
	1: "req",
}

func (p *MicroUserFreezePatrolAfterAuthArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroUserFreezePatrolAfterAuthArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserFreezePatrolAfterAuthArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserFreezePatrolAfterAuthArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common.NewIdRpcReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserFreezePatrolAfterAuthArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FreezePatrolAfterAuth_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserFreezePatrolAfterAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroUserFreezePatrolAfterAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserFreezePatrolAfterAuthArgs(%+v)", *p)
}

func (p *MicroUserFreezePatrolAfterAuthArgs) DeepEqual(ano *MicroUserFreezePatrolAfterAuthArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroUserFreezePatrolAfterAuthArgs) Field1DeepEqual(src *common.IdRpcReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserFreezePatrolAfterAuthResult struct {
	Success *FreezeRpcResp `thrift:"success,0,optional" frugal:"0,optional,FreezeRpcResp" json:"success,omitempty"`
}

func NewMicroUserFreezePatrolAfterAuthResult() *MicroUserFreezePatrolAfterAuthResult {
	return &MicroUserFreezePatrolAfterAuthResult{}
}

func (p *MicroUserFreezePatrolAfterAuthResult) InitDefault() {
	*p = MicroUserFreezePatrolAfterAuthResult{}
}

var MicroUserFreezePatrolAfterAuthResult_Success_DEFAULT *FreezeRpcResp

func (p *MicroUserFreezePatrolAfterAuthResult) GetSuccess() (v *FreezeRpcResp) {
	if !p.IsSetSuccess() {
		return MicroUserFreezePatrolAfterAuthResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroUserFreezePatrolAfterAuthResult) SetSuccess(x interface{}) {
	p.Success = x.(*FreezeRpcResp)
}

var fieldIDToName_MicroUserFreezePatrolAfterAuthResult = map[int16]string{
	0: "success",
}

func (p *MicroUserFreezePatrolAfterAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroUserFreezePatrolAfterAuthResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserFreezePatrolAfterAuthResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserFreezePatrolAfterAuthResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewFreezeRpcResp()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserFreezePatrolAfterAuthResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FreezePatrolAfterAuth_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserFreezePatrolAfterAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroUserFreezePatrolAfterAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserFreezePatrolAfterAuthResult(%+v)", *p)
}

func (p *MicroUserFreezePatrolAfterAuthResult) DeepEqual(ano *MicroUserFreezePatrolAfterAuthResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroUserFreezePatrolAfterAuthResult) Field0DeepEqual(src *FreezeRpcResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserVerifyCredentialsArgs struct {
	Req *CredentialRpcReq `thrift:"req,1" frugal:"1,default,CredentialRpcReq" json:"req"`
}

func NewMicroUserVerifyCredentialsArgs() *MicroUserVerifyCredentialsArgs {
	return &MicroUserVerifyCredentialsArgs{}
}

func (p *MicroUserVerifyCredentialsArgs) InitDefault() {
	*p = MicroUserVerifyCredentialsArgs{}
}

var MicroUserVerifyCredentialsArgs_Req_DEFAULT *CredentialRpcReq

func (p *MicroUserVerifyCredentialsArgs) GetReq() (v *CredentialRpcReq) {
	if !p.IsSetReq() {
		return MicroUserVerifyCredentialsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroUserVerifyCredentialsArgs) SetReq(val *CredentialRpcReq) {
	p.Req = val
}

var fieldIDToName_MicroUserVerifyCredentialsArgs = map[int16]string{
	1: "req",
}

func (p *MicroUserVerifyCredentialsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroUserVerifyCredentialsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserVerifyCredentialsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserVerifyCredentialsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCredentialRpcReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserVerifyCredentialsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VerifyCredentials_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserVerifyCredentialsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroUserVerifyCredentialsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserVerifyCredentialsArgs(%+v)", *p)
}

func (p *MicroUserVerifyCredentialsArgs) DeepEqual(ano *MicroUserVerifyCredentialsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroUserVerifyCredentialsArgs) Field1DeepEqual(src *CredentialRpcReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserVerifyCredentialsResult struct {
	Success *common.EmptyRpcResp `thrift:"success,0,optional" frugal:"0,optional,common.EmptyRpcResp" json:"success,omitempty"`
}

func NewMicroUserVerifyCredentialsResult() *MicroUserVerifyCredentialsResult {
	return &MicroUserVerifyCredentialsResult{}
}

func (p *MicroUserVerifyCredentialsResult) InitDefault() {
	*p = MicroUserVerifyCredentialsResult{}
}

var MicroUserVerifyCredentialsResult_Success_DEFAULT *common.EmptyRpcResp

func (p *MicroUserVerifyCredentialsResult) GetSuccess() (v *common.EmptyRpcResp) {
	if !p.IsSetSuccess() {
		return MicroUserVerifyCredentialsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroUserVerifyCredentialsResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.EmptyRpcResp)
}

var fieldIDToName_MicroUserVerifyCredentialsResult = map[int16]string{
	0: "success",
}

func (p *MicroUserVerifyCredentialsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroUserVerifyCredentialsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserVerifyCredentialsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserVerifyCredentialsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmptyRpcResp()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserVerifyCredentialsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VerifyCredentials_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserVerifyCredentialsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroUserVerifyCredentialsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserVerifyCredentialsResult(%+v)", *p)
}

func (p *MicroUserVerifyCredentialsResult) DeepEqual(ano *MicroUserVerifyCredentialsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroUserVerifyCredentialsResult) Field0DeepEqual(src *common.EmptyRpcResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserFindUserArgs struct {
	Req *common.IdRpcReq `thrift:"req,1" frugal:"1,default,common.IdRpcReq" json:"req"`
}

func NewMicroUserFindUserArgs() *MicroUserFindUserArgs {
	return &MicroUserFindUserArgs{}
}

func (p *MicroUserFindUserArgs) InitDefault() {
	*p = MicroUserFindUserArgs{}
}

var MicroUserFindUserArgs_Req_DEFAULT *common.IdRpcReq

func (p *MicroUserFindUserArgs) GetReq() (v *common.IdRpcReq) {
	if !p.IsSetReq() {
		return MicroUserFindUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroUserFindUserArgs) SetReq(val *common.IdRpcReq) {
	p.Req = val
}

var fieldIDToName_MicroUserFindUserArgs = map[int16]string{
	1: "req",
}

func (p *MicroUserFindUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroUserFindUserArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserFindUserArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserFindUserArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common.NewIdRpcReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserFindUserArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FindUser_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserFindUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroUserFindUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserFindUserArgs(%+v)", *p)
}

func (p *MicroUserFindUserArgs) DeepEqual(ano *MicroUserFindUserArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroUserFindUserArgs) Field1DeepEqual(src *common.IdRpcReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserFindUserResult struct {
	Success *user.UserInfo `thrift:"success,0,optional" frugal:"0,optional,user.UserInfo" json:"success,omitempty"`
}

func NewMicroUserFindUserResult() *MicroUserFindUserResult {
	return &MicroUserFindUserResult{}
}

func (p *MicroUserFindUserResult) InitDefault() {
	*p = MicroUserFindUserResult{}
}

var MicroUserFindUserResult_Success_DEFAULT *user.UserInfo

func (p *MicroUserFindUserResult) GetSuccess() (v *user.UserInfo) {
	if !p.IsSetSuccess() {
		return MicroUserFindUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroUserFindUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserInfo)
}

var fieldIDToName_MicroUserFindUserResult = map[int16]string{
	0: "success",
}

func (p *MicroUserFindUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroUserFindUserResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserFindUserResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserFindUserResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = user.NewUserInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserFindUserResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FindUser_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserFindUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroUserFindUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserFindUserResult(%+v)", *p)
}

func (p *MicroUserFindUserResult) DeepEqual(ano *MicroUserFindUserResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroUserFindUserResult) Field0DeepEqual(src *user.UserInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserQueryUsersWithFilterArgs struct {
	Req *user.UsersFilter `thrift:"req,1" frugal:"1,default,user.UsersFilter" json:"req"`
}

func NewMicroUserQueryUsersWithFilterArgs() *MicroUserQueryUsersWithFilterArgs {
	return &MicroUserQueryUsersWithFilterArgs{}
}

func (p *MicroUserQueryUsersWithFilterArgs) InitDefault() {
	*p = MicroUserQueryUsersWithFilterArgs{}
}

var MicroUserQueryUsersWithFilterArgs_Req_DEFAULT *user.UsersFilter

func (p *MicroUserQueryUsersWithFilterArgs) GetReq() (v *user.UsersFilter) {
	if !p.IsSetReq() {
		return MicroUserQueryUsersWithFilterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroUserQueryUsersWithFilterArgs) SetReq(val *user.UsersFilter) {
	p.Req = val
}

var fieldIDToName_MicroUserQueryUsersWithFilterArgs = map[int16]string{
	1: "req",
}

func (p *MicroUserQueryUsersWithFilterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroUserQueryUsersWithFilterArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserQueryUsersWithFilterArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserQueryUsersWithFilterArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = user.NewUsersFilter()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserQueryUsersWithFilterArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryUsersWithFilter_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserQueryUsersWithFilterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroUserQueryUsersWithFilterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserQueryUsersWithFilterArgs(%+v)", *p)
}

func (p *MicroUserQueryUsersWithFilterArgs) DeepEqual(ano *MicroUserQueryUsersWithFilterArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroUserQueryUsersWithFilterArgs) Field1DeepEqual(src *user.UsersFilter) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserQueryUsersWithFilterResult struct {
	Success []*user.UserInfo `thrift:"success,0,optional" frugal:"0,optional,list<user.UserInfo>" json:"success,omitempty"`
}

func NewMicroUserQueryUsersWithFilterResult() *MicroUserQueryUsersWithFilterResult {
	return &MicroUserQueryUsersWithFilterResult{}
}

func (p *MicroUserQueryUsersWithFilterResult) InitDefault() {
	*p = MicroUserQueryUsersWithFilterResult{}
}

var MicroUserQueryUsersWithFilterResult_Success_DEFAULT []*user.UserInfo

func (p *MicroUserQueryUsersWithFilterResult) GetSuccess() (v []*user.UserInfo) {
	if !p.IsSetSuccess() {
		return MicroUserQueryUsersWithFilterResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroUserQueryUsersWithFilterResult) SetSuccess(x interface{}) {
	p.Success = x.([]*user.UserInfo)
}

var fieldIDToName_MicroUserQueryUsersWithFilterResult = map[int16]string{
	0: "success",
}

func (p *MicroUserQueryUsersWithFilterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroUserQueryUsersWithFilterResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserQueryUsersWithFilterResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserQueryUsersWithFilterResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Success = make([]*user.UserInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := user.NewUserInfo()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Success = append(p.Success, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserQueryUsersWithFilterResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryUsersWithFilter_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserQueryUsersWithFilterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return err
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroUserQueryUsersWithFilterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserQueryUsersWithFilterResult(%+v)", *p)
}

func (p *MicroUserQueryUsersWithFilterResult) DeepEqual(ano *MicroUserQueryUsersWithFilterResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroUserQueryUsersWithFilterResult) Field0DeepEqual(src []*user.UserInfo) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for i, v := range p.Success {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type MicroUserUpsertUserArgs struct {
	Req *user.UserInfo `thrift:"req,1" frugal:"1,default,user.UserInfo" json:"req"`
}

func NewMicroUserUpsertUserArgs() *MicroUserUpsertUserArgs {
	return &MicroUserUpsertUserArgs{}
}

func (p *MicroUserUpsertUserArgs) InitDefault() {
	*p = MicroUserUpsertUserArgs{}
}

var MicroUserUpsertUserArgs_Req_DEFAULT *user.UserInfo

func (p *MicroUserUpsertUserArgs) GetReq() (v *user.UserInfo) {
	if !p.IsSetReq() {
		return MicroUserUpsertUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroUserUpsertUserArgs) SetReq(val *user.UserInfo) {
	p.Req = val
}

var fieldIDToName_MicroUserUpsertUserArgs = map[int16]string{
	1: "req",
}

func (p *MicroUserUpsertUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroUserUpsertUserArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserUpsertUserArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserUpsertUserArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = user.NewUserInfo()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserUpsertUserArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpsertUser_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserUpsertUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroUserUpsertUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserUpsertUserArgs(%+v)", *p)
}

func (p *MicroUserUpsertUserArgs) DeepEqual(ano *MicroUserUpsertUserArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroUserUpsertUserArgs) Field1DeepEqual(src *user.UserInfo) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserUpsertUserResult struct {
	Success *user.UserInfo `thrift:"success,0,optional" frugal:"0,optional,user.UserInfo" json:"success,omitempty"`
}

func NewMicroUserUpsertUserResult() *MicroUserUpsertUserResult {
	return &MicroUserUpsertUserResult{}
}

func (p *MicroUserUpsertUserResult) InitDefault() {
	*p = MicroUserUpsertUserResult{}
}

var MicroUserUpsertUserResult_Success_DEFAULT *user.UserInfo

func (p *MicroUserUpsertUserResult) GetSuccess() (v *user.UserInfo) {
	if !p.IsSetSuccess() {
		return MicroUserUpsertUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroUserUpsertUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserInfo)
}

var fieldIDToName_MicroUserUpsertUserResult = map[int16]string{
	0: "success",
}

func (p *MicroUserUpsertUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroUserUpsertUserResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserUpsertUserResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserUpsertUserResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = user.NewUserInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserUpsertUserResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpsertUser_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserUpsertUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroUserUpsertUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserUpsertUserResult(%+v)", *p)
}

func (p *MicroUserUpsertUserResult) DeepEqual(ano *MicroUserUpsertUserResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroUserUpsertUserResult) Field0DeepEqual(src *user.UserInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserDeleteUserArgs struct {
	Req *common.IdRpcReq `thrift:"req,1" frugal:"1,default,common.IdRpcReq" json:"req"`
}

func NewMicroUserDeleteUserArgs() *MicroUserDeleteUserArgs {
	return &MicroUserDeleteUserArgs{}
}

func (p *MicroUserDeleteUserArgs) InitDefault() {
	*p = MicroUserDeleteUserArgs{}
}

var MicroUserDeleteUserArgs_Req_DEFAULT *common.IdRpcReq

func (p *MicroUserDeleteUserArgs) GetReq() (v *common.IdRpcReq) {
	if !p.IsSetReq() {
		return MicroUserDeleteUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MicroUserDeleteUserArgs) SetReq(val *common.IdRpcReq) {
	p.Req = val
}

var fieldIDToName_MicroUserDeleteUserArgs = map[int16]string{
	1: "req",
}

func (p *MicroUserDeleteUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MicroUserDeleteUserArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserDeleteUserArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserDeleteUserArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common.NewIdRpcReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserDeleteUserArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteUser_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserDeleteUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MicroUserDeleteUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserDeleteUserArgs(%+v)", *p)
}

func (p *MicroUserDeleteUserArgs) DeepEqual(ano *MicroUserDeleteUserArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MicroUserDeleteUserArgs) Field1DeepEqual(src *common.IdRpcReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MicroUserDeleteUserResult struct {
	Success *common.EmptyRpcResp `thrift:"success,0,optional" frugal:"0,optional,common.EmptyRpcResp" json:"success,omitempty"`
}

func NewMicroUserDeleteUserResult() *MicroUserDeleteUserResult {
	return &MicroUserDeleteUserResult{}
}

func (p *MicroUserDeleteUserResult) InitDefault() {
	*p = MicroUserDeleteUserResult{}
}

var MicroUserDeleteUserResult_Success_DEFAULT *common.EmptyRpcResp

func (p *MicroUserDeleteUserResult) GetSuccess() (v *common.EmptyRpcResp) {
	if !p.IsSetSuccess() {
		return MicroUserDeleteUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MicroUserDeleteUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.EmptyRpcResp)
}

var fieldIDToName_MicroUserDeleteUserResult = map[int16]string{
	0: "success",
}

func (p *MicroUserDeleteUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MicroUserDeleteUserResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MicroUserDeleteUserResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MicroUserDeleteUserResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmptyRpcResp()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MicroUserDeleteUserResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteUser_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MicroUserDeleteUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MicroUserDeleteUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MicroUserDeleteUserResult(%+v)", *p)
}

func (p *MicroUserDeleteUserResult) DeepEqual(ano *MicroUserDeleteUserResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MicroUserDeleteUserResult) Field0DeepEqual(src *common.EmptyRpcResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
