// Code generated by Kitex v0.6.1. DO NOT EDIT.

package microuser

import (
	"context"
	common "git.zqbjj.top/pet/services/cmd/http/kitex_gen/common"
	micro_user "git.zqbjj.top/pet/services/cmd/http/kitex_gen/micro_user"
	user "git.zqbjj.top/pet/services/cmd/http/kitex_gen/user"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return microUserServiceInfo
}

var microUserServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "micro_user"
	handlerType := (*micro_user.MicroUser)(nil)
	methods := map[string]kitex.MethodInfo{
		"FreezePatrolBeforeAuth": kitex.NewMethodInfo(freezePatrolBeforeAuthHandler, newMicroUserFreezePatrolBeforeAuthArgs, newMicroUserFreezePatrolBeforeAuthResult, false),
		"FreezePatrolAfterAuth":  kitex.NewMethodInfo(freezePatrolAfterAuthHandler, newMicroUserFreezePatrolAfterAuthArgs, newMicroUserFreezePatrolAfterAuthResult, false),
		"VerifyCredentials":      kitex.NewMethodInfo(verifyCredentialsHandler, newMicroUserVerifyCredentialsArgs, newMicroUserVerifyCredentialsResult, false),
		"FindUser":               kitex.NewMethodInfo(findUserHandler, newMicroUserFindUserArgs, newMicroUserFindUserResult, false),
		"QueryUsersWithFilter":   kitex.NewMethodInfo(queryUsersWithFilterHandler, newMicroUserQueryUsersWithFilterArgs, newMicroUserQueryUsersWithFilterResult, false),
		"UpsertUser":             kitex.NewMethodInfo(upsertUserHandler, newMicroUserUpsertUserArgs, newMicroUserUpsertUserResult, false),
		"DeleteUser":             kitex.NewMethodInfo(deleteUserHandler, newMicroUserDeleteUserArgs, newMicroUserDeleteUserResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "micro_user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func freezePatrolBeforeAuthHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*micro_user.MicroUserFreezePatrolBeforeAuthArgs)
	realResult := result.(*micro_user.MicroUserFreezePatrolBeforeAuthResult)
	success, err := handler.(micro_user.MicroUser).FreezePatrolBeforeAuth(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMicroUserFreezePatrolBeforeAuthArgs() interface{} {
	return micro_user.NewMicroUserFreezePatrolBeforeAuthArgs()
}

func newMicroUserFreezePatrolBeforeAuthResult() interface{} {
	return micro_user.NewMicroUserFreezePatrolBeforeAuthResult()
}

func freezePatrolAfterAuthHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*micro_user.MicroUserFreezePatrolAfterAuthArgs)
	realResult := result.(*micro_user.MicroUserFreezePatrolAfterAuthResult)
	success, err := handler.(micro_user.MicroUser).FreezePatrolAfterAuth(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMicroUserFreezePatrolAfterAuthArgs() interface{} {
	return micro_user.NewMicroUserFreezePatrolAfterAuthArgs()
}

func newMicroUserFreezePatrolAfterAuthResult() interface{} {
	return micro_user.NewMicroUserFreezePatrolAfterAuthResult()
}

func verifyCredentialsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*micro_user.MicroUserVerifyCredentialsArgs)
	realResult := result.(*micro_user.MicroUserVerifyCredentialsResult)
	success, err := handler.(micro_user.MicroUser).VerifyCredentials(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMicroUserVerifyCredentialsArgs() interface{} {
	return micro_user.NewMicroUserVerifyCredentialsArgs()
}

func newMicroUserVerifyCredentialsResult() interface{} {
	return micro_user.NewMicroUserVerifyCredentialsResult()
}

func findUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*micro_user.MicroUserFindUserArgs)
	realResult := result.(*micro_user.MicroUserFindUserResult)
	success, err := handler.(micro_user.MicroUser).FindUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMicroUserFindUserArgs() interface{} {
	return micro_user.NewMicroUserFindUserArgs()
}

func newMicroUserFindUserResult() interface{} {
	return micro_user.NewMicroUserFindUserResult()
}

func queryUsersWithFilterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*micro_user.MicroUserQueryUsersWithFilterArgs)
	realResult := result.(*micro_user.MicroUserQueryUsersWithFilterResult)
	success, err := handler.(micro_user.MicroUser).QueryUsersWithFilter(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMicroUserQueryUsersWithFilterArgs() interface{} {
	return micro_user.NewMicroUserQueryUsersWithFilterArgs()
}

func newMicroUserQueryUsersWithFilterResult() interface{} {
	return micro_user.NewMicroUserQueryUsersWithFilterResult()
}

func upsertUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*micro_user.MicroUserUpsertUserArgs)
	realResult := result.(*micro_user.MicroUserUpsertUserResult)
	success, err := handler.(micro_user.MicroUser).UpsertUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMicroUserUpsertUserArgs() interface{} {
	return micro_user.NewMicroUserUpsertUserArgs()
}

func newMicroUserUpsertUserResult() interface{} {
	return micro_user.NewMicroUserUpsertUserResult()
}

func deleteUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*micro_user.MicroUserDeleteUserArgs)
	realResult := result.(*micro_user.MicroUserDeleteUserResult)
	success, err := handler.(micro_user.MicroUser).DeleteUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMicroUserDeleteUserArgs() interface{} {
	return micro_user.NewMicroUserDeleteUserArgs()
}

func newMicroUserDeleteUserResult() interface{} {
	return micro_user.NewMicroUserDeleteUserResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FreezePatrolBeforeAuth(ctx context.Context, req *micro_user.FreezeRpcReq) (r *micro_user.FreezeRpcResp, err error) {
	var _args micro_user.MicroUserFreezePatrolBeforeAuthArgs
	_args.Req = req
	var _result micro_user.MicroUserFreezePatrolBeforeAuthResult
	if err = p.c.Call(ctx, "FreezePatrolBeforeAuth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FreezePatrolAfterAuth(ctx context.Context, req *common.IdRpcReq) (r *micro_user.FreezeRpcResp, err error) {
	var _args micro_user.MicroUserFreezePatrolAfterAuthArgs
	_args.Req = req
	var _result micro_user.MicroUserFreezePatrolAfterAuthResult
	if err = p.c.Call(ctx, "FreezePatrolAfterAuth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VerifyCredentials(ctx context.Context, req *micro_user.CredentialRpcReq) (r *common.EmptyRpcResp, err error) {
	var _args micro_user.MicroUserVerifyCredentialsArgs
	_args.Req = req
	var _result micro_user.MicroUserVerifyCredentialsResult
	if err = p.c.Call(ctx, "VerifyCredentials", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FindUser(ctx context.Context, req *common.IdRpcReq) (r *user.UserInfo, err error) {
	var _args micro_user.MicroUserFindUserArgs
	_args.Req = req
	var _result micro_user.MicroUserFindUserResult
	if err = p.c.Call(ctx, "FindUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryUsersWithFilter(ctx context.Context, req *user.UsersFilter) (r []*user.UserInfo, err error) {
	var _args micro_user.MicroUserQueryUsersWithFilterArgs
	_args.Req = req
	var _result micro_user.MicroUserQueryUsersWithFilterResult
	if err = p.c.Call(ctx, "QueryUsersWithFilter", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpsertUser(ctx context.Context, req *user.UserInfo) (r *user.UserInfo, err error) {
	var _args micro_user.MicroUserUpsertUserArgs
	_args.Req = req
	var _result micro_user.MicroUserUpsertUserResult
	if err = p.c.Call(ctx, "UpsertUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteUser(ctx context.Context, req *common.IdRpcReq) (r *common.EmptyRpcResp, err error) {
	var _args micro_user.MicroUserDeleteUserArgs
	_args.Req = req
	var _result micro_user.MicroUserDeleteUserResult
	if err = p.c.Call(ctx, "DeleteUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
