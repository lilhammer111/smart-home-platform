// Code generated by thriftgo (0.3.3). DO NOT EDIT.

package device

import (
	"context"
	"fmt"
	"git.zqbjj.top/pet/services/cmd/http/kitex_gen/common"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type DeviceFilter struct {
	State     *int8    `thrift:"State,1,optional" frugal:"1,optional,i8" json:"State,omitempty"`
	Page      *int16   `thrift:"Page,2,optional" frugal:"2,optional,i16" json:"Page,omitempty"`
	Limit     *int16   `thrift:"Limit,3,optional" frugal:"3,optional,i16" json:"Limit,omitempty"`
	Sorts     []string `thrift:"Sorts,4,optional" frugal:"4,optional,list<string>" json:"Sorts,omitempty"`
	Search    *string  `thrift:"Search,5,optional" frugal:"5,optional,string" json:"Search,omitempty"`
	StartDate *string  `thrift:"StartDate,6,optional" frugal:"6,optional,string" json:"StartDate,omitempty"`
	EndDate   *string  `thrift:"EndDate,7,optional" frugal:"7,optional,string" json:"EndDate,omitempty"`
}

func NewDeviceFilter() *DeviceFilter {
	return &DeviceFilter{}
}

func (p *DeviceFilter) InitDefault() {
	*p = DeviceFilter{}
}

var DeviceFilter_State_DEFAULT int8

func (p *DeviceFilter) GetState() (v int8) {
	if !p.IsSetState() {
		return DeviceFilter_State_DEFAULT
	}
	return *p.State
}

var DeviceFilter_Page_DEFAULT int16

func (p *DeviceFilter) GetPage() (v int16) {
	if !p.IsSetPage() {
		return DeviceFilter_Page_DEFAULT
	}
	return *p.Page
}

var DeviceFilter_Limit_DEFAULT int16

func (p *DeviceFilter) GetLimit() (v int16) {
	if !p.IsSetLimit() {
		return DeviceFilter_Limit_DEFAULT
	}
	return *p.Limit
}

var DeviceFilter_Sorts_DEFAULT []string

func (p *DeviceFilter) GetSorts() (v []string) {
	if !p.IsSetSorts() {
		return DeviceFilter_Sorts_DEFAULT
	}
	return p.Sorts
}

var DeviceFilter_Search_DEFAULT string

func (p *DeviceFilter) GetSearch() (v string) {
	if !p.IsSetSearch() {
		return DeviceFilter_Search_DEFAULT
	}
	return *p.Search
}

var DeviceFilter_StartDate_DEFAULT string

func (p *DeviceFilter) GetStartDate() (v string) {
	if !p.IsSetStartDate() {
		return DeviceFilter_StartDate_DEFAULT
	}
	return *p.StartDate
}

var DeviceFilter_EndDate_DEFAULT string

func (p *DeviceFilter) GetEndDate() (v string) {
	if !p.IsSetEndDate() {
		return DeviceFilter_EndDate_DEFAULT
	}
	return *p.EndDate
}
func (p *DeviceFilter) SetState(val *int8) {
	p.State = val
}
func (p *DeviceFilter) SetPage(val *int16) {
	p.Page = val
}
func (p *DeviceFilter) SetLimit(val *int16) {
	p.Limit = val
}
func (p *DeviceFilter) SetSorts(val []string) {
	p.Sorts = val
}
func (p *DeviceFilter) SetSearch(val *string) {
	p.Search = val
}
func (p *DeviceFilter) SetStartDate(val *string) {
	p.StartDate = val
}
func (p *DeviceFilter) SetEndDate(val *string) {
	p.EndDate = val
}

var fieldIDToName_DeviceFilter = map[int16]string{
	1: "State",
	2: "Page",
	3: "Limit",
	4: "Sorts",
	5: "Search",
	6: "StartDate",
	7: "EndDate",
}

func (p *DeviceFilter) IsSetState() bool {
	return p.State != nil
}

func (p *DeviceFilter) IsSetPage() bool {
	return p.Page != nil
}

func (p *DeviceFilter) IsSetLimit() bool {
	return p.Limit != nil
}

func (p *DeviceFilter) IsSetSorts() bool {
	return p.Sorts != nil
}

func (p *DeviceFilter) IsSetSearch() bool {
	return p.Search != nil
}

func (p *DeviceFilter) IsSetStartDate() bool {
	return p.StartDate != nil
}

func (p *DeviceFilter) IsSetEndDate() bool {
	return p.EndDate != nil
}

func (p *DeviceFilter) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeviceFilter[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeviceFilter) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.State = &v
	}
	return nil
}
func (p *DeviceFilter) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		p.Page = &v
	}
	return nil
}
func (p *DeviceFilter) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		p.Limit = &v
	}
	return nil
}
func (p *DeviceFilter) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Sorts = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Sorts = append(p.Sorts, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *DeviceFilter) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Search = &v
	}
	return nil
}
func (p *DeviceFilter) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StartDate = &v
	}
	return nil
}
func (p *DeviceFilter) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.EndDate = &v
	}
	return nil
}

func (p *DeviceFilter) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeviceFilter"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeviceFilter) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetState() {
		if err = oprot.WriteFieldBegin("State", thrift.BYTE, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteByte(*p.State); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DeviceFilter) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("Page", thrift.I16, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DeviceFilter) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err = oprot.WriteFieldBegin("Limit", thrift.I16, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.Limit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *DeviceFilter) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSorts() {
		if err = oprot.WriteFieldBegin("Sorts", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Sorts)); err != nil {
			return err
		}
		for _, v := range p.Sorts {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *DeviceFilter) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSearch() {
		if err = oprot.WriteFieldBegin("Search", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Search); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *DeviceFilter) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartDate() {
		if err = oprot.WriteFieldBegin("StartDate", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StartDate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *DeviceFilter) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndDate() {
		if err = oprot.WriteFieldBegin("EndDate", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EndDate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *DeviceFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceFilter(%+v)", *p)
}

func (p *DeviceFilter) DeepEqual(ano *DeviceFilter) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.State) {
		return false
	}
	if !p.Field2DeepEqual(ano.Page) {
		return false
	}
	if !p.Field3DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field4DeepEqual(ano.Sorts) {
		return false
	}
	if !p.Field5DeepEqual(ano.Search) {
		return false
	}
	if !p.Field6DeepEqual(ano.StartDate) {
		return false
	}
	if !p.Field7DeepEqual(ano.EndDate) {
		return false
	}
	return true
}

func (p *DeviceFilter) Field1DeepEqual(src *int8) bool {

	if p.State == src {
		return true
	} else if p.State == nil || src == nil {
		return false
	}
	if *p.State != *src {
		return false
	}
	return true
}
func (p *DeviceFilter) Field2DeepEqual(src *int16) bool {

	if p.Page == src {
		return true
	} else if p.Page == nil || src == nil {
		return false
	}
	if *p.Page != *src {
		return false
	}
	return true
}
func (p *DeviceFilter) Field3DeepEqual(src *int16) bool {

	if p.Limit == src {
		return true
	} else if p.Limit == nil || src == nil {
		return false
	}
	if *p.Limit != *src {
		return false
	}
	return true
}
func (p *DeviceFilter) Field4DeepEqual(src []string) bool {

	if len(p.Sorts) != len(src) {
		return false
	}
	for i, v := range p.Sorts {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *DeviceFilter) Field5DeepEqual(src *string) bool {

	if p.Search == src {
		return true
	} else if p.Search == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Search, *src) != 0 {
		return false
	}
	return true
}
func (p *DeviceFilter) Field6DeepEqual(src *string) bool {

	if p.StartDate == src {
		return true
	} else if p.StartDate == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StartDate, *src) != 0 {
		return false
	}
	return true
}
func (p *DeviceFilter) Field7DeepEqual(src *string) bool {

	if p.EndDate == src {
		return true
	} else if p.EndDate == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EndDate, *src) != 0 {
		return false
	}
	return true
}

type DeviceInfo struct {
	Id              *int32 `thrift:"Id,1,optional" frugal:"1,optional,i32" json:"Id,omitempty"`
	OwnerId         int32  `thrift:"OwnerId,10,required" frugal:"10,required,i32" json:"OwnerId"`
	ProductId       int32  `thrift:"ProductId,11,required" frugal:"11,required,i32" json:"ProductId"`
	SerialNo        string `thrift:"SerialNo,2,required" frugal:"2,required,string" json:"SerialNo"`
	Name            string `thrift:"Name,3,required" frugal:"3,required,string" json:"Name"`
	State           int8   `thrift:"State,4,required" frugal:"4,required,i8" json:"State"`
	LocationId      int8   `thrift:"LocationId,6,required" frugal:"6,required,i8" json:"LocationId"`
	HardwareVersion string `thrift:"HardwareVersion,7,required" frugal:"7,required,string" json:"HardwareVersion"`
	SoftwareVersion string `thrift:"SoftwareVersion,8,required" frugal:"8,required,string" json:"SoftwareVersion"`
	Desc            string `thrift:"Desc,9,required" frugal:"9,required,string" json:"Desc"`
}

func NewDeviceInfo() *DeviceInfo {
	return &DeviceInfo{}
}

func (p *DeviceInfo) InitDefault() {
	*p = DeviceInfo{}
}

var DeviceInfo_Id_DEFAULT int32

func (p *DeviceInfo) GetId() (v int32) {
	if !p.IsSetId() {
		return DeviceInfo_Id_DEFAULT
	}
	return *p.Id
}

func (p *DeviceInfo) GetOwnerId() (v int32) {
	return p.OwnerId
}

func (p *DeviceInfo) GetProductId() (v int32) {
	return p.ProductId
}

func (p *DeviceInfo) GetSerialNo() (v string) {
	return p.SerialNo
}

func (p *DeviceInfo) GetName() (v string) {
	return p.Name
}

func (p *DeviceInfo) GetState() (v int8) {
	return p.State
}

func (p *DeviceInfo) GetLocationId() (v int8) {
	return p.LocationId
}

func (p *DeviceInfo) GetHardwareVersion() (v string) {
	return p.HardwareVersion
}

func (p *DeviceInfo) GetSoftwareVersion() (v string) {
	return p.SoftwareVersion
}

func (p *DeviceInfo) GetDesc() (v string) {
	return p.Desc
}
func (p *DeviceInfo) SetId(val *int32) {
	p.Id = val
}
func (p *DeviceInfo) SetOwnerId(val int32) {
	p.OwnerId = val
}
func (p *DeviceInfo) SetProductId(val int32) {
	p.ProductId = val
}
func (p *DeviceInfo) SetSerialNo(val string) {
	p.SerialNo = val
}
func (p *DeviceInfo) SetName(val string) {
	p.Name = val
}
func (p *DeviceInfo) SetState(val int8) {
	p.State = val
}
func (p *DeviceInfo) SetLocationId(val int8) {
	p.LocationId = val
}
func (p *DeviceInfo) SetHardwareVersion(val string) {
	p.HardwareVersion = val
}
func (p *DeviceInfo) SetSoftwareVersion(val string) {
	p.SoftwareVersion = val
}
func (p *DeviceInfo) SetDesc(val string) {
	p.Desc = val
}

var fieldIDToName_DeviceInfo = map[int16]string{
	1:  "Id",
	10: "OwnerId",
	11: "ProductId",
	2:  "SerialNo",
	3:  "Name",
	4:  "State",
	6:  "LocationId",
	7:  "HardwareVersion",
	8:  "SoftwareVersion",
	9:  "Desc",
}

func (p *DeviceInfo) IsSetId() bool {
	return p.Id != nil
}

func (p *DeviceInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetOwnerId bool = false
	var issetProductId bool = false
	var issetSerialNo bool = false
	var issetName bool = false
	var issetState bool = false
	var issetLocationId bool = false
	var issetHardwareVersion bool = false
	var issetSoftwareVersion bool = false
	var issetDesc bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetOwnerId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetProductId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSerialNo = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetState = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetLocationId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetHardwareVersion = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetSoftwareVersion = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetDesc = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetOwnerId {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetProductId {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetSerialNo {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetState {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetLocationId {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetHardwareVersion {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetSoftwareVersion {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetDesc {
		fieldId = 9
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeviceInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DeviceInfo[fieldId]))
}

func (p *DeviceInfo) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = &v
	}
	return nil
}
func (p *DeviceInfo) ReadField10(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.OwnerId = v
	}
	return nil
}
func (p *DeviceInfo) ReadField11(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ProductId = v
	}
	return nil
}
func (p *DeviceInfo) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SerialNo = v
	}
	return nil
}
func (p *DeviceInfo) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}
func (p *DeviceInfo) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.State = v
	}
	return nil
}
func (p *DeviceInfo) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.LocationId = v
	}
	return nil
}
func (p *DeviceInfo) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.HardwareVersion = v
	}
	return nil
}
func (p *DeviceInfo) ReadField8(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SoftwareVersion = v
	}
	return nil
}
func (p *DeviceInfo) ReadField9(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Desc = v
	}
	return nil
}

func (p *DeviceInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeviceInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeviceInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("Id", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DeviceInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("OwnerId", thrift.I32, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.OwnerId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *DeviceInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ProductId", thrift.I32, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ProductId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *DeviceInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SerialNo", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SerialNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DeviceInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *DeviceInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("State", thrift.BYTE, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.State); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *DeviceInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LocationId", thrift.BYTE, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.LocationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *DeviceInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("HardwareVersion", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.HardwareVersion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *DeviceInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SoftwareVersion", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SoftwareVersion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *DeviceInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Desc", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Desc); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *DeviceInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceInfo(%+v)", *p)
}

func (p *DeviceInfo) DeepEqual(ano *DeviceInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field10DeepEqual(ano.OwnerId) {
		return false
	}
	if !p.Field11DeepEqual(ano.ProductId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SerialNo) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.State) {
		return false
	}
	if !p.Field6DeepEqual(ano.LocationId) {
		return false
	}
	if !p.Field7DeepEqual(ano.HardwareVersion) {
		return false
	}
	if !p.Field8DeepEqual(ano.SoftwareVersion) {
		return false
	}
	if !p.Field9DeepEqual(ano.Desc) {
		return false
	}
	return true
}

func (p *DeviceInfo) Field1DeepEqual(src *int32) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *DeviceInfo) Field10DeepEqual(src int32) bool {

	if p.OwnerId != src {
		return false
	}
	return true
}
func (p *DeviceInfo) Field11DeepEqual(src int32) bool {

	if p.ProductId != src {
		return false
	}
	return true
}
func (p *DeviceInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.SerialNo, src) != 0 {
		return false
	}
	return true
}
func (p *DeviceInfo) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *DeviceInfo) Field4DeepEqual(src int8) bool {

	if p.State != src {
		return false
	}
	return true
}
func (p *DeviceInfo) Field6DeepEqual(src int8) bool {

	if p.LocationId != src {
		return false
	}
	return true
}
func (p *DeviceInfo) Field7DeepEqual(src string) bool {

	if strings.Compare(p.HardwareVersion, src) != 0 {
		return false
	}
	return true
}
func (p *DeviceInfo) Field8DeepEqual(src string) bool {

	if strings.Compare(p.SoftwareVersion, src) != 0 {
		return false
	}
	return true
}
func (p *DeviceInfo) Field9DeepEqual(src string) bool {

	if strings.Compare(p.Desc, src) != 0 {
		return false
	}
	return true
}

type Device interface {
	GetDeviceList(ctx context.Context, req *DeviceFilter) (r []*DeviceInfo, err error)

	GetDeviceDetail(ctx context.Context, req *common.Req) (r *DeviceInfo, err error)

	UpdateDeviceInfo(ctx context.Context, req *DeviceInfo) (r *DeviceInfo, err error)

	BindDevice(ctx context.Context, req *DeviceInfo) (r *DeviceInfo, err error)

	UnbindDevice(ctx context.Context, req *common.Req) (r *common.Empty, err error)
}

type DeviceClient struct {
	c thrift.TClient
}

func NewDeviceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DeviceClient {
	return &DeviceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewDeviceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DeviceClient {
	return &DeviceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewDeviceClient(c thrift.TClient) *DeviceClient {
	return &DeviceClient{
		c: c,
	}
}

func (p *DeviceClient) Client_() thrift.TClient {
	return p.c
}

func (p *DeviceClient) GetDeviceList(ctx context.Context, req *DeviceFilter) (r []*DeviceInfo, err error) {
	var _args DeviceGetDeviceListArgs
	_args.Req = req
	var _result DeviceGetDeviceListResult
	if err = p.Client_().Call(ctx, "GetDeviceList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DeviceClient) GetDeviceDetail(ctx context.Context, req *common.Req) (r *DeviceInfo, err error) {
	var _args DeviceGetDeviceDetailArgs
	_args.Req = req
	var _result DeviceGetDeviceDetailResult
	if err = p.Client_().Call(ctx, "GetDeviceDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DeviceClient) UpdateDeviceInfo(ctx context.Context, req *DeviceInfo) (r *DeviceInfo, err error) {
	var _args DeviceUpdateDeviceInfoArgs
	_args.Req = req
	var _result DeviceUpdateDeviceInfoResult
	if err = p.Client_().Call(ctx, "UpdateDeviceInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DeviceClient) BindDevice(ctx context.Context, req *DeviceInfo) (r *DeviceInfo, err error) {
	var _args DeviceBindDeviceArgs
	_args.Req = req
	var _result DeviceBindDeviceResult
	if err = p.Client_().Call(ctx, "BindDevice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DeviceClient) UnbindDevice(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args DeviceUnbindDeviceArgs
	_args.Req = req
	var _result DeviceUnbindDeviceResult
	if err = p.Client_().Call(ctx, "UnbindDevice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type DeviceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      Device
}

func (p *DeviceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *DeviceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *DeviceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewDeviceProcessor(handler Device) *DeviceProcessor {
	self := &DeviceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetDeviceList", &deviceProcessorGetDeviceList{handler: handler})
	self.AddToProcessorMap("GetDeviceDetail", &deviceProcessorGetDeviceDetail{handler: handler})
	self.AddToProcessorMap("UpdateDeviceInfo", &deviceProcessorUpdateDeviceInfo{handler: handler})
	self.AddToProcessorMap("BindDevice", &deviceProcessorBindDevice{handler: handler})
	self.AddToProcessorMap("UnbindDevice", &deviceProcessorUnbindDevice{handler: handler})
	return self
}
func (p *DeviceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type deviceProcessorGetDeviceList struct {
	handler Device
}

func (p *deviceProcessorGetDeviceList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeviceGetDeviceListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDeviceList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DeviceGetDeviceListResult{}
	var retval []*DeviceInfo
	if retval, err2 = p.handler.GetDeviceList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDeviceList: "+err2.Error())
		oprot.WriteMessageBegin("GetDeviceList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDeviceList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type deviceProcessorGetDeviceDetail struct {
	handler Device
}

func (p *deviceProcessorGetDeviceDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeviceGetDeviceDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDeviceDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DeviceGetDeviceDetailResult{}
	var retval *DeviceInfo
	if retval, err2 = p.handler.GetDeviceDetail(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDeviceDetail: "+err2.Error())
		oprot.WriteMessageBegin("GetDeviceDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDeviceDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type deviceProcessorUpdateDeviceInfo struct {
	handler Device
}

func (p *deviceProcessorUpdateDeviceInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeviceUpdateDeviceInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateDeviceInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DeviceUpdateDeviceInfoResult{}
	var retval *DeviceInfo
	if retval, err2 = p.handler.UpdateDeviceInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateDeviceInfo: "+err2.Error())
		oprot.WriteMessageBegin("UpdateDeviceInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateDeviceInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type deviceProcessorBindDevice struct {
	handler Device
}

func (p *deviceProcessorBindDevice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeviceBindDeviceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BindDevice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DeviceBindDeviceResult{}
	var retval *DeviceInfo
	if retval, err2 = p.handler.BindDevice(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BindDevice: "+err2.Error())
		oprot.WriteMessageBegin("BindDevice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BindDevice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type deviceProcessorUnbindDevice struct {
	handler Device
}

func (p *deviceProcessorUnbindDevice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeviceUnbindDeviceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UnbindDevice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DeviceUnbindDeviceResult{}
	var retval *common.Empty
	if retval, err2 = p.handler.UnbindDevice(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UnbindDevice: "+err2.Error())
		oprot.WriteMessageBegin("UnbindDevice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UnbindDevice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type DeviceGetDeviceListArgs struct {
	Req *DeviceFilter `thrift:"req,1" frugal:"1,default,DeviceFilter" json:"req"`
}

func NewDeviceGetDeviceListArgs() *DeviceGetDeviceListArgs {
	return &DeviceGetDeviceListArgs{}
}

func (p *DeviceGetDeviceListArgs) InitDefault() {
	*p = DeviceGetDeviceListArgs{}
}

var DeviceGetDeviceListArgs_Req_DEFAULT *DeviceFilter

func (p *DeviceGetDeviceListArgs) GetReq() (v *DeviceFilter) {
	if !p.IsSetReq() {
		return DeviceGetDeviceListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DeviceGetDeviceListArgs) SetReq(val *DeviceFilter) {
	p.Req = val
}

var fieldIDToName_DeviceGetDeviceListArgs = map[int16]string{
	1: "req",
}

func (p *DeviceGetDeviceListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeviceGetDeviceListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeviceGetDeviceListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeviceGetDeviceListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewDeviceFilter()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeviceGetDeviceListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDeviceList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeviceGetDeviceListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeviceGetDeviceListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceGetDeviceListArgs(%+v)", *p)
}

func (p *DeviceGetDeviceListArgs) DeepEqual(ano *DeviceGetDeviceListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DeviceGetDeviceListArgs) Field1DeepEqual(src *DeviceFilter) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DeviceGetDeviceListResult struct {
	Success []*DeviceInfo `thrift:"success,0,optional" frugal:"0,optional,list<DeviceInfo>" json:"success,omitempty"`
}

func NewDeviceGetDeviceListResult() *DeviceGetDeviceListResult {
	return &DeviceGetDeviceListResult{}
}

func (p *DeviceGetDeviceListResult) InitDefault() {
	*p = DeviceGetDeviceListResult{}
}

var DeviceGetDeviceListResult_Success_DEFAULT []*DeviceInfo

func (p *DeviceGetDeviceListResult) GetSuccess() (v []*DeviceInfo) {
	if !p.IsSetSuccess() {
		return DeviceGetDeviceListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DeviceGetDeviceListResult) SetSuccess(x interface{}) {
	p.Success = x.([]*DeviceInfo)
}

var fieldIDToName_DeviceGetDeviceListResult = map[int16]string{
	0: "success",
}

func (p *DeviceGetDeviceListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeviceGetDeviceListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeviceGetDeviceListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeviceGetDeviceListResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Success = make([]*DeviceInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewDeviceInfo()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Success = append(p.Success, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *DeviceGetDeviceListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDeviceList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeviceGetDeviceListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return err
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DeviceGetDeviceListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceGetDeviceListResult(%+v)", *p)
}

func (p *DeviceGetDeviceListResult) DeepEqual(ano *DeviceGetDeviceListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DeviceGetDeviceListResult) Field0DeepEqual(src []*DeviceInfo) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for i, v := range p.Success {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type DeviceGetDeviceDetailArgs struct {
	Req *common.Req `thrift:"req,1" frugal:"1,default,common.Req" json:"req"`
}

func NewDeviceGetDeviceDetailArgs() *DeviceGetDeviceDetailArgs {
	return &DeviceGetDeviceDetailArgs{}
}

func (p *DeviceGetDeviceDetailArgs) InitDefault() {
	*p = DeviceGetDeviceDetailArgs{}
}

var DeviceGetDeviceDetailArgs_Req_DEFAULT *common.Req

func (p *DeviceGetDeviceDetailArgs) GetReq() (v *common.Req) {
	if !p.IsSetReq() {
		return DeviceGetDeviceDetailArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DeviceGetDeviceDetailArgs) SetReq(val *common.Req) {
	p.Req = val
}

var fieldIDToName_DeviceGetDeviceDetailArgs = map[int16]string{
	1: "req",
}

func (p *DeviceGetDeviceDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeviceGetDeviceDetailArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeviceGetDeviceDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeviceGetDeviceDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common.NewReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeviceGetDeviceDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDeviceDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeviceGetDeviceDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeviceGetDeviceDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceGetDeviceDetailArgs(%+v)", *p)
}

func (p *DeviceGetDeviceDetailArgs) DeepEqual(ano *DeviceGetDeviceDetailArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DeviceGetDeviceDetailArgs) Field1DeepEqual(src *common.Req) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DeviceGetDeviceDetailResult struct {
	Success *DeviceInfo `thrift:"success,0,optional" frugal:"0,optional,DeviceInfo" json:"success,omitempty"`
}

func NewDeviceGetDeviceDetailResult() *DeviceGetDeviceDetailResult {
	return &DeviceGetDeviceDetailResult{}
}

func (p *DeviceGetDeviceDetailResult) InitDefault() {
	*p = DeviceGetDeviceDetailResult{}
}

var DeviceGetDeviceDetailResult_Success_DEFAULT *DeviceInfo

func (p *DeviceGetDeviceDetailResult) GetSuccess() (v *DeviceInfo) {
	if !p.IsSetSuccess() {
		return DeviceGetDeviceDetailResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DeviceGetDeviceDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeviceInfo)
}

var fieldIDToName_DeviceGetDeviceDetailResult = map[int16]string{
	0: "success",
}

func (p *DeviceGetDeviceDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeviceGetDeviceDetailResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeviceGetDeviceDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeviceGetDeviceDetailResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDeviceInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeviceGetDeviceDetailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDeviceDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeviceGetDeviceDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DeviceGetDeviceDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceGetDeviceDetailResult(%+v)", *p)
}

func (p *DeviceGetDeviceDetailResult) DeepEqual(ano *DeviceGetDeviceDetailResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DeviceGetDeviceDetailResult) Field0DeepEqual(src *DeviceInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DeviceUpdateDeviceInfoArgs struct {
	Req *DeviceInfo `thrift:"req,1" frugal:"1,default,DeviceInfo" json:"req"`
}

func NewDeviceUpdateDeviceInfoArgs() *DeviceUpdateDeviceInfoArgs {
	return &DeviceUpdateDeviceInfoArgs{}
}

func (p *DeviceUpdateDeviceInfoArgs) InitDefault() {
	*p = DeviceUpdateDeviceInfoArgs{}
}

var DeviceUpdateDeviceInfoArgs_Req_DEFAULT *DeviceInfo

func (p *DeviceUpdateDeviceInfoArgs) GetReq() (v *DeviceInfo) {
	if !p.IsSetReq() {
		return DeviceUpdateDeviceInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DeviceUpdateDeviceInfoArgs) SetReq(val *DeviceInfo) {
	p.Req = val
}

var fieldIDToName_DeviceUpdateDeviceInfoArgs = map[int16]string{
	1: "req",
}

func (p *DeviceUpdateDeviceInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeviceUpdateDeviceInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeviceUpdateDeviceInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeviceUpdateDeviceInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewDeviceInfo()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeviceUpdateDeviceInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDeviceInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeviceUpdateDeviceInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeviceUpdateDeviceInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceUpdateDeviceInfoArgs(%+v)", *p)
}

func (p *DeviceUpdateDeviceInfoArgs) DeepEqual(ano *DeviceUpdateDeviceInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DeviceUpdateDeviceInfoArgs) Field1DeepEqual(src *DeviceInfo) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DeviceUpdateDeviceInfoResult struct {
	Success *DeviceInfo `thrift:"success,0,optional" frugal:"0,optional,DeviceInfo" json:"success,omitempty"`
}

func NewDeviceUpdateDeviceInfoResult() *DeviceUpdateDeviceInfoResult {
	return &DeviceUpdateDeviceInfoResult{}
}

func (p *DeviceUpdateDeviceInfoResult) InitDefault() {
	*p = DeviceUpdateDeviceInfoResult{}
}

var DeviceUpdateDeviceInfoResult_Success_DEFAULT *DeviceInfo

func (p *DeviceUpdateDeviceInfoResult) GetSuccess() (v *DeviceInfo) {
	if !p.IsSetSuccess() {
		return DeviceUpdateDeviceInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DeviceUpdateDeviceInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeviceInfo)
}

var fieldIDToName_DeviceUpdateDeviceInfoResult = map[int16]string{
	0: "success",
}

func (p *DeviceUpdateDeviceInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeviceUpdateDeviceInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeviceUpdateDeviceInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeviceUpdateDeviceInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDeviceInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeviceUpdateDeviceInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDeviceInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeviceUpdateDeviceInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DeviceUpdateDeviceInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceUpdateDeviceInfoResult(%+v)", *p)
}

func (p *DeviceUpdateDeviceInfoResult) DeepEqual(ano *DeviceUpdateDeviceInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DeviceUpdateDeviceInfoResult) Field0DeepEqual(src *DeviceInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DeviceBindDeviceArgs struct {
	Req *DeviceInfo `thrift:"req,1" frugal:"1,default,DeviceInfo" json:"req"`
}

func NewDeviceBindDeviceArgs() *DeviceBindDeviceArgs {
	return &DeviceBindDeviceArgs{}
}

func (p *DeviceBindDeviceArgs) InitDefault() {
	*p = DeviceBindDeviceArgs{}
}

var DeviceBindDeviceArgs_Req_DEFAULT *DeviceInfo

func (p *DeviceBindDeviceArgs) GetReq() (v *DeviceInfo) {
	if !p.IsSetReq() {
		return DeviceBindDeviceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DeviceBindDeviceArgs) SetReq(val *DeviceInfo) {
	p.Req = val
}

var fieldIDToName_DeviceBindDeviceArgs = map[int16]string{
	1: "req",
}

func (p *DeviceBindDeviceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeviceBindDeviceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeviceBindDeviceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeviceBindDeviceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewDeviceInfo()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeviceBindDeviceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BindDevice_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeviceBindDeviceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeviceBindDeviceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceBindDeviceArgs(%+v)", *p)
}

func (p *DeviceBindDeviceArgs) DeepEqual(ano *DeviceBindDeviceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DeviceBindDeviceArgs) Field1DeepEqual(src *DeviceInfo) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DeviceBindDeviceResult struct {
	Success *DeviceInfo `thrift:"success,0,optional" frugal:"0,optional,DeviceInfo" json:"success,omitempty"`
}

func NewDeviceBindDeviceResult() *DeviceBindDeviceResult {
	return &DeviceBindDeviceResult{}
}

func (p *DeviceBindDeviceResult) InitDefault() {
	*p = DeviceBindDeviceResult{}
}

var DeviceBindDeviceResult_Success_DEFAULT *DeviceInfo

func (p *DeviceBindDeviceResult) GetSuccess() (v *DeviceInfo) {
	if !p.IsSetSuccess() {
		return DeviceBindDeviceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DeviceBindDeviceResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeviceInfo)
}

var fieldIDToName_DeviceBindDeviceResult = map[int16]string{
	0: "success",
}

func (p *DeviceBindDeviceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeviceBindDeviceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeviceBindDeviceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeviceBindDeviceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDeviceInfo()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeviceBindDeviceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BindDevice_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeviceBindDeviceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DeviceBindDeviceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceBindDeviceResult(%+v)", *p)
}

func (p *DeviceBindDeviceResult) DeepEqual(ano *DeviceBindDeviceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DeviceBindDeviceResult) Field0DeepEqual(src *DeviceInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DeviceUnbindDeviceArgs struct {
	Req *common.Req `thrift:"req,1" frugal:"1,default,common.Req" json:"req"`
}

func NewDeviceUnbindDeviceArgs() *DeviceUnbindDeviceArgs {
	return &DeviceUnbindDeviceArgs{}
}

func (p *DeviceUnbindDeviceArgs) InitDefault() {
	*p = DeviceUnbindDeviceArgs{}
}

var DeviceUnbindDeviceArgs_Req_DEFAULT *common.Req

func (p *DeviceUnbindDeviceArgs) GetReq() (v *common.Req) {
	if !p.IsSetReq() {
		return DeviceUnbindDeviceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DeviceUnbindDeviceArgs) SetReq(val *common.Req) {
	p.Req = val
}

var fieldIDToName_DeviceUnbindDeviceArgs = map[int16]string{
	1: "req",
}

func (p *DeviceUnbindDeviceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeviceUnbindDeviceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeviceUnbindDeviceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeviceUnbindDeviceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common.NewReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeviceUnbindDeviceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UnbindDevice_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeviceUnbindDeviceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeviceUnbindDeviceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceUnbindDeviceArgs(%+v)", *p)
}

func (p *DeviceUnbindDeviceArgs) DeepEqual(ano *DeviceUnbindDeviceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DeviceUnbindDeviceArgs) Field1DeepEqual(src *common.Req) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DeviceUnbindDeviceResult struct {
	Success *common.Empty `thrift:"success,0,optional" frugal:"0,optional,common.Empty" json:"success,omitempty"`
}

func NewDeviceUnbindDeviceResult() *DeviceUnbindDeviceResult {
	return &DeviceUnbindDeviceResult{}
}

func (p *DeviceUnbindDeviceResult) InitDefault() {
	*p = DeviceUnbindDeviceResult{}
}

var DeviceUnbindDeviceResult_Success_DEFAULT *common.Empty

func (p *DeviceUnbindDeviceResult) GetSuccess() (v *common.Empty) {
	if !p.IsSetSuccess() {
		return DeviceUnbindDeviceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DeviceUnbindDeviceResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.Empty)
}

var fieldIDToName_DeviceUnbindDeviceResult = map[int16]string{
	0: "success",
}

func (p *DeviceUnbindDeviceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeviceUnbindDeviceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeviceUnbindDeviceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeviceUnbindDeviceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmpty()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeviceUnbindDeviceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UnbindDevice_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeviceUnbindDeviceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DeviceUnbindDeviceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceUnbindDeviceResult(%+v)", *p)
}

func (p *DeviceUnbindDeviceResult) DeepEqual(ano *DeviceUnbindDeviceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DeviceUnbindDeviceResult) Field0DeepEqual(src *common.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
