// Code generated by Kitex v0.8.0. DO NOT EDIT.

package model

import (
	"context"
	common "git.zqbjj.top/pet/services/cmd/http/kitex_gen/common"
	model "git.zqbjj.top/pet/services/cmd/http/kitex_gen/model"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return modelServiceInfo
}

var modelServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Model"
	handlerType := (*model.Model)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetAllModels":   kitex.NewMethodInfo(getAllModelsHandler, newModelGetAllModelsArgs, newModelGetAllModelsResult, false),
		"GetModelDetail": kitex.NewMethodInfo(getModelDetailHandler, newModelGetModelDetailArgs, newModelGetModelDetailResult, false),
		"AddNewModel":    kitex.NewMethodInfo(addNewModelHandler, newModelAddNewModelArgs, newModelAddNewModelResult, false),
		"DeleteModel":    kitex.NewMethodInfo(deleteModelHandler, newModelDeleteModelArgs, newModelDeleteModelResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "model",
		"ServiceFilePath": `../../static/idl/http/model.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func getAllModelsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*model.ModelGetAllModelsArgs)
	realResult := result.(*model.ModelGetAllModelsResult)
	success, err := handler.(model.Model).GetAllModels(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newModelGetAllModelsArgs() interface{} {
	return model.NewModelGetAllModelsArgs()
}

func newModelGetAllModelsResult() interface{} {
	return model.NewModelGetAllModelsResult()
}

func getModelDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*model.ModelGetModelDetailArgs)
	realResult := result.(*model.ModelGetModelDetailResult)
	success, err := handler.(model.Model).GetModelDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newModelGetModelDetailArgs() interface{} {
	return model.NewModelGetModelDetailArgs()
}

func newModelGetModelDetailResult() interface{} {
	return model.NewModelGetModelDetailResult()
}

func addNewModelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*model.ModelAddNewModelArgs)
	realResult := result.(*model.ModelAddNewModelResult)
	success, err := handler.(model.Model).AddNewModel(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newModelAddNewModelArgs() interface{} {
	return model.NewModelAddNewModelArgs()
}

func newModelAddNewModelResult() interface{} {
	return model.NewModelAddNewModelResult()
}

func deleteModelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*model.ModelDeleteModelArgs)
	realResult := result.(*model.ModelDeleteModelResult)
	success, err := handler.(model.Model).DeleteModel(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newModelDeleteModelArgs() interface{} {
	return model.NewModelDeleteModelArgs()
}

func newModelDeleteModelResult() interface{} {
	return model.NewModelDeleteModelResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetAllModels(ctx context.Context, req *common.Empty) (r []*model.ModelInfo, err error) {
	var _args model.ModelGetAllModelsArgs
	_args.Req = req
	var _result model.ModelGetAllModelsResult
	if err = p.c.Call(ctx, "GetAllModels", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetModelDetail(ctx context.Context, req *common.Req) (r *model.ModelInfo, err error) {
	var _args model.ModelGetModelDetailArgs
	_args.Req = req
	var _result model.ModelGetModelDetailResult
	if err = p.c.Call(ctx, "GetModelDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddNewModel(ctx context.Context, req *model.NewModel_) (r *model.ModelInfo, err error) {
	var _args model.ModelAddNewModelArgs
	_args.Req = req
	var _result model.ModelAddNewModelResult
	if err = p.c.Call(ctx, "AddNewModel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteModel(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args model.ModelDeleteModelArgs
	_args.Req = req
	var _result model.ModelDeleteModelResult
	if err = p.c.Call(ctx, "DeleteModel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
