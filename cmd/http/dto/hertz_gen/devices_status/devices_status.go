// Code generated by thriftgo (0.3.3). DO NOT EDIT.

package devices_status

import (
	"context"
	"fmt"
	"git.zqbjj.top/pet/services/cmd/http/dto/hertz_gen/req"
	"git.zqbjj.top/pet/services/cmd/http/dto/hertz_gen/resp"
	"github.com/apache/thrift/lib/go/thrift"
)

type RecentFeeding struct {
	FeedingAmount int8 `thrift:"FeedingAmount,1,required" form:"feeding_amount,required" json:"feeding_amount,required"`
	// until 2038.1.19
	Timestamp int32  `thrift:"timestamp,2,required" form:"id,required" json:"id,required"`
	FoodType  string `thrift:"FoodType,3,required" form:"food_type,required" json:"food_type,required"`
}

func NewRecentFeeding() *RecentFeeding {
	return &RecentFeeding{}
}

func (p *RecentFeeding) GetFeedingAmount() (v int8) {
	return p.FeedingAmount
}

func (p *RecentFeeding) GetTimestamp() (v int32) {
	return p.Timestamp
}

func (p *RecentFeeding) GetFoodType() (v string) {
	return p.FoodType
}

var fieldIDToName_RecentFeeding = map[int16]string{
	1: "FeedingAmount",
	2: "timestamp",
	3: "FoodType",
}

func (p *RecentFeeding) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFeedingAmount bool = false
	var issetTimestamp bool = false
	var issetFoodType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFeedingAmount = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTimestamp = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetFoodType = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFeedingAmount {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTimestamp {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetFoodType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RecentFeeding[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_RecentFeeding[fieldId]))
}

func (p *RecentFeeding) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.FeedingAmount = v
	}
	return nil
}
func (p *RecentFeeding) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Timestamp = v
	}
	return nil
}
func (p *RecentFeeding) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FoodType = v
	}
	return nil
}

func (p *RecentFeeding) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RecentFeeding"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RecentFeeding) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FeedingAmount", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.FeedingAmount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *RecentFeeding) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("timestamp", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Timestamp); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *RecentFeeding) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FoodType", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FoodType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *RecentFeeding) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecentFeeding(%+v)", *p)
}

type DeviceStatusInfo struct {
	IsOnline      bool           `thrift:"IsOnline,1,required" form:"is_online,required" json:"is_online,required"`
	DeviceStatus  int8           `thrift:"DeviceStatus,2,required" form:"device_status,required" json:"device_status,required"`
	FoodSurplus   int8           `thrift:"FoodSurplus,3,required" form:"food_surplus,required" json:"food_surplus,required"`
	BatteryLevel  int8           `thrift:"BatteryLevel,4,required" form:"battery_level,required" json:"battery_level,required" vd:"$<=100 && $>=0"`
	Id            *int32         `thrift:"Id,5,optional" form:"id" json:"id,omitempty"`
	DeviceId      int32          `thrift:"DeviceId,6,required" form:"device_id,required" json:"device_id,required"`
	RecentFeeding *RecentFeeding `thrift:"recent_feeding,7,required" form:"recent_feeding,required" json:"recent_feeding,required"`
}

func NewDeviceStatusInfo() *DeviceStatusInfo {
	return &DeviceStatusInfo{}
}

func (p *DeviceStatusInfo) GetIsOnline() (v bool) {
	return p.IsOnline
}

func (p *DeviceStatusInfo) GetDeviceStatus() (v int8) {
	return p.DeviceStatus
}

func (p *DeviceStatusInfo) GetFoodSurplus() (v int8) {
	return p.FoodSurplus
}

func (p *DeviceStatusInfo) GetBatteryLevel() (v int8) {
	return p.BatteryLevel
}

var DeviceStatusInfo_Id_DEFAULT int32

func (p *DeviceStatusInfo) GetId() (v int32) {
	if !p.IsSetId() {
		return DeviceStatusInfo_Id_DEFAULT
	}
	return *p.Id
}

func (p *DeviceStatusInfo) GetDeviceId() (v int32) {
	return p.DeviceId
}

var DeviceStatusInfo_RecentFeeding_DEFAULT *RecentFeeding

func (p *DeviceStatusInfo) GetRecentFeeding() (v *RecentFeeding) {
	if !p.IsSetRecentFeeding() {
		return DeviceStatusInfo_RecentFeeding_DEFAULT
	}
	return p.RecentFeeding
}

var fieldIDToName_DeviceStatusInfo = map[int16]string{
	1: "IsOnline",
	2: "DeviceStatus",
	3: "FoodSurplus",
	4: "BatteryLevel",
	5: "Id",
	6: "DeviceId",
	7: "recent_feeding",
}

func (p *DeviceStatusInfo) IsSetId() bool {
	return p.Id != nil
}

func (p *DeviceStatusInfo) IsSetRecentFeeding() bool {
	return p.RecentFeeding != nil
}

func (p *DeviceStatusInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetIsOnline bool = false
	var issetDeviceStatus bool = false
	var issetFoodSurplus bool = false
	var issetBatteryLevel bool = false
	var issetDeviceId bool = false
	var issetRecentFeeding bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsOnline = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDeviceStatus = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetFoodSurplus = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetBatteryLevel = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetDeviceId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetRecentFeeding = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetIsOnline {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetDeviceStatus {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetFoodSurplus {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetBatteryLevel {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetDeviceId {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetRecentFeeding {
		fieldId = 7
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeviceStatusInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DeviceStatusInfo[fieldId]))
}

func (p *DeviceStatusInfo) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsOnline = v
	}
	return nil
}
func (p *DeviceStatusInfo) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.DeviceStatus = v
	}
	return nil
}
func (p *DeviceStatusInfo) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.FoodSurplus = v
	}
	return nil
}
func (p *DeviceStatusInfo) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.BatteryLevel = v
	}
	return nil
}
func (p *DeviceStatusInfo) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = &v
	}
	return nil
}
func (p *DeviceStatusInfo) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.DeviceId = v
	}
	return nil
}
func (p *DeviceStatusInfo) ReadField7(iprot thrift.TProtocol) error {
	p.RecentFeeding = NewRecentFeeding()

	if err := p.RecentFeeding.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeviceStatusInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeviceStatusInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeviceStatusInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IsOnline", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsOnline); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DeviceStatusInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("DeviceStatus", thrift.BYTE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.DeviceStatus); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DeviceStatusInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FoodSurplus", thrift.BYTE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.FoodSurplus); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *DeviceStatusInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BatteryLevel", thrift.BYTE, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.BatteryLevel); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *DeviceStatusInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("Id", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *DeviceStatusInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("DeviceId", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeviceId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *DeviceStatusInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("recent_feeding", thrift.STRUCT, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.RecentFeeding.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *DeviceStatusInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceStatusInfo(%+v)", *p)
}

type DevicesStatus interface {
	GetDeviceStatus(ctx context.Context, req *req.IdReq) (r *resp.StdResp, err error)

	InitDeviceStatus(ctx context.Context, req *DeviceStatusInfo) (r *resp.StdResp, err error)

	UpdateDeviceStatus(ctx context.Context, req *DeviceStatusInfo) (r *resp.StdResp, err error)
}

type DevicesStatusClient struct {
	c thrift.TClient
}

func NewDevicesStatusClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DevicesStatusClient {
	return &DevicesStatusClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewDevicesStatusClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DevicesStatusClient {
	return &DevicesStatusClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewDevicesStatusClient(c thrift.TClient) *DevicesStatusClient {
	return &DevicesStatusClient{
		c: c,
	}
}

func (p *DevicesStatusClient) Client_() thrift.TClient {
	return p.c
}

func (p *DevicesStatusClient) GetDeviceStatus(ctx context.Context, req *req.IdReq) (r *resp.StdResp, err error) {
	var _args DevicesStatusGetDeviceStatusArgs
	_args.Req = req
	var _result DevicesStatusGetDeviceStatusResult
	if err = p.Client_().Call(ctx, "GetDeviceStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DevicesStatusClient) InitDeviceStatus(ctx context.Context, req *DeviceStatusInfo) (r *resp.StdResp, err error) {
	var _args DevicesStatusInitDeviceStatusArgs
	_args.Req = req
	var _result DevicesStatusInitDeviceStatusResult
	if err = p.Client_().Call(ctx, "InitDeviceStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DevicesStatusClient) UpdateDeviceStatus(ctx context.Context, req *DeviceStatusInfo) (r *resp.StdResp, err error) {
	var _args DevicesStatusUpdateDeviceStatusArgs
	_args.Req = req
	var _result DevicesStatusUpdateDeviceStatusResult
	if err = p.Client_().Call(ctx, "UpdateDeviceStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type DevicesStatusProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      DevicesStatus
}

func (p *DevicesStatusProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *DevicesStatusProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *DevicesStatusProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewDevicesStatusProcessor(handler DevicesStatus) *DevicesStatusProcessor {
	self := &DevicesStatusProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetDeviceStatus", &devicesStatusProcessorGetDeviceStatus{handler: handler})
	self.AddToProcessorMap("InitDeviceStatus", &devicesStatusProcessorInitDeviceStatus{handler: handler})
	self.AddToProcessorMap("UpdateDeviceStatus", &devicesStatusProcessorUpdateDeviceStatus{handler: handler})
	return self
}
func (p *DevicesStatusProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type devicesStatusProcessorGetDeviceStatus struct {
	handler DevicesStatus
}

func (p *devicesStatusProcessorGetDeviceStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DevicesStatusGetDeviceStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDeviceStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DevicesStatusGetDeviceStatusResult{}
	var retval *resp.StdResp
	if retval, err2 = p.handler.GetDeviceStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDeviceStatus: "+err2.Error())
		oprot.WriteMessageBegin("GetDeviceStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDeviceStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type devicesStatusProcessorInitDeviceStatus struct {
	handler DevicesStatus
}

func (p *devicesStatusProcessorInitDeviceStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DevicesStatusInitDeviceStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("InitDeviceStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DevicesStatusInitDeviceStatusResult{}
	var retval *resp.StdResp
	if retval, err2 = p.handler.InitDeviceStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing InitDeviceStatus: "+err2.Error())
		oprot.WriteMessageBegin("InitDeviceStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("InitDeviceStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type devicesStatusProcessorUpdateDeviceStatus struct {
	handler DevicesStatus
}

func (p *devicesStatusProcessorUpdateDeviceStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DevicesStatusUpdateDeviceStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateDeviceStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DevicesStatusUpdateDeviceStatusResult{}
	var retval *resp.StdResp
	if retval, err2 = p.handler.UpdateDeviceStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateDeviceStatus: "+err2.Error())
		oprot.WriteMessageBegin("UpdateDeviceStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateDeviceStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type DevicesStatusGetDeviceStatusArgs struct {
	Req *req.IdReq `thrift:"req,1"`
}

func NewDevicesStatusGetDeviceStatusArgs() *DevicesStatusGetDeviceStatusArgs {
	return &DevicesStatusGetDeviceStatusArgs{}
}

var DevicesStatusGetDeviceStatusArgs_Req_DEFAULT *req.IdReq

func (p *DevicesStatusGetDeviceStatusArgs) GetReq() (v *req.IdReq) {
	if !p.IsSetReq() {
		return DevicesStatusGetDeviceStatusArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_DevicesStatusGetDeviceStatusArgs = map[int16]string{
	1: "req",
}

func (p *DevicesStatusGetDeviceStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DevicesStatusGetDeviceStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DevicesStatusGetDeviceStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DevicesStatusGetDeviceStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = req.NewIdReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DevicesStatusGetDeviceStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDeviceStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DevicesStatusGetDeviceStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DevicesStatusGetDeviceStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DevicesStatusGetDeviceStatusArgs(%+v)", *p)
}

type DevicesStatusGetDeviceStatusResult struct {
	Success *resp.StdResp `thrift:"success,0,optional"`
}

func NewDevicesStatusGetDeviceStatusResult() *DevicesStatusGetDeviceStatusResult {
	return &DevicesStatusGetDeviceStatusResult{}
}

var DevicesStatusGetDeviceStatusResult_Success_DEFAULT *resp.StdResp

func (p *DevicesStatusGetDeviceStatusResult) GetSuccess() (v *resp.StdResp) {
	if !p.IsSetSuccess() {
		return DevicesStatusGetDeviceStatusResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_DevicesStatusGetDeviceStatusResult = map[int16]string{
	0: "success",
}

func (p *DevicesStatusGetDeviceStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DevicesStatusGetDeviceStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DevicesStatusGetDeviceStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DevicesStatusGetDeviceStatusResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = resp.NewStdResp()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DevicesStatusGetDeviceStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDeviceStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DevicesStatusGetDeviceStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DevicesStatusGetDeviceStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DevicesStatusGetDeviceStatusResult(%+v)", *p)
}

type DevicesStatusInitDeviceStatusArgs struct {
	Req *DeviceStatusInfo `thrift:"req,1"`
}

func NewDevicesStatusInitDeviceStatusArgs() *DevicesStatusInitDeviceStatusArgs {
	return &DevicesStatusInitDeviceStatusArgs{}
}

var DevicesStatusInitDeviceStatusArgs_Req_DEFAULT *DeviceStatusInfo

func (p *DevicesStatusInitDeviceStatusArgs) GetReq() (v *DeviceStatusInfo) {
	if !p.IsSetReq() {
		return DevicesStatusInitDeviceStatusArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_DevicesStatusInitDeviceStatusArgs = map[int16]string{
	1: "req",
}

func (p *DevicesStatusInitDeviceStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DevicesStatusInitDeviceStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DevicesStatusInitDeviceStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DevicesStatusInitDeviceStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewDeviceStatusInfo()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DevicesStatusInitDeviceStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InitDeviceStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DevicesStatusInitDeviceStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DevicesStatusInitDeviceStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DevicesStatusInitDeviceStatusArgs(%+v)", *p)
}

type DevicesStatusInitDeviceStatusResult struct {
	Success *resp.StdResp `thrift:"success,0,optional"`
}

func NewDevicesStatusInitDeviceStatusResult() *DevicesStatusInitDeviceStatusResult {
	return &DevicesStatusInitDeviceStatusResult{}
}

var DevicesStatusInitDeviceStatusResult_Success_DEFAULT *resp.StdResp

func (p *DevicesStatusInitDeviceStatusResult) GetSuccess() (v *resp.StdResp) {
	if !p.IsSetSuccess() {
		return DevicesStatusInitDeviceStatusResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_DevicesStatusInitDeviceStatusResult = map[int16]string{
	0: "success",
}

func (p *DevicesStatusInitDeviceStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DevicesStatusInitDeviceStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DevicesStatusInitDeviceStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DevicesStatusInitDeviceStatusResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = resp.NewStdResp()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DevicesStatusInitDeviceStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InitDeviceStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DevicesStatusInitDeviceStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DevicesStatusInitDeviceStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DevicesStatusInitDeviceStatusResult(%+v)", *p)
}

type DevicesStatusUpdateDeviceStatusArgs struct {
	Req *DeviceStatusInfo `thrift:"req,1"`
}

func NewDevicesStatusUpdateDeviceStatusArgs() *DevicesStatusUpdateDeviceStatusArgs {
	return &DevicesStatusUpdateDeviceStatusArgs{}
}

var DevicesStatusUpdateDeviceStatusArgs_Req_DEFAULT *DeviceStatusInfo

func (p *DevicesStatusUpdateDeviceStatusArgs) GetReq() (v *DeviceStatusInfo) {
	if !p.IsSetReq() {
		return DevicesStatusUpdateDeviceStatusArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_DevicesStatusUpdateDeviceStatusArgs = map[int16]string{
	1: "req",
}

func (p *DevicesStatusUpdateDeviceStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DevicesStatusUpdateDeviceStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DevicesStatusUpdateDeviceStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DevicesStatusUpdateDeviceStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewDeviceStatusInfo()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DevicesStatusUpdateDeviceStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDeviceStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DevicesStatusUpdateDeviceStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DevicesStatusUpdateDeviceStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DevicesStatusUpdateDeviceStatusArgs(%+v)", *p)
}

type DevicesStatusUpdateDeviceStatusResult struct {
	Success *resp.StdResp `thrift:"success,0,optional"`
}

func NewDevicesStatusUpdateDeviceStatusResult() *DevicesStatusUpdateDeviceStatusResult {
	return &DevicesStatusUpdateDeviceStatusResult{}
}

var DevicesStatusUpdateDeviceStatusResult_Success_DEFAULT *resp.StdResp

func (p *DevicesStatusUpdateDeviceStatusResult) GetSuccess() (v *resp.StdResp) {
	if !p.IsSetSuccess() {
		return DevicesStatusUpdateDeviceStatusResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_DevicesStatusUpdateDeviceStatusResult = map[int16]string{
	0: "success",
}

func (p *DevicesStatusUpdateDeviceStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DevicesStatusUpdateDeviceStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DevicesStatusUpdateDeviceStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DevicesStatusUpdateDeviceStatusResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = resp.NewStdResp()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DevicesStatusUpdateDeviceStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDeviceStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DevicesStatusUpdateDeviceStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DevicesStatusUpdateDeviceStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DevicesStatusUpdateDeviceStatusResult(%+v)", *p)
}
