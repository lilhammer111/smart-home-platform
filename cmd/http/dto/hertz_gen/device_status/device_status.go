// Code generated by thriftgo (0.3.3). DO NOT EDIT.

package device_status

import (
	"context"
	"fmt"
	"git.zqbjj.top/pet/services/cmd/http/dto/hertz_gen/standard"
	"github.com/apache/thrift/lib/go/thrift"
)

type RecentFeeding struct {
	Amount int8 `thrift:"Amount,1,required" form:"feeding_amount,required" json:"feeding_amount,required"`
	// until 2038.1.19
	Timestamp int32  `thrift:"Timestamp,2,required" form:"timestamp,required" json:"timestamp,required"`
	FoodType  string `thrift:"FoodType,3,required" form:"food_type,required" json:"food_type,required"`
}

func NewRecentFeeding() *RecentFeeding {
	return &RecentFeeding{}
}

func (p *RecentFeeding) GetAmount() (v int8) {
	return p.Amount
}

func (p *RecentFeeding) GetTimestamp() (v int32) {
	return p.Timestamp
}

func (p *RecentFeeding) GetFoodType() (v string) {
	return p.FoodType
}

var fieldIDToName_RecentFeeding = map[int16]string{
	1: "Amount",
	2: "Timestamp",
	3: "FoodType",
}

func (p *RecentFeeding) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAmount bool = false
	var issetTimestamp bool = false
	var issetFoodType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetAmount = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTimestamp = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetFoodType = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAmount {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTimestamp {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetFoodType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RecentFeeding[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_RecentFeeding[fieldId]))
}

func (p *RecentFeeding) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Amount = v
	}
	return nil
}
func (p *RecentFeeding) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Timestamp = v
	}
	return nil
}
func (p *RecentFeeding) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FoodType = v
	}
	return nil
}

func (p *RecentFeeding) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RecentFeeding"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RecentFeeding) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Amount", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Amount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *RecentFeeding) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Timestamp", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Timestamp); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *RecentFeeding) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FoodType", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FoodType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *RecentFeeding) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecentFeeding(%+v)", *p)
}

type DeviceStatusInfo struct {
	Id            *int32         `thrift:"Id,1,optional" form:"id" json:"id,omitempty"`
	DeviceId      int32          `thrift:"DeviceId,2,required" form:"device_id,required" json:"device_id,required"`
	IsFaulty      bool           `thrift:"IsFaulty,3,required" form:"is_faulty,required" json:"is_faulty,required"`
	PoweredOn     bool           `thrift:"PoweredOn,4,required" form:"powered_on,required" json:"powered_on,required"`
	IsConnected   bool           `thrift:"IsConnected,5,required" form:"is_connected,required" json:"is_connected,required"`
	IsWorking     bool           `thrift:"IsWorking,6,required" form:"is_working,required" json:"is_working,required"`
	FoodSurplus   int8           `thrift:"FoodSurplus,7,required" form:"food_surplus,required" json:"food_surplus,required"`
	BatteryCharge int8           `thrift:"BatteryCharge,8,required" form:"battery_charge,required" json:"battery_charge,required" vd:"$<=100 && $>=0"`
	RecentFeeding *RecentFeeding `thrift:"RecentFeeding,9,required" form:"recent_feeding,required" json:"recent_feeding,required"`
}

func NewDeviceStatusInfo() *DeviceStatusInfo {
	return &DeviceStatusInfo{}
}

var DeviceStatusInfo_Id_DEFAULT int32

func (p *DeviceStatusInfo) GetId() (v int32) {
	if !p.IsSetId() {
		return DeviceStatusInfo_Id_DEFAULT
	}
	return *p.Id
}

func (p *DeviceStatusInfo) GetDeviceId() (v int32) {
	return p.DeviceId
}

func (p *DeviceStatusInfo) GetIsFaulty() (v bool) {
	return p.IsFaulty
}

func (p *DeviceStatusInfo) GetPoweredOn() (v bool) {
	return p.PoweredOn
}

func (p *DeviceStatusInfo) GetIsConnected() (v bool) {
	return p.IsConnected
}

func (p *DeviceStatusInfo) GetIsWorking() (v bool) {
	return p.IsWorking
}

func (p *DeviceStatusInfo) GetFoodSurplus() (v int8) {
	return p.FoodSurplus
}

func (p *DeviceStatusInfo) GetBatteryCharge() (v int8) {
	return p.BatteryCharge
}

var DeviceStatusInfo_RecentFeeding_DEFAULT *RecentFeeding

func (p *DeviceStatusInfo) GetRecentFeeding() (v *RecentFeeding) {
	if !p.IsSetRecentFeeding() {
		return DeviceStatusInfo_RecentFeeding_DEFAULT
	}
	return p.RecentFeeding
}

var fieldIDToName_DeviceStatusInfo = map[int16]string{
	1: "Id",
	2: "DeviceId",
	3: "IsFaulty",
	4: "PoweredOn",
	5: "IsConnected",
	6: "IsWorking",
	7: "FoodSurplus",
	8: "BatteryCharge",
	9: "RecentFeeding",
}

func (p *DeviceStatusInfo) IsSetId() bool {
	return p.Id != nil
}

func (p *DeviceStatusInfo) IsSetRecentFeeding() bool {
	return p.RecentFeeding != nil
}

func (p *DeviceStatusInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDeviceId bool = false
	var issetIsFaulty bool = false
	var issetPoweredOn bool = false
	var issetIsConnected bool = false
	var issetIsWorking bool = false
	var issetFoodSurplus bool = false
	var issetBatteryCharge bool = false
	var issetRecentFeeding bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDeviceId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsFaulty = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetPoweredOn = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsConnected = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsWorking = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetFoodSurplus = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetBatteryCharge = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetRecentFeeding = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDeviceId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetIsFaulty {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetPoweredOn {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetIsConnected {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetIsWorking {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetFoodSurplus {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetBatteryCharge {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetRecentFeeding {
		fieldId = 9
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeviceStatusInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DeviceStatusInfo[fieldId]))
}

func (p *DeviceStatusInfo) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = &v
	}
	return nil
}
func (p *DeviceStatusInfo) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.DeviceId = v
	}
	return nil
}
func (p *DeviceStatusInfo) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsFaulty = v
	}
	return nil
}
func (p *DeviceStatusInfo) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.PoweredOn = v
	}
	return nil
}
func (p *DeviceStatusInfo) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsConnected = v
	}
	return nil
}
func (p *DeviceStatusInfo) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsWorking = v
	}
	return nil
}
func (p *DeviceStatusInfo) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.FoodSurplus = v
	}
	return nil
}
func (p *DeviceStatusInfo) ReadField8(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.BatteryCharge = v
	}
	return nil
}
func (p *DeviceStatusInfo) ReadField9(iprot thrift.TProtocol) error {
	p.RecentFeeding = NewRecentFeeding()

	if err := p.RecentFeeding.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeviceStatusInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeviceStatusInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeviceStatusInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("Id", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DeviceStatusInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("DeviceId", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeviceId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DeviceStatusInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IsFaulty", thrift.BOOL, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsFaulty); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *DeviceStatusInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PoweredOn", thrift.BOOL, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.PoweredOn); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *DeviceStatusInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IsConnected", thrift.BOOL, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsConnected); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *DeviceStatusInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IsWorking", thrift.BOOL, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsWorking); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *DeviceStatusInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FoodSurplus", thrift.BYTE, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.FoodSurplus); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *DeviceStatusInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BatteryCharge", thrift.BYTE, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.BatteryCharge); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *DeviceStatusInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RecentFeeding", thrift.STRUCT, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.RecentFeeding.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *DeviceStatusInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceStatusInfo(%+v)", *p)
}

// response
type DeviceStatusInfoResp struct {
	Meta *standard.Resp    `thrift:"Meta,1,required" form:"meta,required" json:"meta,required" query:"meta,required"`
	Data *DeviceStatusInfo `thrift:"Data,2,required" form:"data,required" json:"data,required" query:"data,required"`
}

func NewDeviceStatusInfoResp() *DeviceStatusInfoResp {
	return &DeviceStatusInfoResp{}
}

var DeviceStatusInfoResp_Meta_DEFAULT *standard.Resp

func (p *DeviceStatusInfoResp) GetMeta() (v *standard.Resp) {
	if !p.IsSetMeta() {
		return DeviceStatusInfoResp_Meta_DEFAULT
	}
	return p.Meta
}

var DeviceStatusInfoResp_Data_DEFAULT *DeviceStatusInfo

func (p *DeviceStatusInfoResp) GetData() (v *DeviceStatusInfo) {
	if !p.IsSetData() {
		return DeviceStatusInfoResp_Data_DEFAULT
	}
	return p.Data
}

var fieldIDToName_DeviceStatusInfoResp = map[int16]string{
	1: "Meta",
	2: "Data",
}

func (p *DeviceStatusInfoResp) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *DeviceStatusInfoResp) IsSetData() bool {
	return p.Data != nil
}

func (p *DeviceStatusInfoResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetMeta bool = false
	var issetData bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetMeta = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetData = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetMeta {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetData {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeviceStatusInfoResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DeviceStatusInfoResp[fieldId]))
}

func (p *DeviceStatusInfoResp) ReadField1(iprot thrift.TProtocol) error {
	p.Meta = standard.NewResp()

	if err := p.Meta.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *DeviceStatusInfoResp) ReadField2(iprot thrift.TProtocol) error {
	p.Data = NewDeviceStatusInfo()

	if err := p.Data.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeviceStatusInfoResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeviceStatusInfoResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeviceStatusInfoResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Meta", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Meta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DeviceStatusInfoResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Data", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Data.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeviceStatusInfoResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceStatusInfoResp(%+v)", *p)
}

type DeviceStatus interface {
	GetDeviceStatus(ctx context.Context, req *standard.Req) (r *DeviceStatusInfoResp, err error)

	InitDeviceStatus(ctx context.Context, req *DeviceStatusInfo) (r *DeviceStatusInfoResp, err error)

	UpdateDeviceStatus(ctx context.Context, req *DeviceStatusInfo) (r *DeviceStatusInfoResp, err error)
}

type DeviceStatusClient struct {
	c thrift.TClient
}

func NewDeviceStatusClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DeviceStatusClient {
	return &DeviceStatusClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewDeviceStatusClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DeviceStatusClient {
	return &DeviceStatusClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewDeviceStatusClient(c thrift.TClient) *DeviceStatusClient {
	return &DeviceStatusClient{
		c: c,
	}
}

func (p *DeviceStatusClient) Client_() thrift.TClient {
	return p.c
}

func (p *DeviceStatusClient) GetDeviceStatus(ctx context.Context, req *standard.Req) (r *DeviceStatusInfoResp, err error) {
	var _args DeviceStatusGetDeviceStatusArgs
	_args.Req = req
	var _result DeviceStatusGetDeviceStatusResult
	if err = p.Client_().Call(ctx, "GetDeviceStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DeviceStatusClient) InitDeviceStatus(ctx context.Context, req *DeviceStatusInfo) (r *DeviceStatusInfoResp, err error) {
	var _args DeviceStatusInitDeviceStatusArgs
	_args.Req = req
	var _result DeviceStatusInitDeviceStatusResult
	if err = p.Client_().Call(ctx, "InitDeviceStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DeviceStatusClient) UpdateDeviceStatus(ctx context.Context, req *DeviceStatusInfo) (r *DeviceStatusInfoResp, err error) {
	var _args DeviceStatusUpdateDeviceStatusArgs
	_args.Req = req
	var _result DeviceStatusUpdateDeviceStatusResult
	if err = p.Client_().Call(ctx, "UpdateDeviceStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type DeviceStatusProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      DeviceStatus
}

func (p *DeviceStatusProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *DeviceStatusProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *DeviceStatusProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewDeviceStatusProcessor(handler DeviceStatus) *DeviceStatusProcessor {
	self := &DeviceStatusProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetDeviceStatus", &deviceStatusProcessorGetDeviceStatus{handler: handler})
	self.AddToProcessorMap("InitDeviceStatus", &deviceStatusProcessorInitDeviceStatus{handler: handler})
	self.AddToProcessorMap("UpdateDeviceStatus", &deviceStatusProcessorUpdateDeviceStatus{handler: handler})
	return self
}
func (p *DeviceStatusProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type deviceStatusProcessorGetDeviceStatus struct {
	handler DeviceStatus
}

func (p *deviceStatusProcessorGetDeviceStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeviceStatusGetDeviceStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDeviceStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DeviceStatusGetDeviceStatusResult{}
	var retval *DeviceStatusInfoResp
	if retval, err2 = p.handler.GetDeviceStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDeviceStatus: "+err2.Error())
		oprot.WriteMessageBegin("GetDeviceStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDeviceStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type deviceStatusProcessorInitDeviceStatus struct {
	handler DeviceStatus
}

func (p *deviceStatusProcessorInitDeviceStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeviceStatusInitDeviceStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("InitDeviceStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DeviceStatusInitDeviceStatusResult{}
	var retval *DeviceStatusInfoResp
	if retval, err2 = p.handler.InitDeviceStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing InitDeviceStatus: "+err2.Error())
		oprot.WriteMessageBegin("InitDeviceStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("InitDeviceStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type deviceStatusProcessorUpdateDeviceStatus struct {
	handler DeviceStatus
}

func (p *deviceStatusProcessorUpdateDeviceStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeviceStatusUpdateDeviceStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateDeviceStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DeviceStatusUpdateDeviceStatusResult{}
	var retval *DeviceStatusInfoResp
	if retval, err2 = p.handler.UpdateDeviceStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateDeviceStatus: "+err2.Error())
		oprot.WriteMessageBegin("UpdateDeviceStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateDeviceStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type DeviceStatusGetDeviceStatusArgs struct {
	Req *standard.Req `thrift:"req,1"`
}

func NewDeviceStatusGetDeviceStatusArgs() *DeviceStatusGetDeviceStatusArgs {
	return &DeviceStatusGetDeviceStatusArgs{}
}

var DeviceStatusGetDeviceStatusArgs_Req_DEFAULT *standard.Req

func (p *DeviceStatusGetDeviceStatusArgs) GetReq() (v *standard.Req) {
	if !p.IsSetReq() {
		return DeviceStatusGetDeviceStatusArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_DeviceStatusGetDeviceStatusArgs = map[int16]string{
	1: "req",
}

func (p *DeviceStatusGetDeviceStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeviceStatusGetDeviceStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeviceStatusGetDeviceStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeviceStatusGetDeviceStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = standard.NewReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeviceStatusGetDeviceStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDeviceStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeviceStatusGetDeviceStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeviceStatusGetDeviceStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceStatusGetDeviceStatusArgs(%+v)", *p)
}

type DeviceStatusGetDeviceStatusResult struct {
	Success *DeviceStatusInfoResp `thrift:"success,0,optional"`
}

func NewDeviceStatusGetDeviceStatusResult() *DeviceStatusGetDeviceStatusResult {
	return &DeviceStatusGetDeviceStatusResult{}
}

var DeviceStatusGetDeviceStatusResult_Success_DEFAULT *DeviceStatusInfoResp

func (p *DeviceStatusGetDeviceStatusResult) GetSuccess() (v *DeviceStatusInfoResp) {
	if !p.IsSetSuccess() {
		return DeviceStatusGetDeviceStatusResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_DeviceStatusGetDeviceStatusResult = map[int16]string{
	0: "success",
}

func (p *DeviceStatusGetDeviceStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeviceStatusGetDeviceStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeviceStatusGetDeviceStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeviceStatusGetDeviceStatusResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDeviceStatusInfoResp()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeviceStatusGetDeviceStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDeviceStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeviceStatusGetDeviceStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DeviceStatusGetDeviceStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceStatusGetDeviceStatusResult(%+v)", *p)
}

type DeviceStatusInitDeviceStatusArgs struct {
	Req *DeviceStatusInfo `thrift:"req,1"`
}

func NewDeviceStatusInitDeviceStatusArgs() *DeviceStatusInitDeviceStatusArgs {
	return &DeviceStatusInitDeviceStatusArgs{}
}

var DeviceStatusInitDeviceStatusArgs_Req_DEFAULT *DeviceStatusInfo

func (p *DeviceStatusInitDeviceStatusArgs) GetReq() (v *DeviceStatusInfo) {
	if !p.IsSetReq() {
		return DeviceStatusInitDeviceStatusArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_DeviceStatusInitDeviceStatusArgs = map[int16]string{
	1: "req",
}

func (p *DeviceStatusInitDeviceStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeviceStatusInitDeviceStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeviceStatusInitDeviceStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeviceStatusInitDeviceStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewDeviceStatusInfo()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeviceStatusInitDeviceStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InitDeviceStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeviceStatusInitDeviceStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeviceStatusInitDeviceStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceStatusInitDeviceStatusArgs(%+v)", *p)
}

type DeviceStatusInitDeviceStatusResult struct {
	Success *DeviceStatusInfoResp `thrift:"success,0,optional"`
}

func NewDeviceStatusInitDeviceStatusResult() *DeviceStatusInitDeviceStatusResult {
	return &DeviceStatusInitDeviceStatusResult{}
}

var DeviceStatusInitDeviceStatusResult_Success_DEFAULT *DeviceStatusInfoResp

func (p *DeviceStatusInitDeviceStatusResult) GetSuccess() (v *DeviceStatusInfoResp) {
	if !p.IsSetSuccess() {
		return DeviceStatusInitDeviceStatusResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_DeviceStatusInitDeviceStatusResult = map[int16]string{
	0: "success",
}

func (p *DeviceStatusInitDeviceStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeviceStatusInitDeviceStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeviceStatusInitDeviceStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeviceStatusInitDeviceStatusResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDeviceStatusInfoResp()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeviceStatusInitDeviceStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InitDeviceStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeviceStatusInitDeviceStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DeviceStatusInitDeviceStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceStatusInitDeviceStatusResult(%+v)", *p)
}

type DeviceStatusUpdateDeviceStatusArgs struct {
	Req *DeviceStatusInfo `thrift:"req,1"`
}

func NewDeviceStatusUpdateDeviceStatusArgs() *DeviceStatusUpdateDeviceStatusArgs {
	return &DeviceStatusUpdateDeviceStatusArgs{}
}

var DeviceStatusUpdateDeviceStatusArgs_Req_DEFAULT *DeviceStatusInfo

func (p *DeviceStatusUpdateDeviceStatusArgs) GetReq() (v *DeviceStatusInfo) {
	if !p.IsSetReq() {
		return DeviceStatusUpdateDeviceStatusArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_DeviceStatusUpdateDeviceStatusArgs = map[int16]string{
	1: "req",
}

func (p *DeviceStatusUpdateDeviceStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeviceStatusUpdateDeviceStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeviceStatusUpdateDeviceStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeviceStatusUpdateDeviceStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewDeviceStatusInfo()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeviceStatusUpdateDeviceStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDeviceStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeviceStatusUpdateDeviceStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeviceStatusUpdateDeviceStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceStatusUpdateDeviceStatusArgs(%+v)", *p)
}

type DeviceStatusUpdateDeviceStatusResult struct {
	Success *DeviceStatusInfoResp `thrift:"success,0,optional"`
}

func NewDeviceStatusUpdateDeviceStatusResult() *DeviceStatusUpdateDeviceStatusResult {
	return &DeviceStatusUpdateDeviceStatusResult{}
}

var DeviceStatusUpdateDeviceStatusResult_Success_DEFAULT *DeviceStatusInfoResp

func (p *DeviceStatusUpdateDeviceStatusResult) GetSuccess() (v *DeviceStatusInfoResp) {
	if !p.IsSetSuccess() {
		return DeviceStatusUpdateDeviceStatusResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_DeviceStatusUpdateDeviceStatusResult = map[int16]string{
	0: "success",
}

func (p *DeviceStatusUpdateDeviceStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeviceStatusUpdateDeviceStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeviceStatusUpdateDeviceStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeviceStatusUpdateDeviceStatusResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDeviceStatusInfoResp()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeviceStatusUpdateDeviceStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDeviceStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeviceStatusUpdateDeviceStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DeviceStatusUpdateDeviceStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceStatusUpdateDeviceStatusResult(%+v)", *p)
}
