// Code generated by thriftgo (0.3.3). DO NOT EDIT.

package category_brand

import (
	"context"
	"fmt"
	"git.zqbjj.top/pet/services/cmd/http/dto/hertz_gen/common"
	"github.com/apache/thrift/lib/go/thrift"
)

type CategoryBrandInfo struct {
	Id         int32 `thrift:"Id,1,required" form:"id,required" json:"id,required"`
	CategoryId int32 `thrift:"CategoryId,2,required" form:"category_id,required" json:"category_id,required"`
	BrandId    int32 `thrift:"BrandId,3,required" form:"brand_id,required" json:"brand_id,required"`
}

func NewCategoryBrandInfo() *CategoryBrandInfo {
	return &CategoryBrandInfo{}
}

func (p *CategoryBrandInfo) GetId() (v int32) {
	return p.Id
}

func (p *CategoryBrandInfo) GetCategoryId() (v int32) {
	return p.CategoryId
}

func (p *CategoryBrandInfo) GetBrandId() (v int32) {
	return p.BrandId
}

var fieldIDToName_CategoryBrandInfo = map[int16]string{
	1: "Id",
	2: "CategoryId",
	3: "BrandId",
}

func (p *CategoryBrandInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetCategoryId bool = false
	var issetBrandId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCategoryId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetBrandId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCategoryId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetBrandId {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryBrandInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CategoryBrandInfo[fieldId]))
}

func (p *CategoryBrandInfo) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}
func (p *CategoryBrandInfo) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.CategoryId = v
	}
	return nil
}
func (p *CategoryBrandInfo) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.BrandId = v
	}
	return nil
}

func (p *CategoryBrandInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CategoryBrandInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryBrandInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CategoryBrandInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CategoryId", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CategoryId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CategoryBrandInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BrandId", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.BrandId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CategoryBrandInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryBrandInfo(%+v)", *p)
}

type NewCategoryBrand struct {
	BrandId    int32   `thrift:"BrandId,1,required" form:"brand_id,required" json:"brand_id,required"`
	CategoryId []int32 `thrift:"CategoryId,2,required" form:"category_id,required" json:"category_id,required"`
}

func NewNewCategoryBrand() *NewCategoryBrand {
	return &NewCategoryBrand{}
}

func (p *NewCategoryBrand) GetBrandId() (v int32) {
	return p.BrandId
}

func (p *NewCategoryBrand) GetCategoryId() (v []int32) {
	return p.CategoryId
}

var fieldIDToName_NewCategoryBrand = map[int16]string{
	1: "BrandId",
	2: "CategoryId",
}

func (p *NewCategoryBrand) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBrandId bool = false
	var issetCategoryId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBrandId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCategoryId = true
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBrandId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCategoryId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NewCategoryBrand[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_NewCategoryBrand[fieldId]))
}

func (p *NewCategoryBrand) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.BrandId = v
	}
	return nil
}
func (p *NewCategoryBrand) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.CategoryId = make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.CategoryId = append(p.CategoryId, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NewCategoryBrand) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NewCategoryBrand"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NewCategoryBrand) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BrandId", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.BrandId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *NewCategoryBrand) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CategoryId", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.CategoryId)); err != nil {
		return err
	}
	for _, v := range p.CategoryId {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *NewCategoryBrand) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NewCategoryBrand(%+v)", *p)
}

type CategoryBrand interface {
	BatchAddCategoryBrand(ctx context.Context, req *NewCategoryBrand) (r []*CategoryBrandInfo, err error)

	BatchReduceCategoryBrand(ctx context.Context, req *NewCategoryBrand) (r *common.Empty, err error)

	UpdateCategoryBrand(ctx context.Context, req *NewCategoryBrand) (r *common.Empty, err error)

	DeleteBrandByCategory(ctx context.Context, req *common.Req) (r *common.Empty, err error)

	DeleteCategoryByBrand(ctx context.Context, req *common.Req) (r *common.Empty, err error)
}

type CategoryBrandClient struct {
	c thrift.TClient
}

func NewCategoryBrandClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CategoryBrandClient {
	return &CategoryBrandClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewCategoryBrandClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CategoryBrandClient {
	return &CategoryBrandClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewCategoryBrandClient(c thrift.TClient) *CategoryBrandClient {
	return &CategoryBrandClient{
		c: c,
	}
}

func (p *CategoryBrandClient) Client_() thrift.TClient {
	return p.c
}

func (p *CategoryBrandClient) BatchAddCategoryBrand(ctx context.Context, req *NewCategoryBrand) (r []*CategoryBrandInfo, err error) {
	var _args CategoryBrandBatchAddCategoryBrandArgs
	_args.Req = req
	var _result CategoryBrandBatchAddCategoryBrandResult
	if err = p.Client_().Call(ctx, "BatchAddCategoryBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CategoryBrandClient) BatchReduceCategoryBrand(ctx context.Context, req *NewCategoryBrand) (r *common.Empty, err error) {
	var _args CategoryBrandBatchReduceCategoryBrandArgs
	_args.Req = req
	var _result CategoryBrandBatchReduceCategoryBrandResult
	if err = p.Client_().Call(ctx, "BatchReduceCategoryBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CategoryBrandClient) UpdateCategoryBrand(ctx context.Context, req *NewCategoryBrand) (r *common.Empty, err error) {
	var _args CategoryBrandUpdateCategoryBrandArgs
	_args.Req = req
	var _result CategoryBrandUpdateCategoryBrandResult
	if err = p.Client_().Call(ctx, "UpdateCategoryBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CategoryBrandClient) DeleteBrandByCategory(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args CategoryBrandDeleteBrandByCategoryArgs
	_args.Req = req
	var _result CategoryBrandDeleteBrandByCategoryResult
	if err = p.Client_().Call(ctx, "DeleteBrandByCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CategoryBrandClient) DeleteCategoryByBrand(ctx context.Context, req *common.Req) (r *common.Empty, err error) {
	var _args CategoryBrandDeleteCategoryByBrandArgs
	_args.Req = req
	var _result CategoryBrandDeleteCategoryByBrandResult
	if err = p.Client_().Call(ctx, "DeleteCategoryByBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type CategoryBrandProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      CategoryBrand
}

func (p *CategoryBrandProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CategoryBrandProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *CategoryBrandProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCategoryBrandProcessor(handler CategoryBrand) *CategoryBrandProcessor {
	self := &CategoryBrandProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("BatchAddCategoryBrand", &categoryBrandProcessorBatchAddCategoryBrand{handler: handler})
	self.AddToProcessorMap("BatchReduceCategoryBrand", &categoryBrandProcessorBatchReduceCategoryBrand{handler: handler})
	self.AddToProcessorMap("UpdateCategoryBrand", &categoryBrandProcessorUpdateCategoryBrand{handler: handler})
	self.AddToProcessorMap("DeleteBrandByCategory", &categoryBrandProcessorDeleteBrandByCategory{handler: handler})
	self.AddToProcessorMap("DeleteCategoryByBrand", &categoryBrandProcessorDeleteCategoryByBrand{handler: handler})
	return self
}
func (p *CategoryBrandProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type categoryBrandProcessorBatchAddCategoryBrand struct {
	handler CategoryBrand
}

func (p *categoryBrandProcessorBatchAddCategoryBrand) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CategoryBrandBatchAddCategoryBrandArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchAddCategoryBrand", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CategoryBrandBatchAddCategoryBrandResult{}
	var retval []*CategoryBrandInfo
	if retval, err2 = p.handler.BatchAddCategoryBrand(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchAddCategoryBrand: "+err2.Error())
		oprot.WriteMessageBegin("BatchAddCategoryBrand", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchAddCategoryBrand", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type categoryBrandProcessorBatchReduceCategoryBrand struct {
	handler CategoryBrand
}

func (p *categoryBrandProcessorBatchReduceCategoryBrand) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CategoryBrandBatchReduceCategoryBrandArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchReduceCategoryBrand", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CategoryBrandBatchReduceCategoryBrandResult{}
	var retval *common.Empty
	if retval, err2 = p.handler.BatchReduceCategoryBrand(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchReduceCategoryBrand: "+err2.Error())
		oprot.WriteMessageBegin("BatchReduceCategoryBrand", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchReduceCategoryBrand", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type categoryBrandProcessorUpdateCategoryBrand struct {
	handler CategoryBrand
}

func (p *categoryBrandProcessorUpdateCategoryBrand) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CategoryBrandUpdateCategoryBrandArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateCategoryBrand", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CategoryBrandUpdateCategoryBrandResult{}
	var retval *common.Empty
	if retval, err2 = p.handler.UpdateCategoryBrand(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateCategoryBrand: "+err2.Error())
		oprot.WriteMessageBegin("UpdateCategoryBrand", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateCategoryBrand", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type categoryBrandProcessorDeleteBrandByCategory struct {
	handler CategoryBrand
}

func (p *categoryBrandProcessorDeleteBrandByCategory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CategoryBrandDeleteBrandByCategoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteBrandByCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CategoryBrandDeleteBrandByCategoryResult{}
	var retval *common.Empty
	if retval, err2 = p.handler.DeleteBrandByCategory(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteBrandByCategory: "+err2.Error())
		oprot.WriteMessageBegin("DeleteBrandByCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteBrandByCategory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type categoryBrandProcessorDeleteCategoryByBrand struct {
	handler CategoryBrand
}

func (p *categoryBrandProcessorDeleteCategoryByBrand) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CategoryBrandDeleteCategoryByBrandArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteCategoryByBrand", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CategoryBrandDeleteCategoryByBrandResult{}
	var retval *common.Empty
	if retval, err2 = p.handler.DeleteCategoryByBrand(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteCategoryByBrand: "+err2.Error())
		oprot.WriteMessageBegin("DeleteCategoryByBrand", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteCategoryByBrand", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type CategoryBrandBatchAddCategoryBrandArgs struct {
	Req *NewCategoryBrand `thrift:"req,1"`
}

func NewCategoryBrandBatchAddCategoryBrandArgs() *CategoryBrandBatchAddCategoryBrandArgs {
	return &CategoryBrandBatchAddCategoryBrandArgs{}
}

var CategoryBrandBatchAddCategoryBrandArgs_Req_DEFAULT *NewCategoryBrand

func (p *CategoryBrandBatchAddCategoryBrandArgs) GetReq() (v *NewCategoryBrand) {
	if !p.IsSetReq() {
		return CategoryBrandBatchAddCategoryBrandArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CategoryBrandBatchAddCategoryBrandArgs = map[int16]string{
	1: "req",
}

func (p *CategoryBrandBatchAddCategoryBrandArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CategoryBrandBatchAddCategoryBrandArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryBrandBatchAddCategoryBrandArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryBrandBatchAddCategoryBrandArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewNewCategoryBrand()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryBrandBatchAddCategoryBrandArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchAddCategoryBrand_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryBrandBatchAddCategoryBrandArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CategoryBrandBatchAddCategoryBrandArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryBrandBatchAddCategoryBrandArgs(%+v)", *p)
}

type CategoryBrandBatchAddCategoryBrandResult struct {
	Success []*CategoryBrandInfo `thrift:"success,0,optional"`
}

func NewCategoryBrandBatchAddCategoryBrandResult() *CategoryBrandBatchAddCategoryBrandResult {
	return &CategoryBrandBatchAddCategoryBrandResult{}
}

var CategoryBrandBatchAddCategoryBrandResult_Success_DEFAULT []*CategoryBrandInfo

func (p *CategoryBrandBatchAddCategoryBrandResult) GetSuccess() (v []*CategoryBrandInfo) {
	if !p.IsSetSuccess() {
		return CategoryBrandBatchAddCategoryBrandResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CategoryBrandBatchAddCategoryBrandResult = map[int16]string{
	0: "success",
}

func (p *CategoryBrandBatchAddCategoryBrandResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CategoryBrandBatchAddCategoryBrandResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryBrandBatchAddCategoryBrandResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryBrandBatchAddCategoryBrandResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Success = make([]*CategoryBrandInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewCategoryBrandInfo()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Success = append(p.Success, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CategoryBrandBatchAddCategoryBrandResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchAddCategoryBrand_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryBrandBatchAddCategoryBrandResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return err
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CategoryBrandBatchAddCategoryBrandResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryBrandBatchAddCategoryBrandResult(%+v)", *p)
}

type CategoryBrandBatchReduceCategoryBrandArgs struct {
	Req *NewCategoryBrand `thrift:"req,1"`
}

func NewCategoryBrandBatchReduceCategoryBrandArgs() *CategoryBrandBatchReduceCategoryBrandArgs {
	return &CategoryBrandBatchReduceCategoryBrandArgs{}
}

var CategoryBrandBatchReduceCategoryBrandArgs_Req_DEFAULT *NewCategoryBrand

func (p *CategoryBrandBatchReduceCategoryBrandArgs) GetReq() (v *NewCategoryBrand) {
	if !p.IsSetReq() {
		return CategoryBrandBatchReduceCategoryBrandArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CategoryBrandBatchReduceCategoryBrandArgs = map[int16]string{
	1: "req",
}

func (p *CategoryBrandBatchReduceCategoryBrandArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CategoryBrandBatchReduceCategoryBrandArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryBrandBatchReduceCategoryBrandArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryBrandBatchReduceCategoryBrandArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewNewCategoryBrand()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryBrandBatchReduceCategoryBrandArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchReduceCategoryBrand_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryBrandBatchReduceCategoryBrandArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CategoryBrandBatchReduceCategoryBrandArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryBrandBatchReduceCategoryBrandArgs(%+v)", *p)
}

type CategoryBrandBatchReduceCategoryBrandResult struct {
	Success *common.Empty `thrift:"success,0,optional"`
}

func NewCategoryBrandBatchReduceCategoryBrandResult() *CategoryBrandBatchReduceCategoryBrandResult {
	return &CategoryBrandBatchReduceCategoryBrandResult{}
}

var CategoryBrandBatchReduceCategoryBrandResult_Success_DEFAULT *common.Empty

func (p *CategoryBrandBatchReduceCategoryBrandResult) GetSuccess() (v *common.Empty) {
	if !p.IsSetSuccess() {
		return CategoryBrandBatchReduceCategoryBrandResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CategoryBrandBatchReduceCategoryBrandResult = map[int16]string{
	0: "success",
}

func (p *CategoryBrandBatchReduceCategoryBrandResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CategoryBrandBatchReduceCategoryBrandResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryBrandBatchReduceCategoryBrandResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryBrandBatchReduceCategoryBrandResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmpty()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryBrandBatchReduceCategoryBrandResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchReduceCategoryBrand_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryBrandBatchReduceCategoryBrandResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CategoryBrandBatchReduceCategoryBrandResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryBrandBatchReduceCategoryBrandResult(%+v)", *p)
}

type CategoryBrandUpdateCategoryBrandArgs struct {
	Req *NewCategoryBrand `thrift:"req,1"`
}

func NewCategoryBrandUpdateCategoryBrandArgs() *CategoryBrandUpdateCategoryBrandArgs {
	return &CategoryBrandUpdateCategoryBrandArgs{}
}

var CategoryBrandUpdateCategoryBrandArgs_Req_DEFAULT *NewCategoryBrand

func (p *CategoryBrandUpdateCategoryBrandArgs) GetReq() (v *NewCategoryBrand) {
	if !p.IsSetReq() {
		return CategoryBrandUpdateCategoryBrandArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CategoryBrandUpdateCategoryBrandArgs = map[int16]string{
	1: "req",
}

func (p *CategoryBrandUpdateCategoryBrandArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CategoryBrandUpdateCategoryBrandArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryBrandUpdateCategoryBrandArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryBrandUpdateCategoryBrandArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewNewCategoryBrand()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryBrandUpdateCategoryBrandArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCategoryBrand_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryBrandUpdateCategoryBrandArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CategoryBrandUpdateCategoryBrandArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryBrandUpdateCategoryBrandArgs(%+v)", *p)
}

type CategoryBrandUpdateCategoryBrandResult struct {
	Success *common.Empty `thrift:"success,0,optional"`
}

func NewCategoryBrandUpdateCategoryBrandResult() *CategoryBrandUpdateCategoryBrandResult {
	return &CategoryBrandUpdateCategoryBrandResult{}
}

var CategoryBrandUpdateCategoryBrandResult_Success_DEFAULT *common.Empty

func (p *CategoryBrandUpdateCategoryBrandResult) GetSuccess() (v *common.Empty) {
	if !p.IsSetSuccess() {
		return CategoryBrandUpdateCategoryBrandResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CategoryBrandUpdateCategoryBrandResult = map[int16]string{
	0: "success",
}

func (p *CategoryBrandUpdateCategoryBrandResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CategoryBrandUpdateCategoryBrandResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryBrandUpdateCategoryBrandResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryBrandUpdateCategoryBrandResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmpty()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryBrandUpdateCategoryBrandResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCategoryBrand_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryBrandUpdateCategoryBrandResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CategoryBrandUpdateCategoryBrandResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryBrandUpdateCategoryBrandResult(%+v)", *p)
}

type CategoryBrandDeleteBrandByCategoryArgs struct {
	Req *common.Req `thrift:"req,1"`
}

func NewCategoryBrandDeleteBrandByCategoryArgs() *CategoryBrandDeleteBrandByCategoryArgs {
	return &CategoryBrandDeleteBrandByCategoryArgs{}
}

var CategoryBrandDeleteBrandByCategoryArgs_Req_DEFAULT *common.Req

func (p *CategoryBrandDeleteBrandByCategoryArgs) GetReq() (v *common.Req) {
	if !p.IsSetReq() {
		return CategoryBrandDeleteBrandByCategoryArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CategoryBrandDeleteBrandByCategoryArgs = map[int16]string{
	1: "req",
}

func (p *CategoryBrandDeleteBrandByCategoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CategoryBrandDeleteBrandByCategoryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryBrandDeleteBrandByCategoryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryBrandDeleteBrandByCategoryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common.NewReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryBrandDeleteBrandByCategoryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteBrandByCategory_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryBrandDeleteBrandByCategoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CategoryBrandDeleteBrandByCategoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryBrandDeleteBrandByCategoryArgs(%+v)", *p)
}

type CategoryBrandDeleteBrandByCategoryResult struct {
	Success *common.Empty `thrift:"success,0,optional"`
}

func NewCategoryBrandDeleteBrandByCategoryResult() *CategoryBrandDeleteBrandByCategoryResult {
	return &CategoryBrandDeleteBrandByCategoryResult{}
}

var CategoryBrandDeleteBrandByCategoryResult_Success_DEFAULT *common.Empty

func (p *CategoryBrandDeleteBrandByCategoryResult) GetSuccess() (v *common.Empty) {
	if !p.IsSetSuccess() {
		return CategoryBrandDeleteBrandByCategoryResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CategoryBrandDeleteBrandByCategoryResult = map[int16]string{
	0: "success",
}

func (p *CategoryBrandDeleteBrandByCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CategoryBrandDeleteBrandByCategoryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryBrandDeleteBrandByCategoryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryBrandDeleteBrandByCategoryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmpty()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryBrandDeleteBrandByCategoryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteBrandByCategory_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryBrandDeleteBrandByCategoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CategoryBrandDeleteBrandByCategoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryBrandDeleteBrandByCategoryResult(%+v)", *p)
}

type CategoryBrandDeleteCategoryByBrandArgs struct {
	Req *common.Req `thrift:"req,1"`
}

func NewCategoryBrandDeleteCategoryByBrandArgs() *CategoryBrandDeleteCategoryByBrandArgs {
	return &CategoryBrandDeleteCategoryByBrandArgs{}
}

var CategoryBrandDeleteCategoryByBrandArgs_Req_DEFAULT *common.Req

func (p *CategoryBrandDeleteCategoryByBrandArgs) GetReq() (v *common.Req) {
	if !p.IsSetReq() {
		return CategoryBrandDeleteCategoryByBrandArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CategoryBrandDeleteCategoryByBrandArgs = map[int16]string{
	1: "req",
}

func (p *CategoryBrandDeleteCategoryByBrandArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CategoryBrandDeleteCategoryByBrandArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryBrandDeleteCategoryByBrandArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryBrandDeleteCategoryByBrandArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = common.NewReq()

	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryBrandDeleteCategoryByBrandArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCategoryByBrand_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryBrandDeleteCategoryByBrandArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CategoryBrandDeleteCategoryByBrandArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryBrandDeleteCategoryByBrandArgs(%+v)", *p)
}

type CategoryBrandDeleteCategoryByBrandResult struct {
	Success *common.Empty `thrift:"success,0,optional"`
}

func NewCategoryBrandDeleteCategoryByBrandResult() *CategoryBrandDeleteCategoryByBrandResult {
	return &CategoryBrandDeleteCategoryByBrandResult{}
}

var CategoryBrandDeleteCategoryByBrandResult_Success_DEFAULT *common.Empty

func (p *CategoryBrandDeleteCategoryByBrandResult) GetSuccess() (v *common.Empty) {
	if !p.IsSetSuccess() {
		return CategoryBrandDeleteCategoryByBrandResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CategoryBrandDeleteCategoryByBrandResult = map[int16]string{
	0: "success",
}

func (p *CategoryBrandDeleteCategoryByBrandResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CategoryBrandDeleteCategoryByBrandResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
				break
			}
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryBrandDeleteCategoryByBrandResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CategoryBrandDeleteCategoryByBrandResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmpty()

	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CategoryBrandDeleteCategoryByBrandResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCategoryByBrand_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryBrandDeleteCategoryByBrandResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CategoryBrandDeleteCategoryByBrandResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryBrandDeleteCategoryByBrandResult(%+v)", *p)
}
